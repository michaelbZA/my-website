<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python Series on Michael Brunger</title><link>https://michaelbrunger.com/categories/python-series/</link><description>Recent content in Python Series on Michael Brunger</description><image><title>Michael Brunger</title><url>https://michaelbrunger.com/site-feature-image.jpg</url><link>https://michaelbrunger.com/site-feature-image.jpg</link></image><generator>Hugo -- 0.146.7</generator><language>en-GB</language><lastBuildDate>Mon, 05 May 2025 22:42:52 +0100</lastBuildDate><atom:link href="https://michaelbrunger.com/categories/python-series/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 2: Text Editors vs. IDEs for Python Development</title><link>https://michaelbrunger.com/python-foundations-editors-ides/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-foundations-editors-ides/</guid><description>Compare lightweight text editors to full-featured IDEs for Python development. Learn how to set up VS Code with essential Python extensions and discover effective debugging techniques.</description><content:encoded><![CDATA[<h1 id="post-2-text-editors-vs-ides-for-python-development">Post 2: Text Editors vs. IDEs for Python Development</h1>
<p>Welcome to the second post in my Python learning series. Last time, we got Python installed and ran our first code. Now it&rsquo;s time to set up a proper coding environment. Working directly with <code>.py</code> files in Notepad gets tedious quickly, so let&rsquo;s explore better options for writing Python code.</p>
<p>In this post, we&rsquo;ll cover:</p>
<ol>
<li>The difference between text editors and IDEs</li>
<li>Popular options for Python development</li>
<li>Setting up VS Code for Python (my personal choice)</li>
<li>Key productivity features that will save you time</li>
<li>Running and debugging Python code from your editor</li>
</ol>
<hr>
<h2 id="1-text-editors-vs-ides-whats-the-difference">1. Text Editors vs. IDEs: What&rsquo;s the Difference?</h2>
<p>When I started learning Python, I was confused about whether to use a &ldquo;text editor&rdquo; or an &ldquo;IDE&rdquo;. Here&rsquo;s the simple breakdown:</p>
<p><strong>Text Editors</strong>:</p>
<ul>
<li>Lightweight applications primarily designed for editing text</li>
<li>Minimal features out of the box, but often extensible with plugins</li>
<li>Faster startup times and lower system resource usage</li>
<li>Examples: Notepad++, Sublime Text, Atom</li>
</ul>
<p><strong>Integrated Development Environments (IDEs)</strong>:</p>
<ul>
<li>Comprehensive software packages with built-in tools for development</li>
<li>Include code completion, debugging, testing, and version control features</li>
<li>More resource-intensive but offer productivity benefits</li>
<li>Examples: PyCharm, Visual Studio, Eclipse</li>
</ul>
<p>Modern text editors with plugins can blur the line between these categories. For instance, VS Code is technically a text editor but can function like an IDE with the right extensions.</p>
<hr>
<h2 id="2-popular-options-for-python-development">2. Popular Options for Python Development</h2>
<p>Here are some commonly used tools for Python programming:</p>
<h3 id="text-editors">Text Editors</h3>
<p><strong>Notepad++</strong> (Windows only)</p>
<ul>
<li>Free and lightweight</li>
<li>Basic syntax highlighting for Python</li>
<li>Minimal Python-specific features</li>
<li>Good for quick edits but limited for larger projects</li>
</ul>
<p><strong>Sublime Text</strong></p>
<ul>
<li>Cross-platform (Windows, macOS, Linux)</li>
<li>Fast and responsive with large files</li>
<li>Package manager for extensions</li>
<li>Free to evaluate, $99 license for continued use</li>
</ul>
<p><strong>Atom</strong></p>
<ul>
<li>Open-source and free</li>
<li>Highly customisable</li>
<li>Good Git integration</li>
<li>Can be slower with large projects</li>
</ul>
<h3 id="ides">IDEs</h3>
<p><strong>Visual Studio Code (VS Code)</strong></p>
<ul>
<li>Free, open-source, cross-platform</li>
<li>Extensive extension library</li>
<li>Lightweight but powerful</li>
<li>Strong Python support through extensions</li>
<li>My personal choice and what we&rsquo;ll focus on in this post</li>
</ul>
<p><strong>PyCharm</strong></p>
<ul>
<li>Python-specific IDE by JetBrains</li>
<li>Community (free) and Professional (paid) editions</li>
<li>Comprehensive tools designed specifically for Python</li>
<li>Steeper learning curve but powerful features</li>
</ul>
<p><strong>Jupyter Notebooks</strong></p>
<ul>
<li>Interactive coding environment</li>
<li>Great for data analysis and visualisation</li>
<li>Documents that combine code, output, and markdown text</li>
<li>We&rsquo;ll cover this in detail in a later post</li>
</ul>
<p>After trying several options, I settled on VS Code for its balance of performance and features. It&rsquo;s lightweight enough to run smoothly on my machine but offers robust Python support.</p>
<hr>
<h2 id="3-setting-up-vs-code-for-python-development">3. Setting Up VS Code for Python Development</h2>
<p>If you&rsquo;re following along with me, let&rsquo;s set up VS Code:</p>
<h3 id="31-download-and-install-vs-code">3.1 Download and Install VS Code</h3>
<ol>
<li>Go to <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>Download the installer for your operating system</li>
<li>Run the installer with default options</li>
</ol>
<h3 id="32-install-essential-python-extensions">3.2 Install Essential Python Extensions</h3>
<ol>
<li>Launch VS Code</li>
<li>Click the Extensions icon in the left sidebar (or press Ctrl+Shift+X)</li>
<li>Search for and install these extensions:
<ul>
<li><strong>Python</strong> by Microsoft (essential)</li>
<li><strong>Pylance</strong> for improved language support</li>
<li><strong>Python Indent</strong> for automatic indentation</li>
</ul>
</li>
</ol>
<h3 id="33-configure-python-interpreter">3.3 Configure Python Interpreter</h3>
<ol>
<li>Open a Python file or create a new one (File &gt; New File, then save with <code>.py</code> extension)</li>
<li>Click on &ldquo;Select Python Interpreter&rdquo; in the bottom status bar</li>
<li>Choose the Python installation you installed in Post 1</li>
</ol>
<h3 id="34-set-up-code-formatting-and-linting">3.4 Set Up Code Formatting and Linting</h3>
<p>These tools help maintain code quality and consistent style:</p>
<ol>
<li>
<p>Install the <strong>autopep8</strong> formatter:</p>
<ul>
<li>Open a terminal in VS Code (Terminal &gt; New Terminal)</li>
<li>Run: <code>pip install autopep8</code></li>
</ul>
</li>
<li>
<p>Configure formatter settings:</p>
<ul>
<li>Press Ctrl+Shift+P to open the command palette</li>
<li>Type &ldquo;Preferences: Open Settings (JSON)&rdquo;</li>
<li>Add these settings:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.formatting.provider&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;autopep8&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;editor.formatOnSave&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.linting.enabled&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.linting.pylintEnabled&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div></li>
<li>
<p>Install Pylint for code quality checking:</p>
<ul>
<li>In the terminal, run: <code>pip install pylint</code></li>
</ul>
</li>
</ol>
<hr>
<h2 id="4-key-productivity-features">4. Key Productivity Features</h2>
<p>Here are some features that have saved me hours of time while learning Python:</p>
<h3 id="41-code-highlighting-and-intellisense">4.1 Code Highlighting and IntelliSense</h3>
<p>VS Code automatically highlights Python syntax and provides IntelliSense (code completion):</p>
<ul>
<li>Start typing a Python keyword or function name</li>
<li>VS Code shows suggestions as you type</li>
<li>Press Tab to complete the suggestion</li>
</ul>
<p>Try it by typing <code>pri</code> and watching it suggest <code>print()</code>.</p>
<h3 id="42-code-snippets">4.2 Code Snippets</h3>
<p>Snippets let you insert commonly used code patterns quickly:</p>
<ol>
<li>Type <code>if</code> and press Tab</li>
<li>VS Code inserts the <code>if</code> statement structure</li>
<li>Fill in the condition and press Tab to move to the body</li>
</ol>
<p>Other useful snippets: <code>for</code>, <code>def</code>, <code>class</code>, <code>try</code></p>
<h3 id="43-file-explorer-and-multiple-files">4.3 File Explorer and Multiple Files</h3>
<p>Having a file explorer helps manage projects with multiple files:</p>
<ol>
<li>Use File &gt; Open Folder to open your project directory</li>
<li>The left sidebar shows all files in that folder</li>
<li>Create new files or folders directly in VS Code</li>
</ol>
<h3 id="44-integrated-terminal">4.4 Integrated Terminal</h3>
<p>No need to switch between VS Code and Command Prompt:</p>
<ol>
<li>Press Ctrl+` (backtick) or use Terminal &gt; New Terminal</li>
<li>Run Python code, install packages, or use Git commands</li>
</ol>
<hr>
<h2 id="5-running-and-debugging-python-code">5. Running and Debugging Python Code</h2>
<h3 id="51-running-python-files">5.1 Running Python Files</h3>
<p>Method 1: Using the Play Button</p>
<ol>
<li>Open a Python file</li>
<li>Click the Play icon in the top-right corner</li>
</ol>
<p>Method 2: Using the Terminal</p>
<ol>
<li>Open the integrated terminal (Ctrl+`)</li>
<li>Run: <code>python your_file.py</code></li>
</ol>
<h3 id="52-introduction-to-debugging">5.2 Introduction to Debugging</h3>
<p>Debugging helps you find and fix errors in your code:</p>
<ol>
<li>Set a breakpoint by clicking in the margin to the left of a line number (a red dot appears)</li>
<li>Press F5 or click the Debug icon in the sidebar, then &ldquo;Start Debugging&rdquo;</li>
<li>Your code runs until it hits the breakpoint, then pauses</li>
<li>Examine variables in the &ldquo;Variables&rdquo; panel</li>
<li>Use the debug toolbar to step through code line by line</li>
</ol>
<h3 id="53-print-driven-debugging-vs-using-a-debugger">5.3 Print-Driven Debugging vs. Using a Debugger</h3>
<p>When I first started coding, I relied heavily on <code>print()</code> statements to understand what was happening in my code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_total</span>(items):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Items received: </span><span style="color:#e6db74">{</span>items<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Debug print</span>
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">=</span> sum(items)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Calculated total: </span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Debug print</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total
</span></span></code></pre></div><p>While this works, using the debugger is more powerful:</p>
<ul>
<li>You can inspect all variables without modifying code</li>
<li>You can pause execution and examine the program state</li>
<li>You don&rsquo;t need to remove debug code when you&rsquo;re done</li>
</ul>
<hr>
<h2 id="practice-exercise">Practice Exercise</h2>
<p>Let&rsquo;s put your new environment to use:</p>
<ol>
<li>Create a new file called <code>calculator.py</code> in VS Code</li>
<li>Write a simple function that takes two numbers and an operation (add, subtract, multiply, divide) and returns the result</li>
<li>Add proper error handling (e.g., division by zero)</li>
<li>Use print statements to test your function with various inputs</li>
</ol>
<p><strong>Example solution</strong> (try it yourself first!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate</span>(a, b, operation):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;add&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;subtract&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">-</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;multiply&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">*</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;divide&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Division by zero&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">/</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Unknown operation&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Test the function</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;add&#34;</span>))       <span style="color:#75715e"># Should print 15</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;subtract&#34;</span>))  <span style="color:#75715e"># Should print 5</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;multiply&#34;</span>))  <span style="color:#75715e"># Should print 50</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;divide&#34;</span>))    <span style="color:#75715e"># Should print 2.0</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;divide&#34;</span>))    <span style="color:#75715e"># Should print error message</span>
</span></span></code></pre></div><p>Try using the debugger to step through this code and watch how the variables change.</p>
<hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we have our Python development environment set up, we&rsquo;re ready to dive deeper into Python syntax and language features. In the next post, we&rsquo;ll explore variables, data types, control flow, and more fundamental Python concepts.</p>
<p>Stay tuned for Post 3: Python Syntax Fundamentals &amp; Language Features!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.</em></p>
]]></content:encoded></item><item><title>Part 1: Getting Started with Python on Windows</title><link>https://michaelbrunger.com/python-foundations-getting-started/</link><pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-foundations-getting-started/</guid><description>Learn what Python is, install it on Windows, and write your first Python program in this introductory guide to the Python programming language.</description><content:encoded><![CDATA[<h1 id="post-1-getting-started-with-python-on-windows">Post 1: Getting Started with Python on Windows</h1>
<p>Welcome to the first post in my Python learning series. As I learn Python myself, I&rsquo;ll be documenting my journey here. This first post covers the essentials to get you up and running with Python on Windows:</p>
<ol>
<li>What Python is and why it&rsquo;s worth learning</li>
<li>Installing Python on Windows (with step-by-step instructions)</li>
<li>Quick install notes for macOS &amp; Linux users</li>
<li>Writing your first &ldquo;Hello, World!&rdquo; program</li>
<li>Using the Python interactive shell</li>
</ol>
<hr>
<h2 id="1-what-is-python-and-why-learn-it">1. What Is Python (and Why Learn It)?</h2>
<p>Python is a high-level, interpreted programming language that&rsquo;s gained enormous popularity for good reason. After looking into various languages, I chose to learn Python because:</p>
<ul>
<li><strong>Readability</strong>: Its clean syntax uses indentation and fewer symbols than languages like C++ or Java, making code easier to understand</li>
<li><strong>Versatility</strong>: It&rsquo;s used across multiple domains from web development (Django, Flask) to data analysis (NumPy, pandas) and automation</li>
<li><strong>Package ecosystem</strong>: PyPI (Python Package Index) hosts over 400,000 third-party packages that extend Python&rsquo;s capabilities</li>
<li><strong>Community support</strong>: Extensive documentation, forums, and tutorials make finding help straightforward</li>
</ul>
<p>For me as a finance professional, Python&rsquo;s data analysis capabilities are particularly valuable, but its applications stretch across many fields.</p>
<hr>
<h2 id="2-installing-python-on-windows">2. Installing Python on Windows</h2>
<p>Here&rsquo;s how to get Python installed on Windows 10/11:</p>
<h3 id="21-download-the-installer">2.1 Download the Installer</h3>
<ol>
<li>Visit the official Python download page: <a href="https://www.python.org/downloads/windows">https://www.python.org/downloads/windows</a></li>
<li>Click the button for the latest stable release (currently Python 3.11.x)</li>
</ol>
<h3 id="22-run-the-installer">2.2 Run the Installer</h3>
<ol>
<li>Locate and double-click the downloaded file (typically named python-3.x.x-amd64.exe)</li>
<li><strong>IMPORTANT</strong>: Check the box that says &ldquo;Add Python 3.x to PATH&rdquo; at the bottom of the installer
<ul>
<li>This allows you to run Python from any directory in Command Prompt</li>
</ul>
</li>
<li>Click &ldquo;Install Now&rdquo; for the standard installation, or &ldquo;Customise installation&rdquo; if you want to change specific options</li>
</ol>
<h3 id="23-verify-the-installation">2.3 Verify the Installation</h3>
<ol>
<li>Open Command Prompt (press Win + R, type <code>cmd</code>, and hit Enter)</li>
<li>Type the following command and press Enter:
<pre tabindex="0"><code>python --version
</code></pre></li>
<li>You should see output like:
<pre tabindex="0"><code>Python 3.11.4
</code></pre>(Your version number might differ)</li>
</ol>
<hr>
<h2 id="3-quick-notes-for-macos--linux">3. Quick Notes for macOS &amp; Linux</h2>
<ul>
<li>
<p><strong>macOS</strong>:</p>
<ul>
<li>Many Macs come with Python 2.7 preinstalled, but you&rsquo;ll want Python 3</li>
<li>The simplest approach is using Homebrew:
<pre tabindex="0"><code>brew install python
</code></pre></li>
<li>Alternatively, download the installer from python.org</li>
</ul>
</li>
<li>
<p><strong>Linux</strong>:</p>
<ul>
<li>Most Linux distributions include Python</li>
<li>For Ubuntu/Debian:
<pre tabindex="0"><code>sudo apt update
sudo apt install python3 python3-pip
</code></pre></li>
</ul>
</li>
</ul>
<p>For complete instructions, see the official Python documentation:</p>
<ul>
<li>macOS: <a href="https://docs.python.org/3/using/mac.html">https://docs.python.org/3/using/mac.html</a></li>
<li>Linux: <a href="https://docs.python.org/3/using/unix.html">https://docs.python.org/3/using/unix.html</a></li>
</ul>
<hr>
<h2 id="4-your-first-hello-world-script">4. Your First &ldquo;Hello, World!&rdquo; Script</h2>
<p>Time to write your first Python program:</p>
<ol>
<li>
<p>In Command Prompt, navigate to a folder where you want to create your script:</p>
<pre tabindex="0"><code>cd C:\Users\YourUsername\Documents
</code></pre></li>
<li>
<p>Create a new file named <code>hello.py</code> using any text editor (Notepad, VS Code, etc.)</p>
</li>
<li>
<p>Type this line in the file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Hello, World!&#34;</span>)
</span></span></code></pre></div></li>
<li>
<p>Save the file, then run it by typing in Command Prompt:</p>
<pre tabindex="0"><code>python hello.py
</code></pre></li>
<li>
<p>You should see:</p>
<pre tabindex="0"><code>Hello, World!
</code></pre></li>
</ol>
<p>Congratulations—you&rsquo;ve written and executed your first Python program!</p>
<hr>
<h2 id="5-exploring-the-python-interactive-shell">5. Exploring the Python Interactive Shell</h2>
<p>Python comes with an interactive shell (also called a REPL—Read-Evaluate-Print Loop) that lets you test code snippets immediately:</p>
<ol>
<li>
<p>In Command Prompt, simply type:</p>
<pre tabindex="0"><code>python
</code></pre></li>
<li>
<p>You&rsquo;ll see the Python prompt (<code>&gt;&gt;&gt;</code>) where you can type code directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Python&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;I&#39;m learning </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>)
</span></span><span style="display:flex;"><span>I<span style="color:#e6db74">&#39;m learning Python!</span>
</span></span></code></pre></div></li>
<li>
<p>Try some basic math:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">35</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5.0</span>
</span></span></code></pre></div></li>
<li>
<p>To exit, type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> exit()
</span></span></code></pre></div><p>Or press Ctrl+Z followed by Enter on Windows.</p>
</li>
</ol>
<p>The interactive shell is excellent for quick experiments and calculations without creating a file.</p>
<hr>
<h2 id="practice-exercise">Practice Exercise</h2>
<p>Before moving on, try this quick exercise:</p>
<ol>
<li>Create a new Python file named <code>greeting.py</code></li>
<li>Write code that:
<ul>
<li>Assigns your name to a variable</li>
<li>Prints a greeting that includes your name</li>
</ul>
</li>
<li>Run the script to see the output</li>
</ol>
<p><strong>Example solution</strong> (don&rsquo;t peek until you&rsquo;ve tried!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Alex&#34;</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Nice to meet you, </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that you have Python installed and have run your first code, you&rsquo;re ready to:</p>
<ul>
<li>Explore text editors and IDEs that will make coding more efficient (coming in Post 2)</li>
<li>Learn Python syntax fundamentals to build more complex programs</li>
<li>Begin solving real problems with your new skills</li>
</ul>
<p>Stay tuned for Post 2: Text Editors vs. IDEs for Python Development!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.</em></p>
]]></content:encoded></item><item><title>Python Learning Path: From Fundamentals to Intermediate Applications</title><link>https://michaelbrunger.com/python-learning-path/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-learning-path/</guid><description>A comprehensive 17-post curriculum taking you from Python installation to building real-world applications. Covers core language features, professional practices, data analysis tools, and practical project development.</description><content:encoded><![CDATA[<h2 id="my-python-learning-journey">My Python Learning Journey</h2>
<p>Welcome to my Python learning series! As a finance professional exploring programming, I&rsquo;m documenting my entire journey through 17 posts that take you from absolute beginner to building practical applications.</p>
<h2 id="what-to-expect-from-this-series">What to Expect from This Series</h2>
<p>This series is designed for fellow finance professionals and beginners who want to learn Python in a practical, step-by-step manner. Each post builds on previous concepts while introducing new skills.</p>
<h2 id="series-overview">Series Overview</h2>
<p>Here&rsquo;s what we&rsquo;ll cover throughout the 17 posts:</p>
<h2 id="foundations-posts-16">Foundations (Posts 1–6)</h2>
<h3 id="1-getting-started-with-python-on-windows">1. Getting Started with Python on Windows</h3>
<ul>
<li>What is Python, why learn it, and where it&rsquo;s used</li>
<li>Installing Python (step‑by‑step Windows installer with screenshots)</li>
<li>Quick pointers for macOS/Linux installs</li>
<li>Your first &ldquo;Hello, World!&rdquo; script</li>
<li>Exploring the interactive REPL (shell)</li>
</ul>
<h3 id="2-text-editors-vs-ides-for-python-development">2. Text Editors vs. IDEs for Python Development</h3>
<ul>
<li>Lightweight editors (Notepad++, Sublime) vs. full IDEs (VS Code, PyCharm)</li>
<li>Setting up VS Code for Python (extensions, linting, auto‑format)</li>
<li>Code highlighting, IntelliSense/autocomplete, and snippets</li>
<li>Running and debugging code from your editor</li>
<li>Quick intro to IDE‑based breakpoints vs. print‑driven debugging</li>
</ul>
<h3 id="3-python-syntax-fundamentals--language-features">3. Python Syntax Fundamentals &amp; Language Features</h3>
<ul>
<li>Variables, data types (numbers, strings, booleans) and operators</li>
<li>Indentation and control flow (if/elif/else, loops)</li>
<li>Comprehensions &amp; lambdas: list/dict/set comprehensions, map/filter, anonymous functions</li>
<li>Iterators &amp; generators: the iterator protocol, writing your own with yield</li>
<li>Basic error handling: try/except, else/finally</li>
</ul>
<h3 id="4-core-data-structures">4. Core Data Structures</h3>
<ul>
<li>Lists: creation, indexing, slicing, methods</li>
<li>Tuples: immutability, packing/unpacking</li>
<li>Dictionaries: key–value access, common methods</li>
<li>Sets: uniqueness, union/intersection/difference</li>
<li>Choosing the right structure for the task</li>
</ul>
<h3 id="5-functions-modules--file-io">5. Functions, Modules &amp; File I/O</h3>
<ul>
<li>Defining and calling functions (def, return, positional vs. keyword args)</li>
<li>Variable scope and namespaces</li>
<li>Organising code into modules and packages</li>
<li>Exploring the Standard Library (math, random, datetime, os, sys)</li>
<li>Reading from/writing to text files with open() and the with statement</li>
</ul>
<h3 id="6-virtual-environments--packaging">6. Virtual Environments &amp; Packaging</h3>
<ul>
<li>Why virtual environments matter (avoiding dependency conflicts)</li>
<li>Creating/activating/deactivating venv on Windows (and notes for macOS/Linux)</li>
<li>Managing packages with pip: install, freeze, requirements.txt</li>
<li>Basic packaging: project structure, setup.py/pyproject.toml essentials</li>
<li>Publishing to PyPI with twine and versioning best practices</li>
</ul>
<hr>
<h2 id="professional-best-practices-posts-79">Professional Best Practices (Posts 7–9)</h2>
<h3 id="7-code-quality--collaboration">7. Code Quality &amp; Collaboration</h3>
<ul>
<li>Version control fundamentals with Git &amp; GitHub (clone, commit, push, pull requests)</li>
<li>Writing clean, PEP 8‑compliant code; linting with flake8</li>
<li>Auto‑formatting with black and organising imports with isort</li>
<li>Writing docstrings (Google vs. NumPy style) and auto‑generating docs (Sphinx overview)</li>
</ul>
<h3 id="8-testing--debugging">8. Testing &amp; Debugging</h3>
<ul>
<li>Unit testing basics with unittest and pytest (assertions, test discovery)</li>
<li>Fixtures in pytest and intro to TDD workflows</li>
<li>Raising and defining custom exceptions (raise, subclassing Exception)</li>
<li>Using the debugger: pdb commands and IDE‑based breakpoints</li>
<li>Structured logging with the logging module (levels, handlers, formatting)</li>
</ul>
<h3 id="9-commandline-tools--automation">9. Command‑Line Tools &amp; Automation</h3>
<ul>
<li>Building CLI scripts with argparse: positional args, flags, help text</li>
<li>Packaging entry points (console_scripts) for installable commands</li>
<li>Automating file/folder tasks (os, shutil): renaming, organising, backups</li>
<li>Automating GUI interactions with PyAutoGUI (keyboard/mouse control)</li>
<li>Putting it all together in a sample automation project</li>
</ul>
<hr>
<h2 id="core-tools--data-posts-1013">Core Tools &amp; Data (Posts 10–13)</h2>
<h3 id="10-the-python-ecosystem--interactive-data-workflows">10. The Python Ecosystem &amp; Interactive Data Workflows</h3>
<ul>
<li>Clarify package vs. environment managers: pip vs. conda vs. Anaconda</li>
<li>When and why to choose each (lightweight vs. data‑science bundles)</li>
<li>Installing and exploring Anaconda Navigator</li>
<li>Jupyter Notebooks: installing via pip/Anaconda, notebook anatomy (code vs. Markdown), basic plots inline</li>
</ul>
<h3 id="11-numpy-fundamentals-for-numerical-data">11. NumPy Fundamentals for Numerical Data</h3>
<ul>
<li>Installing NumPy</li>
<li>The ndarray: creation, indexing, slicing</li>
<li>Vectorized operations and broadcasting rules</li>
<li>Performance comparison vs. pure Python lists</li>
</ul>
<h3 id="12-data-analysis-with-pandas">12. Data Analysis with pandas</h3>
<ul>
<li>Installing pandas</li>
<li>Understanding Series and DataFrame objects</li>
<li>Reading data (CSV, Excel), inspecting and summarising</li>
<li>Selection, filtering, grouping, transformation</li>
<li>Handling missing data</li>
</ul>
<h3 id="13-data-visualisation-basics">13. Data Visualisation Basics</h3>
<ul>
<li>Matplotlib core: line, scatter, bar, histogram plots</li>
<li>Customising labels, titles, legends</li>
<li>Seaborn intro: statistical plot types (boxplot, heatmap)</li>
<li>Saving figures to files for reports</li>
</ul>
<hr>
<h2 id="intermediate-applications-posts-1417">Intermediate Applications (Posts 14–17)</h2>
<h3 id="14-introduction-to-objectoriented-programming-oop">14. Introduction to Object‑Oriented Programming (OOP)</h3>
<ul>
<li>Classes vs. objects, attributes vs. methods</li>
<li>The init constructor and self</li>
<li>Encapsulation, inheritance and polymorphism (simple examples)</li>
<li>Why OOP matters: organising and reusing code</li>
</ul>
<h3 id="15-web-development-foundations">15. Web Development Foundations</h3>
<ul>
<li>Option A: Flask (lightweight): setting up, routes, templates, serving static files</li>
<li>Option B: Django (full‑featured): project/app structure, admin interface, ORM intro</li>
<li>Option C: Web Scraping: requests + BeautifulSoup for HTML parsing</li>
<li>Deploying your first minimal web app on a free hosting platform (e.g., Heroku)</li>
</ul>
<h3 id="16-building-simple-gui-applications-with-tkinter">16. Building Simple GUI Applications with Tkinter</h3>
<ul>
<li>Installing/importing Tkinter (built‑in)</li>
<li>Creating windows, labels, buttons, entry widgets</li>
<li>Layout managers (pack, grid)</li>
<li>A hands‑on mini‑project: e.g., basic calculator or temperature converter</li>
</ul>
<h3 id="17-next-steps--advanced-topics">17. Next Steps &amp; Advanced Topics</h3>
<ul>
<li>Concurrency &amp; async: when to use threads vs. processes (threading, multiprocessing), intro to asyncio</li>
<li>End‑to‑end mini‑project ideas (combine web, data, GUI, testing)</li>
<li>Recommended books, courses, blogs, and community resources</li>
<li>Tips for staying sharp: code challenges, open‑source contribution, local meetups</li>
</ul>
]]></content:encoded></item></channel></rss>