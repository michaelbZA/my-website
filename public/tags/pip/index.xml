<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pip on Michael Brunger</title><link>https://michaelbrunger.com/tags/pip/</link><description>Recent content in Pip on Michael Brunger</description><image><title>Michael Brunger</title><url>https://michaelbrunger.com/site-feature-image.jpg</url><link>https://michaelbrunger.com/site-feature-image.jpg</link></image><generator>Hugo -- 0.146.7</generator><language>en-GB</language><lastBuildDate>Mon, 12 May 2025 11:13:25 +0100</lastBuildDate><atom:link href="https://michaelbrunger.com/tags/pip/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 10: The Python Ecosystem &amp; Interactive Data Workflows</title><link>https://michaelbrunger.com/python-ecosystem-interactive-data/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-ecosystem-interactive-data/</guid><description>Compare package managers (pip vs. conda), explore Anaconda Navigator, and learn to use Jupyter Notebooks for interactive data analysis and visualization.</description><content:encoded><![CDATA[<h1 id="the-python-ecosystem--interactive-data-workflows">The Python Ecosystem &amp; Interactive Data Workflows</h1>
<p>As a finance professional diving deeper into Python, I&rsquo;ve found that understanding the broader ecosystem of tools is just as important as learning the language itself. In this post, we&rsquo;ll explore the different ways to manage Python packages and environments, and dive into interactive data workflows that can transform how you work with financial data.</p>
<h2 id="package-vs-environment-managers-pip-conda-and-anaconda">Package vs. Environment Managers: pip, conda, and Anaconda</h2>
<p>When I first started with Python, I was confused by the different tools available for installing packages and managing environments. Let&rsquo;s clarify these concepts.</p>
<h3 id="pip-the-standard-package-manager">pip: The Standard Package Manager</h3>
<p><code>pip</code> is Python&rsquo;s default package manager - it&rsquo;s what we&rsquo;ve been using in previous posts. It comes bundled with Python and is straightforward for basic needs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Install a package with pip</span>
</span></span><span style="display:flex;"><span>pip install pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a specific version</span>
</span></span><span style="display:flex;"><span>pip install pandas<span style="color:#f92672">==</span>1.4.2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Upgrade a package</span>
</span></span><span style="display:flex;"><span>pip install --upgrade pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List installed packages</span>
</span></span><span style="display:flex;"><span>pip list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate a requirements file</span>
</span></span><span style="display:flex;"><span>pip freeze &gt; requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install from requirements file</span>
</span></span><span style="display:flex;"><span>pip install -r requirements.txt
</span></span></code></pre></div><p><strong>Pros of pip:</strong></p>
<ul>
<li>Simple and lightweight</li>
<li>Built-in with Python</li>
<li>Works with virtual environments (venv)</li>
<li>Perfect for most Python projects</li>
</ul>
<p><strong>Cons of pip:</strong></p>
<ul>
<li>Doesn&rsquo;t manage non-Python dependencies well</li>
<li>Can&rsquo;t create standalone environments (relies on venv)</li>
<li>Not ideal for complex data science setups with conflicting dependencies</li>
</ul>
<h3 id="conda-the-environment-and-package-manager">conda: The Environment and Package Manager</h3>
<p><code>conda</code> is both a package manager and an environment manager. Unlike pip, conda isn&rsquo;t specific to Python - it can manage packages for any language.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a new environment</span>
</span></span><span style="display:flex;"><span>conda create --name finance_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Activate the environment</span>
</span></span><span style="display:flex;"><span>conda activate finance_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a package</span>
</span></span><span style="display:flex;"><span>conda install pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a package from a specific channel</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge plotly
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List installed packages</span>
</span></span><span style="display:flex;"><span>conda list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export environment</span>
</span></span><span style="display:flex;"><span>conda env export &gt; environment.yml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create environment from file</span>
</span></span><span style="display:flex;"><span>conda env create -f environment.yml
</span></span></code></pre></div><p><strong>Pros of conda:</strong></p>
<ul>
<li>Manages both Python and non-Python dependencies</li>
<li>Creates isolated environments</li>
<li>Better dependency resolution than pip</li>
<li>Great for data science packages with complex dependencies</li>
<li>Cross-platform compatibility</li>
</ul>
<p><strong>Cons of conda:</strong></p>
<ul>
<li>More complex than pip</li>
<li>Can be slower for simple installations</li>
<li>Larger footprint on your system</li>
</ul>
<h3 id="anaconda-the-all-in-one-distribution">Anaconda: The All-in-One Distribution</h3>
<p>Anaconda is a distribution of Python that comes bundled with conda and a collection of 250+ pre-installed data science packages. Think of it as the &ldquo;deluxe edition&rdquo; of Python.</p>
<p><strong>Pros of Anaconda:</strong></p>
<ul>
<li>Everything installed in one go</li>
<li>Includes widely-used data science packages</li>
<li>Comes with Anaconda Navigator (GUI)</li>
<li>Includes many finance-relevant packages pre-installed</li>
<li>Great for beginners who want everything set up</li>
</ul>
<p><strong>Cons of Anaconda:</strong></p>
<ul>
<li>Very large download (several GB)</li>
<li>Takes up a lot of disk space</li>
<li>Includes many packages you might never use</li>
<li>Can be overkill for simple projects</li>
</ul>
<h3 id="miniconda-the-lightweight-alternative">Miniconda: The Lightweight Alternative</h3>
<p>If you like conda but don&rsquo;t want all the extra packages, Miniconda gives you just Python and conda. You can then install only what you need.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Install specific packages as needed</span>
</span></span><span style="display:flex;"><span>conda create --name finance_env python<span style="color:#f92672">=</span>3.10 pandas numpy matplotlib
</span></span></code></pre></div><h3 id="when-to-choose-each-option">When to Choose Each Option</h3>
<p>Here&rsquo;s a simple decision matrix I use:</p>
<ul>
<li>
<p><strong>Use pip + venv when:</strong></p>
<ul>
<li>You&rsquo;re building a standard Python application</li>
<li>Your project has simple dependencies</li>
<li>You&rsquo;re developing a package for others to use</li>
<li>You&rsquo;re following my previous posts where we used venv</li>
<li>You want to keep things lightweight</li>
</ul>
</li>
<li>
<p><strong>Use conda when:</strong></p>
<ul>
<li>You need complex scientific packages (NumPy, SciPy, etc.)</li>
<li>You work with packages that have non-Python dependencies</li>
<li>You switch between different projects with conflicting dependencies</li>
<li>You need consistent environments across different operating systems</li>
</ul>
</li>
<li>
<p><strong>Use Anaconda when:</strong></p>
<ul>
<li>You&rsquo;re just getting started with data science</li>
<li>You want a hassle-free setup with all major packages included</li>
<li>You prefer using a GUI (Anaconda Navigator)</li>
<li>Disk space isn&rsquo;t a concern</li>
<li>You&rsquo;re setting up a training environment</li>
</ul>
</li>
</ul>
<p>For my financial analysis work, I primarily use conda environments because many financial modeling packages have complex dependencies, and I often need to switch between different project environments.</p>
<h2 id="installing-and-exploring-anaconda-navigator">Installing and Exploring Anaconda Navigator</h2>
<p>Let&rsquo;s explore Anaconda Navigator, which provides a graphical interface to manage environments and packages.</p>
<h3 id="installation">Installation</h3>
<ol>
<li>Download Anaconda from <a href="https://www.anaconda.com/products/distribution">the official site</a></li>
<li>Run the installer:
<ul>
<li>Windows: Double-click the <code>.exe</code> file and follow the wizard</li>
<li>macOS: Double-click the <code>.pkg</code> file and follow the prompts</li>
<li>Linux: Run <code>bash Anaconda-latest-Linux-x86_64.sh</code> in terminal</li>
</ul>
</li>
</ol>
<p>During installation:</p>
<ul>
<li>Install for &ldquo;Just Me&rdquo; (recommended)</li>
<li>Accept the default location (or choose another)</li>
<li><strong>Important choice</strong>: Whether to add Anaconda to your PATH environment variable
<ul>
<li>I recommend selecting &ldquo;Yes&rdquo; for convenience, though the installer suggests &ldquo;No&rdquo;</li>
</ul>
</li>
</ul>
<h3 id="launching-anaconda-navigator">Launching Anaconda Navigator</h3>
<ul>
<li>Windows: Start menu → Anaconda3 → Anaconda Navigator</li>
<li>macOS: Launchpad → Anaconda Navigator</li>
<li>Linux: Terminal → <code>anaconda-navigator</code></li>
</ul>
<h3 id="navigator-interface-overview">Navigator Interface Overview</h3>
<p>When you open Navigator, you&rsquo;ll see a dashboard with various applications and tools:</p>
<p><img alt="Anaconda Navigator Interface" loading="lazy" src="https://via.placeholder.com/800x450"></p>
<p>The main sections include:</p>
<ol>
<li><strong>Home</strong>: Launch applications like Jupyter Notebook, JupyterLab, etc.</li>
<li><strong>Environments</strong>: Create and manage conda environments</li>
<li><strong>Learning</strong>: Educational resources (tutorials, documentation)</li>
<li><strong>Community</strong>: Forums, bug reports, feature requests</li>
</ol>
<h3 id="creating-an-environment-for-financial-analysis">Creating an Environment for Financial Analysis</h3>
<p>Let&rsquo;s create a dedicated environment for financial analysis:</p>
<ol>
<li>Click on &ldquo;Environments&rdquo; in the left sidebar</li>
<li>Click the &ldquo;Create&rdquo; button at the bottom</li>
<li>Name it &ldquo;finance&rdquo; and select Python 3.9</li>
<li>Click &ldquo;Create&rdquo;</li>
<li>With your new environment selected, switch to &ldquo;Installed&rdquo; packages</li>
<li>Use the search box to find and install essential financial packages:
<ul>
<li>pandas</li>
<li>numpy</li>
<li>matplotlib</li>
<li>pandas-datareader</li>
<li>yfinance</li>
<li>scipy</li>
<li>statsmodels</li>
<li>scikit-learn</li>
</ul>
</li>
</ol>
<p>After selecting the packages, click &ldquo;Apply&rdquo; to install them in your environment.</p>
<h3 id="using-navigator-to-launch-applications">Using Navigator to Launch Applications</h3>
<p>Now that we have our environment set up:</p>
<ol>
<li>Go back to the &ldquo;Home&rdquo; tab</li>
<li>Make sure your &ldquo;finance&rdquo; environment is selected in the dropdown</li>
<li>Click &ldquo;Launch&rdquo; under Jupyter Notebook</li>
</ol>
<p>This will start Jupyter Notebook with access to all the packages we installed in our finance environment.</p>
<h2 id="jupyter-notebooks-interactive-financial-data-analysis">Jupyter Notebooks: Interactive Financial Data Analysis</h2>
<p>Jupyter Notebooks are interactive documents that combine code, outputs, visualizations, and explanatory text. They&rsquo;re perfect for financial analysis where you want to document your thought process alongside your calculations.</p>
<h3 id="installing-jupyter">Installing Jupyter</h3>
<p>If you&rsquo;re using Anaconda, Jupyter is already installed. Otherwise, you can install it with pip:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Using pip in a virtual environment</span>
</span></span><span style="display:flex;"><span>pip install notebook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using conda</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge notebook
</span></span></code></pre></div><h3 id="launching-jupyter-notebook">Launching Jupyter Notebook</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># From the command line</span>
</span></span><span style="display:flex;"><span>jupyter notebook
</span></span></code></pre></div><p>This will open a browser window showing the Jupyter dashboard.</p>
<h3 id="notebook-anatomy">Notebook Anatomy</h3>
<p>A Jupyter Notebook (<code>.ipynb</code> file) consists of cells, which can be:</p>
<ol>
<li><strong>Code cells</strong>: Contain executable Python code</li>
<li><strong>Markdown cells</strong>: Contain formatted text, equations, and explanations</li>
<li><strong>Raw cells</strong>: Contain unformatted text</li>
</ol>
<p>Let&rsquo;s create a simple notebook to analyze stock returns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># In a code cell</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> yfinance <span style="color:#66d9ef">as</span> yf
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set the output to display inline</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make the plots look nicer</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#39;fivethirtyeight&#39;</span>)
</span></span></code></pre></div><p>In a new code cell, let&rsquo;s download some financial data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Define a list of tech stocks</span>
</span></span><span style="display:flex;"><span>tech_stocks <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;AAPL&#39;</span>, <span style="color:#e6db74">&#39;MSFT&#39;</span>, <span style="color:#e6db74">&#39;GOOG&#39;</span>, <span style="color:#e6db74">&#39;AMZN&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set date range for analysis</span>
</span></span><span style="display:flex;"><span>start_date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;2020-01-01&#39;</span>
</span></span><span style="display:flex;"><span>end_date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Download the data</span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>download(tech_stocks, start<span style="color:#f92672">=</span>start_date, end<span style="color:#f92672">=</span>end_date)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Display the first few rows of Adjusted Close prices</span>
</span></span><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>Now let&rsquo;s add a Markdown cell to explain what we&rsquo;re doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span><span style="color:#75715e">## Tech Stock Performance Analysis
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>This analysis examines the performance of major tech stocks since 2020, including:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Apple (AAPL)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Microsoft (MSFT)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Google (GOOG)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Amazon (AMZN)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>We&#39;ll calculate returns and volatility to assess risk-adjusted performance.
</span></span></code></pre></div><p>Next, let&rsquo;s calculate returns and create a visualization:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate daily returns</span>
</span></span><span style="display:flex;"><span>returns <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]<span style="color:#f92672">.</span>pct_change()<span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot the cumulative returns</span>
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> returns)<span style="color:#f92672">.</span>cumprod()<span style="color:#f92672">.</span>plot(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Cumulative Returns of Tech Stocks (2020-Present)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Cumulative Return&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axhline(y<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.3</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>We can also calculate risk metrics:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate annualized volatility (standard deviation of returns * sqrt(252 trading days))</span>
</span></span><span style="display:flex;"><span>volatility <span style="color:#f92672">=</span> returns<span style="color:#f92672">.</span>std() <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>sqrt(<span style="color:#ae81ff">252</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate annualized returns</span>
</span></span><span style="display:flex;"><span>ann_returns <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> returns<span style="color:#f92672">.</span>mean())<span style="color:#f92672">**</span><span style="color:#ae81ff">252</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a risk-return DataFrame</span>
</span></span><span style="display:flex;"><span>risk_return <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Annualized Return&#39;</span>: ann_returns,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Annualized Volatility&#39;</span>: volatility,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Sharpe Ratio&#39;</span>: ann_returns <span style="color:#f92672">/</span> volatility  <span style="color:#75715e"># Simplified Sharpe ratio (assuming 0% risk-free rate)</span>
</span></span><span style="display:flex;"><span>})<span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;Sharpe Ratio&#39;</span>, ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>risk_return
</span></span></code></pre></div><h3 id="notebook-features-that-enhance-financial-analysis">Notebook Features That Enhance Financial Analysis</h3>
<h4 id="magic-commands">Magic Commands</h4>
<p>Jupyter notebooks support &ldquo;magic commands&rdquo; that enhance functionality:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Display all variables in memory</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>who
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Time the execution of a cell</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> [i<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1000000</span>)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run external shell commands</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!</span>pip list <span style="color:#f92672">|</span> grep pandas
</span></span></code></pre></div><h4 id="rich-display-for-financial-data">Rich Display for Financial Data</h4>
<p>Jupyter can display HTML, charts, tables, and even interactive visualizations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Interactive stock chart using Plotly</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.express <span style="color:#66d9ef">as</span> px
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fig <span style="color:#f92672">=</span> px<span style="color:#f92672">.</span>line(
</span></span><span style="display:flex;"><span>    returns<span style="color:#f92672">.</span>reset_index(), 
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Date&#39;</span>, 
</span></span><span style="display:flex;"><span>    y<span style="color:#f92672">=</span>tech_stocks,
</span></span><span style="display:flex;"><span>    title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Daily Returns of Tech Stocks&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>fig<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><h4 id="widgets-for-interactive-financial-models">Widgets for Interactive Financial Models</h4>
<p>Jupyter supports interactive widgets that let you build dynamic financial models:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> ipywidgets <span style="color:#f92672">import</span> interact, FloatSlider
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_loan_payment</span>(principal<span style="color:#f92672">=</span><span style="color:#ae81ff">100000</span>, interest_rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>, years<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate monthly mortgage payment.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    monthly_rate <span style="color:#f92672">=</span> interest_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    payments <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (monthly_rate <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate)<span style="color:#f92672">**</span>payments) <span style="color:#f92672">/</span> ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate)<span style="color:#f92672">**</span>payments <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly payment: $</span><span style="color:#e6db74">{</span>payment<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>interact(
</span></span><span style="display:flex;"><span>    calculate_loan_payment,
</span></span><span style="display:flex;"><span>    principal<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">50000</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">1000000</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">250000</span>),
</span></span><span style="display:flex;"><span>    interest_rate<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">0.10</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0025</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">0.045</span>),
</span></span><span style="display:flex;"><span>    years<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h3 id="sharing-and-exporting-notebooks">Sharing and Exporting Notebooks</h3>
<p>Once you&rsquo;ve completed your analysis, you can:</p>
<ol>
<li><strong>Share the <code>.ipynb</code> file</strong> with colleagues who have Jupyter installed</li>
<li><strong>Export to various formats</strong>:
<ul>
<li>HTML (with interactive elements)</li>
<li>PDF (for formal reports)</li>
<li>Python script (.py)</li>
<li>Markdown</li>
<li>Slides (for presentations)</li>
</ul>
</li>
</ol>
<p>To export:</p>
<ul>
<li>File → Download as → Select format</li>
<li>Or from the command line: <code>jupyter nbconvert --to pdf my_notebook.ipynb</code></li>
</ul>
<h3 id="using-notebooks-for-financial-reporting">Using Notebooks for Financial Reporting</h3>
<p>Notebooks are excellent for creating reproducible financial reports:</p>
<ol>
<li>Start with a markdown cell describing the purpose of the analysis</li>
<li>Import data from your financial systems</li>
<li>Perform calculations and create visualizations</li>
<li>Add markdown cells explaining your methodology and findings</li>
<li>Export to PDF or HTML for distribution</li>
</ol>
<p>For example, here&rsquo;s how you might start a monthly financial performance report:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span># Monthly Financial Performance Report
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Period: April 2023
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>This notebook analyzes the company&#39;s financial performance for April 2023 compared to budget and previous periods. It includes:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">1.</span> Revenue analysis by product line
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">2.</span> Cost structure breakdown
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">3.</span> Margin analysis
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">4.</span> Cash flow metrics
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">5.</span> Financial ratios
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Data sources:**</span> GL extract as of May 3, 2023
</span></span></code></pre></div><h2 id="jupyterlab-the-next-generation-notebook-interface">JupyterLab: The Next-Generation Notebook Interface</h2>
<p>While Jupyter Notebook is fantastic, JupyterLab is its more powerful successor with a modern interface.</p>
<h3 id="installing-jupyterlab">Installing JupyterLab</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Using pip</span>
</span></span><span style="display:flex;"><span>pip install jupyterlab
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using conda</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge jupyterlab
</span></span></code></pre></div><p>If you&rsquo;re using Anaconda, JupyterLab is already installed.</p>
<h3 id="launching-jupyterlab">Launching JupyterLab</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># From the command line</span>
</span></span><span style="display:flex;"><span>jupyter lab
</span></span></code></pre></div><h3 id="jupyterlab-features-for-financial-analysis">JupyterLab Features for Financial Analysis</h3>
<p>JupyterLab enhances the notebook experience with:</p>
<ol>
<li><strong>Multiple panels</strong>: View multiple notebooks, terminals, and files side-by-side</li>
<li><strong>File browser</strong>: Navigate your project files without leaving the interface</li>
<li><strong>Integrated terminal</strong>: Run shell commands directly in JupyterLab</li>
<li><strong>Table of Contents</strong>: Navigate long financial reports easily</li>
<li><strong>Extensions</strong>: Add functionality like Git integration, variable inspectors, etc.</li>
</ol>
<p>This layout is particularly useful for financial analysis where you might want to:</p>
<ul>
<li>Compare multiple financial models side-by-side</li>
<li>Keep reference data open while working on calculations</li>
<li>Run terminal commands to fetch latest financial data</li>
<li>Browse through different financial statements</li>
</ul>
<h2 id="google-colab-cloud-based-notebooks">Google Colab: Cloud-Based Notebooks</h2>
<p>If you want to work on notebooks without installing anything, Google Colab is a free, cloud-based alternative:</p>
<ul>
<li>Runs entirely in the browser</li>
<li>Provides free access to GPUs and TPUs for machine learning</li>
<li>Integrates with Google Drive for storage</li>
<li>Includes many pre-installed data science packages</li>
</ul>
<p>It&rsquo;s perfect for:</p>
<ul>
<li>Working on financial analysis when you&rsquo;re away from your main computer</li>
<li>Sharing interactive financial models with colleagues who don&rsquo;t have Python installed</li>
<li>Experimenting with machine learning for financial predictions</li>
</ul>
<p>Visit <a href="https://colab.research.google.com/">Google Colab</a> to get started.</p>
<h2 id="practical-example-building-an-interactive-financial-dashboard">Practical Example: Building an Interactive Financial Dashboard</h2>
<p>Let&rsquo;s bring everything together with a practical example. Here&rsquo;s an outline for creating an interactive financial dashboard in a Jupyter notebook:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.express <span style="color:#66d9ef">as</span> px
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.graph_objects <span style="color:#66d9ef">as</span> go
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ipywidgets <span style="color:#f92672">import</span> interact, widgets
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime, timedelta
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sample financial data (in practice, you&#39;d import from your financial systems)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_financial_data</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Generate dates for the past 12 months</span>
</span></span><span style="display:flex;"><span>    end_date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>    start_date <span style="color:#f92672">=</span> end_date <span style="color:#f92672">-</span> timedelta(days<span style="color:#f92672">=</span><span style="color:#ae81ff">365</span>)
</span></span><span style="display:flex;"><span>    dates <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>date_range(start<span style="color:#f92672">=</span>start_date, end<span style="color:#f92672">=</span>end_date, freq<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;M&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create sample department data with some randomness</span>
</span></span><span style="display:flex;"><span>    np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">42</span>)  <span style="color:#75715e"># For reproducibility</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Date&#39;</span>: dates,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Revenue&#39;</span>: <span style="color:#ae81ff">1000000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">50000</span>, len(dates)) <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">200000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;COGS&#39;</span>: <span style="color:#ae81ff">600000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30000</span>, len(dates)) <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Marketing&#39;</span>: <span style="color:#ae81ff">50000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">5000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;R&amp;D&#39;</span>: <span style="color:#ae81ff">75000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7500</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Admin&#39;</span>: <span style="color:#ae81ff">100000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;IT&#39;</span>: <span style="color:#ae81ff">40000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">4000</span>, len(dates))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(data)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate derived metrics</span>
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;COGS&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Marketing&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;R&amp;D&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;Admin&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;IT&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Gross_Margin&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">/</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Operating_Margin&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>] <span style="color:#f92672">/</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate our sample data</span>
</span></span><span style="display:flex;"><span>financial_data <span style="color:#f92672">=</span> generate_financial_data()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Display first few rows</span>
</span></span><span style="display:flex;"><span>financial_data<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>Now let&rsquo;s create interactive visualizations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a function for our dashboard</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">financial_dashboard</span>(metric):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>:
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Revenue&#39;</span>],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;COGS&#39;</span>] <span style="color:#f92672">+</span> financial_data[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Total Costs&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue vs. Total Costs&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Amount ($)&#39;</span>,
</span></span><span style="display:flex;"><span>            barmode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;group&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Profit Margins&#39;</span>:
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Scatter(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Gross_Margin&#39;</span>],
</span></span><span style="display:flex;"><span>            mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;lines+markers&#39;</span>,
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Gross Margin&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Scatter(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Operating_Margin&#39;</span>],
</span></span><span style="display:flex;"><span>            mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;lines+markers&#39;</span>,
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Operating Margin&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Profit Margins Over Time&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Margin (%)&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis<span style="color:#f92672">=</span>dict(tickformat<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.0%&#39;</span>)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Expense Breakdown&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a pie chart of the latest month&#39;s expenses</span>
</span></span><span style="display:flex;"><span>        latest <span style="color:#f92672">=</span> financial_data<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        labels <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;COGS&#39;</span>, <span style="color:#e6db74">&#39;Marketing&#39;</span>, <span style="color:#e6db74">&#39;R&amp;D&#39;</span>, <span style="color:#e6db74">&#39;Admin&#39;</span>, <span style="color:#e6db74">&#39;IT&#39;</span>]
</span></span><span style="display:flex;"><span>        values <span style="color:#f92672">=</span> [latest[<span style="color:#e6db74">&#39;COGS&#39;</span>], latest[<span style="color:#e6db74">&#39;Marketing&#39;</span>], latest[<span style="color:#e6db74">&#39;R&amp;D&#39;</span>], latest[<span style="color:#e6db74">&#39;Admin&#39;</span>], latest[<span style="color:#e6db74">&#39;IT&#39;</span>]]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure(data<span style="color:#f92672">=</span>[go<span style="color:#f92672">.</span>Pie(
</span></span><span style="display:flex;"><span>            labels<span style="color:#f92672">=</span>labels,
</span></span><span style="display:flex;"><span>            values<span style="color:#f92672">=</span>values,
</span></span><span style="display:flex;"><span>            hole<span style="color:#f92672">=</span><span style="color:#ae81ff">.3</span>
</span></span><span style="display:flex;"><span>        )])
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(title<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Expense Breakdown (Latest Month: </span><span style="color:#e6db74">{</span>latest[<span style="color:#e6db74">&#34;Date&#34;</span>]<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%b %Y&#34;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Trend Analysis&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Month-over-month growth rates</span>
</span></span><span style="display:flex;"><span>        growth_data <span style="color:#f92672">=</span> financial_data<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Revenue_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Revenue&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Gross_Profit_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Operating_Income_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Date&#39;</span>][<span style="color:#ae81ff">1</span>:],  <span style="color:#75715e"># Skip first month (no growth rate)</span>
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Revenue_Growth&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue Growth&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Date&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Operating_Income_Growth&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Operating Income Growth&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month-over-Month Growth Rates&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Growth Rate (%)&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    fig<span style="color:#f92672">.</span>show()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an interactive widget</span>
</span></span><span style="display:flex;"><span>interact(
</span></span><span style="display:flex;"><span>    financial_dashboard,
</span></span><span style="display:flex;"><span>    metric<span style="color:#f92672">=</span>widgets<span style="color:#f92672">.</span>Dropdown(
</span></span><span style="display:flex;"><span>        options<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>, <span style="color:#e6db74">&#39;Profit Margins&#39;</span>, <span style="color:#e6db74">&#39;Expense Breakdown&#39;</span>, <span style="color:#e6db74">&#39;Trend Analysis&#39;</span>],
</span></span><span style="display:flex;"><span>        value<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>,
</span></span><span style="display:flex;"><span>        description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Metric:&#39;</span>,
</span></span><span style="display:flex;"><span>        style<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;description_width&#39;</span>: <span style="color:#e6db74">&#39;initial&#39;</span>}
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>This interactive dashboard allows you to explore different financial metrics with a dropdown menu. In a real-world scenario, you would connect this to your actual financial data sources.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The Python ecosystem offers a rich set of tools for financial analysis, from package managers to interactive notebooks. Let&rsquo;s recap what we&rsquo;ve covered:</p>
<ol>
<li>
<p><strong>Package and environment management</strong>: pip, conda, and Anaconda each have their place in the Python ecosystem, with conda being particularly valuable for complex financial analysis packages.</p>
</li>
<li>
<p><strong>Anaconda Navigator</strong>: Provides a user-friendly interface for managing environments and launching applications, making it easier to set up environments for different financial analysis tasks.</p>
</li>
<li>
<p><strong>Jupyter Notebooks</strong>: Offer an interactive way to combine code, data, and narrative, perfect for financial reporting and exploratory analysis.</p>
</li>
<li>
<p><strong>JupyterLab</strong>: Enhances the notebook experience with a multi-panel interface ideal for complex financial analysis workflows.</p>
</li>
<li>
<p><strong>Interactive widgets</strong>: Allow you to build dynamic financial models and dashboards without web development knowledge.</p>
</li>
</ol>
<p>As you continue your Python journey, these tools will become essential parts of your financial analysis toolkit. They enable a more interactive, exploratory approach to financial data analysis that traditional spreadsheets simply can&rsquo;t match.</p>
<h2 id="next-steps">Next Steps</h2>
<ul>
<li>Install Anaconda and create a dedicated environment for financial analysis</li>
<li>Convert an existing financial spreadsheet to a Jupyter notebook</li>
<li>Create an interactive dashboard for a key financial metric you track</li>
<li>Explore the extensive ecosystem of financial packages available in Python</li>
</ul>
<p>In the next post, we&rsquo;ll dive deeper into NumPy, the foundation for numerical computing in Python, and see how it can speed up your financial calculations.</p>
]]></content:encoded></item><item><title>Part 6: Virtual Environments &amp; Packaging in Python</title><link>https://michaelbrunger.com/python-virtual-environments-packaging/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-virtual-environments-packaging/</guid><description>Discover how to create and manage virtual environments, install packages with pip, structure your own Python projects, and publish packages to PyPI with best practices.</description><content:encoded><![CDATA[<h1 id="virtual-environments--packaging-in-python">Virtual Environments &amp; Packaging in Python</h1>
<p>As your Python journey progresses and you start building more sophisticated financial tools, you&rsquo;ll inevitably need to use external libraries. This is where virtual environments and package management become crucial skills. In this post, I&rsquo;ll cover how to create isolated environments for your projects and manage dependencies effectively.</p>
<h2 id="why-virtual-environments-matter">Why Virtual Environments Matter</h2>
<p>Imagine this scenario: You&rsquo;re working on two different financial applications. One requires pandas version 1.3 for compatibility with other tools, while the other needs the latest pandas 2.0 for new features. Without virtual environments, you&rsquo;d be forced to choose one version for your entire system, potentially breaking one of your applications.</p>
<p>Virtual environments solve this problem by creating isolated Python installations for each project. Benefits include:</p>
<ul>
<li><strong>Dependency isolation:</strong> Each project can have its own versions of packages</li>
<li><strong>Reproducibility:</strong> Easily share environment specifications with colleagues</li>
<li><strong>Clean testing:</strong> Test in environments that match production settings</li>
<li><strong>Avoiding permission issues:</strong> Install packages without admin privileges</li>
</ul>
<h2 id="creating-and-managing-virtual-environments">Creating and Managing Virtual Environments</h2>
<p>Python comes with the <code>venv</code> module built-in, which is the recommended way to create virtual environments.</p>
<h3 id="creating-a-virtual-environment-on-windows">Creating a Virtual Environment on Windows</h3>
<p>Open Command Prompt and navigate to your project directory:</p>
<pre tabindex="0"><code>cd C:\Users\YourName\Documents\financial-analysis-project
</code></pre><p>Create a new virtual environment:</p>
<pre tabindex="0"><code>python -m venv env
</code></pre><p>This creates a directory named <code>env</code> containing a copy of the Python interpreter and the standard library.</p>
<h3 id="activating-the-virtual-environment">Activating the Virtual Environment</h3>
<p>On Windows:</p>
<pre tabindex="0"><code>env\Scripts\activate
</code></pre><p>You&rsquo;ll notice your command prompt changes to show the active environment:</p>
<pre tabindex="0"><code>(env) C:\Users\YourName\Documents\financial-analysis-project&gt;
</code></pre><p>Now any Python commands will use this isolated environment.</p>
<h3 id="notes-for-macoslinux">Notes for macOS/Linux</h3>
<p>The process is similar on macOS and Linux, with slight differences:</p>
<ul>
<li>Create: <code>python3 -m venv env</code></li>
<li>Activate: <code>source env/bin/activate</code></li>
</ul>
<h3 id="deactivating-the-virtual-environment">Deactivating the Virtual Environment</h3>
<p>When you&rsquo;re done working on your project:</p>
<pre tabindex="0"><code>deactivate
</code></pre><p>Your prompt will return to normal, and Python commands will use the system interpreter again.</p>
<h2 id="managing-packages-with-pip">Managing Packages with pip</h2>
<p><code>pip</code> is Python&rsquo;s package installer, and it&rsquo;s the primary tool for adding external libraries to your environments.</p>
<h3 id="installing-packages">Installing Packages</h3>
<p>Once your virtual environment is activated, install packages with:</p>
<pre tabindex="0"><code>pip install package-name
</code></pre><p>For example, to install key financial packages:</p>
<pre tabindex="0"><code>pip install pandas numpy matplotlib openpyxl xlrd
</code></pre><p>You can also specify exact versions:</p>
<pre tabindex="0"><code>pip install pandas==1.5.3
</code></pre><p>Or version ranges:</p>
<pre tabindex="0"><code>pip install pandas&gt;=1.4.0,&lt;2.0.0
</code></pre><h3 id="listing-installed-packages">Listing Installed Packages</h3>
<p>To see what&rsquo;s installed in your environment:</p>
<pre tabindex="0"><code>pip list
</code></pre><p>Output example:</p>
<pre tabindex="0"><code>Package         Version
--------------- -------
matplotlib      3.7.1
numpy           1.24.3
openpyxl        3.1.2
pandas          1.5.3
pip             23.1.2
python-dateutil 2.8.2
pytz            2023.3
setuptools      65.6.3
six             1.16.0
tzdata          2023.3
xlrd            2.0.1
</code></pre><h3 id="freezing-requirements">Freezing Requirements</h3>
<p>When you want to share your project, it&rsquo;s important to specify exactly which packages and versions it needs. The <code>freeze</code> command creates a requirements file:</p>
<pre tabindex="0"><code>pip freeze &gt; requirements.txt
</code></pre><p>This generates a text file with all installed packages and their versions:</p>
<pre tabindex="0"><code># requirements.txt contents
matplotlib==3.7.1
numpy==1.24.3
openpyxl==3.1.2
pandas==1.5.3
python-dateutil==2.8.2
pytz==2023.3
six==1.16.0
tzdata==2023.3
xlrd==2.0.1
</code></pre><h3 id="installing-from-requirements">Installing from Requirements</h3>
<p>When someone else (or you on a different machine) wants to recreate your environment:</p>
<pre tabindex="0"><code>pip install -r requirements.txt
</code></pre><p>This is essential for collaborative financial projects where everyone needs the same libraries and versions.</p>
<h2 id="practical-example-setting-up-a-financial-analysis-environment">Practical Example: Setting Up a Financial Analysis Environment</h2>
<p>Let&rsquo;s walk through creating a virtual environment for a financial analysis project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create project directory</span>
</span></span><span style="display:flex;"><span>mkdir financial_analysis
</span></span><span style="display:flex;"><span>cd financial_analysis
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create and activate virtual environment</span>
</span></span><span style="display:flex;"><span>python -m venv env
</span></span><span style="display:flex;"><span>env<span style="color:#ae81ff">\S</span>cripts<span style="color:#ae81ff">\a</span>ctivate
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install required packages</span>
</span></span><span style="display:flex;"><span>pip install pandas numpy matplotlib openpyxl xlsxwriter jupyter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Verify installations</span>
</span></span><span style="display:flex;"><span>pip list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create requirements.txt</span>
</span></span><span style="display:flex;"><span>pip freeze &gt; requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a marker file for your project</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#75715e"># Financial Analysis Project &gt; README.md</span>
</span></span></code></pre></div><h2 id="basic-package-structure">Basic Package Structure</h2>
<p>As your financial tools grow more complex, you might want to create your own Python packages that you can reuse across projects or share with colleagues.</p>
<h3 id="project-structure">Project Structure</h3>
<p>A typical Python package structure looks like this:</p>
<pre tabindex="0"><code>financial_tools/
│
├── pyproject.toml      # Modern project configuration
├── README.md           # Documentation
├── LICENSE             # License information
│
└── src/                # Source code directory
    └── financial_tools/  # Actual package
        ├── __init__.py   # Makes it a package
        ├── analysis.py   # Analysis module
        ├── reporting.py  # Reporting module
        └── utils.py      # Utility functions
</code></pre><h3 id="the-__init__py-file">The <code>__init__.py</code> File</h3>
<p>This file marks a directory as a Python package and can be used to define what gets imported when someone uses your package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># src/financial_tools/__init__.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Version information</span>
</span></span><span style="display:flex;"><span>__version__ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0.1.0&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Import commonly used functions for easier access</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .analysis <span style="color:#f92672">import</span> calculate_roi, calculate_npv
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .reporting <span style="color:#f92672">import</span> generate_monthly_report
</span></span></code></pre></div><h3 id="setting-up-a-package-with-pyprojecttoml">Setting Up a Package with <code>pyproject.toml</code></h3>
<p>Modern Python packaging uses <code>pyproject.toml</code> for configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">build-system</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires</span> = [<span style="color:#e6db74">&#34;setuptools&gt;=42&#34;</span>, <span style="color:#e6db74">&#34;wheel&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build-backend</span> = <span style="color:#e6db74">&#34;setuptools.build_meta&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;financial_tools&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">version</span> = <span style="color:#e6db74">&#34;0.1.0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">description</span> = <span style="color:#e6db74">&#34;Tools for financial analysis and reporting&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">readme</span> = <span style="color:#e6db74">&#34;README.md&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">authors</span> = [
</span></span><span style="display:flex;"><span>    {<span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Your Name&#34;</span>, <span style="color:#a6e22e">email</span> = <span style="color:#e6db74">&#34;your.email@example.com&#34;</span>}
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">license</span> = {<span style="color:#a6e22e">text</span> = <span style="color:#e6db74">&#34;MIT&#34;</span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">classifiers</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dependencies</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pandas&gt;=1.3.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;numpy&gt;=1.20.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;matplotlib&gt;=3.4.0&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires-python</span> = <span style="color:#e6db74">&#34;&gt;=3.8&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>.<span style="color:#a6e22e">urls</span>]
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;Homepage&#34;</span> = <span style="color:#e6db74">&#34;https://github.com/yourusername/financial_tools&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;Bug Tracker&#34;</span> = <span style="color:#e6db74">&#34;https://github.com/yourusername/financial_tools/issues&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>.<span style="color:#a6e22e">optional-dependencies</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dev</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pytest&gt;=6.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;black&gt;=21.5b2&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;flake8&gt;=3.9&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">excel</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;openpyxl&gt;=3.0.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;xlsxwriter&gt;=1.4.0&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><h3 id="building-and-installing-your-package">Building and Installing Your Package</h3>
<p>With your package structure set up, you can install it in development mode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install -e .
</span></span></code></pre></div><p>This makes the package available but still editable in its original location.</p>
<h2 id="publishing-to-pypi">Publishing to PyPI</h2>
<p>When your financial package is ready to share with the world, you can publish it to the Python Package Index (PyPI).</p>
<h3 id="build-distribution-packages">Build Distribution Packages</h3>
<p>First, make sure you have the build tools:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install build twine
</span></span></code></pre></div><p>Then create distribution packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python -m build
</span></span></code></pre></div><p>This will create a directory called <code>dist</code> with distribution files.</p>
<h3 id="upload-to-pypi">Upload to PyPI</h3>
<p>Use <code>twine</code> to upload your package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>twine upload dist/*
</span></span></code></pre></div><p>You&rsquo;ll need to create an account on PyPI before uploading.</p>
<h3 id="versioning-best-practices">Versioning Best Practices</h3>
<p>For financial software where accuracy is critical, proper versioning is essential:</p>
<ol>
<li>
<p><strong>Use Semantic Versioning:</strong> MAJOR.MINOR.PATCH</p>
<ul>
<li>MAJOR: Incompatible API changes</li>
<li>MINOR: New features, backward-compatible</li>
<li>PATCH: Bug fixes, backward-compatible</li>
</ul>
</li>
<li>
<p><strong>Document Changes:</strong> Keep a CHANGELOG.md file</p>
</li>
<li>
<p><strong>Version Bumping:</strong> Update version in one place only (<code>pyproject.toml</code>)</p>
</li>
<li>
<p><strong>Git Tags:</strong> Tag releases in your version control system</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git tag -a v0.1.0 -m <span style="color:#e6db74">&#34;Initial release&#34;</span>
</span></span><span style="display:flex;"><span>git push origin v0.1.0
</span></span></code></pre></div><h2 id="real-world-example-financial-toolkit-package">Real-World Example: Financial Toolkit Package</h2>
<p>Let&rsquo;s create a minimal example of what a financial analysis package might look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># src/financial_tools/analysis.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roi</span>(gain, cost):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Return on Investment (ROI)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        gain: The profit or gain from the investment
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cost: The cost of the investment
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ROI as a decimal (e.g., 0.15 for 15%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (gain <span style="color:#f92672">-</span> cost) <span style="color:#f92672">/</span> cost
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_npv</span>(cash_flows, discount_rate):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Net Present Value
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows: List of cash flows where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        discount_rate: The discount rate as a decimal (e.g., 0.1 for 10%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        The Net Present Value of the cash flows
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    npv <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, cf <span style="color:#f92672">in</span> enumerate(cash_flows):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">+=</span> cf <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> discount_rate) <span style="color:#f92672">**</span> i
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> npv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_irr</span>(cash_flows, iterations<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>, guess<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Internal Rate of Return using iterative approach
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows: List of cash flows where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        iterations: Maximum number of iterations to perform
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        guess: Initial guess for the IRR
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Estimated IRR as a decimal
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    rate <span style="color:#f92672">=</span> guess
</span></span><span style="display:flex;"><span>    step <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.05</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(iterations):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">=</span> calculate_npv(cash_flows, rate)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> abs(npv) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.0001</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># NPV is very close to zero, we found the IRR</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> rate
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> npv <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># NPV is positive, increase the rate</span>
</span></span><span style="display:flex;"><span>            rate <span style="color:#f92672">+=</span> step
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># NPV is negative, decrease the rate</span>
</span></span><span style="display:flex;"><span>            rate <span style="color:#f92672">-=</span> step
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Reduce step size to improve accuracy</span>
</span></span><span style="display:flex;"><span>        step <span style="color:#f92672">/=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Return best approximation after iterations</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> rate
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># src/financial_tools/reporting.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_summary_report</span>(data, title<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Financial Summary&#34;</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Generate a simple text-based financial report
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        data: Dictionary of financial metrics
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        title: Report title
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Formatted report as a string
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    now <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create header</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>title<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;=&#39;</span> <span style="color:#f92672">*</span> len(title)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Generated: </span><span style="color:#e6db74">{</span>now<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %H:%M&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add metrics</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> key, value <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Format numbers nicely</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isinstance(value, (int, float)):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> abs(value) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1000</span>:
</span></span><span style="display:flex;"><span>                formatted_value <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">,.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                formatted_value <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            formatted_value <span style="color:#f92672">=</span> str(value)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        report <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>key<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>formatted_value<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> report
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">format_as_percentage</span>(value, decimal_places<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Format a decimal as a percentage string&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>value <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.</span><span style="color:#e6db74">{</span>decimal_places<span style="color:#e6db74">}</span><span style="color:#e6db74">f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>
</span></span></code></pre></div><h3 id="using-the-package">Using the Package</h3>
<p>Once installed, users could easily import and use your financial toolkit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_tools.analysis <span style="color:#f92672">import</span> calculate_roi, calculate_npv
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_tools.reporting <span style="color:#f92672">import</span> generate_summary_report, format_as_percentage
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate investment metrics</span>
</span></span><span style="display:flex;"><span>investment_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">50000</span>
</span></span><span style="display:flex;"><span>annual_returns <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">50000</span>, <span style="color:#ae81ff">12000</span>, <span style="color:#ae81ff">15000</span>, <span style="color:#ae81ff">18000</span>, <span style="color:#ae81ff">20000</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> calculate_roi(sum(annual_returns) <span style="color:#f92672">+</span> investment_cost, investment_cost)
</span></span><span style="display:flex;"><span>npv <span style="color:#f92672">=</span> calculate_npv(annual_returns, <span style="color:#ae81ff">0.08</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate report</span>
</span></span><span style="display:flex;"><span>report_data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Investment Amount&#34;</span>: investment_cost,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Total Returns&#34;</span>: sum(annual_returns[<span style="color:#ae81ff">1</span>:]),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;ROI&#34;</span>: format_as_percentage(roi),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;NPV (8%)&#34;</span>: npv,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Break-even&#34;</span>: <span style="color:#e6db74">&#34;Year 3&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>report <span style="color:#f92672">=</span> generate_summary_report(report_data, <span style="color:#e6db74">&#34;Investment Analysis&#34;</span>)
</span></span><span style="display:flex;"><span>print(report)
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Virtual environments and proper packaging are essential skills for any Python developer, especially when working on financial applications where consistency and reproducibility are critical. By mastering these concepts, you&rsquo;ll ensure your projects are well-organisd, shareable, and isolated from potential dependency conflicts.</p>
<p>In the next post, we&rsquo;ll dive into code quality and collaboration tools that will help you write cleaner, more maintainable financial applications and work effectively with others.</p>
<p><strong>Practice Exercise:</strong> Create a virtual environment for a financial dashboard project. Install pandas, matplotlib, and Flask. Create a requirements.txt file and share it with a colleague (or another computer) to test the reproducibility of your environment.</p>
]]></content:encoded></item></channel></rss>