<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jupyter Notebooks on Michael Brunger</title><link>https://michaelbrunger.com/tags/jupyter-notebooks/</link><description>Recent content in Jupyter Notebooks on Michael Brunger</description><image><title>Michael Brunger</title><url>https://michaelbrunger.com/site-feature-image.jpg</url><link>https://michaelbrunger.com/site-feature-image.jpg</link></image><generator>Hugo -- 0.146.7</generator><language>en-GB</language><lastBuildDate>Mon, 12 May 2025 11:13:25 +0100</lastBuildDate><atom:link href="https://michaelbrunger.com/tags/jupyter-notebooks/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 10: The Python Ecosystem &amp; Interactive Data Workflows</title><link>https://michaelbrunger.com/python-ecosystem-interactive-data/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-ecosystem-interactive-data/</guid><description>Compare package managers (pip vs. conda), explore Anaconda Navigator, and learn to use Jupyter Notebooks for interactive data analysis and visualization.</description><content:encoded><![CDATA[<h1 id="the-python-ecosystem--interactive-data-workflows">The Python Ecosystem &amp; Interactive Data Workflows</h1>
<p>As a finance professional diving deeper into Python, I&rsquo;ve found that understanding the broader ecosystem of tools is just as important as learning the language itself. In this post, we&rsquo;ll explore the different ways to manage Python packages and environments, and dive into interactive data workflows that can transform how you work with financial data.</p>
<h2 id="package-vs-environment-managers-pip-conda-and-anaconda">Package vs. Environment Managers: pip, conda, and Anaconda</h2>
<p>When I first started with Python, I was confused by the different tools available for installing packages and managing environments. Let&rsquo;s clarify these concepts.</p>
<h3 id="pip-the-standard-package-manager">pip: The Standard Package Manager</h3>
<p><code>pip</code> is Python&rsquo;s default package manager - it&rsquo;s what we&rsquo;ve been using in previous posts. It comes bundled with Python and is straightforward for basic needs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Install a package with pip</span>
</span></span><span style="display:flex;"><span>pip install pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a specific version</span>
</span></span><span style="display:flex;"><span>pip install pandas<span style="color:#f92672">==</span>1.4.2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Upgrade a package</span>
</span></span><span style="display:flex;"><span>pip install --upgrade pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List installed packages</span>
</span></span><span style="display:flex;"><span>pip list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate a requirements file</span>
</span></span><span style="display:flex;"><span>pip freeze &gt; requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install from requirements file</span>
</span></span><span style="display:flex;"><span>pip install -r requirements.txt
</span></span></code></pre></div><p><strong>Pros of pip:</strong></p>
<ul>
<li>Simple and lightweight</li>
<li>Built-in with Python</li>
<li>Works with virtual environments (venv)</li>
<li>Perfect for most Python projects</li>
</ul>
<p><strong>Cons of pip:</strong></p>
<ul>
<li>Doesn&rsquo;t manage non-Python dependencies well</li>
<li>Can&rsquo;t create standalone environments (relies on venv)</li>
<li>Not ideal for complex data science setups with conflicting dependencies</li>
</ul>
<h3 id="conda-the-environment-and-package-manager">conda: The Environment and Package Manager</h3>
<p><code>conda</code> is both a package manager and an environment manager. Unlike pip, conda isn&rsquo;t specific to Python - it can manage packages for any language.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a new environment</span>
</span></span><span style="display:flex;"><span>conda create --name finance_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Activate the environment</span>
</span></span><span style="display:flex;"><span>conda activate finance_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a package</span>
</span></span><span style="display:flex;"><span>conda install pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a package from a specific channel</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge plotly
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List installed packages</span>
</span></span><span style="display:flex;"><span>conda list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export environment</span>
</span></span><span style="display:flex;"><span>conda env export &gt; environment.yml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create environment from file</span>
</span></span><span style="display:flex;"><span>conda env create -f environment.yml
</span></span></code></pre></div><p><strong>Pros of conda:</strong></p>
<ul>
<li>Manages both Python and non-Python dependencies</li>
<li>Creates isolated environments</li>
<li>Better dependency resolution than pip</li>
<li>Great for data science packages with complex dependencies</li>
<li>Cross-platform compatibility</li>
</ul>
<p><strong>Cons of conda:</strong></p>
<ul>
<li>More complex than pip</li>
<li>Can be slower for simple installations</li>
<li>Larger footprint on your system</li>
</ul>
<h3 id="anaconda-the-all-in-one-distribution">Anaconda: The All-in-One Distribution</h3>
<p>Anaconda is a distribution of Python that comes bundled with conda and a collection of 250+ pre-installed data science packages. Think of it as the &ldquo;deluxe edition&rdquo; of Python.</p>
<p><strong>Pros of Anaconda:</strong></p>
<ul>
<li>Everything installed in one go</li>
<li>Includes widely-used data science packages</li>
<li>Comes with Anaconda Navigator (GUI)</li>
<li>Includes many finance-relevant packages pre-installed</li>
<li>Great for beginners who want everything set up</li>
</ul>
<p><strong>Cons of Anaconda:</strong></p>
<ul>
<li>Very large download (several GB)</li>
<li>Takes up a lot of disk space</li>
<li>Includes many packages you might never use</li>
<li>Can be overkill for simple projects</li>
</ul>
<h3 id="miniconda-the-lightweight-alternative">Miniconda: The Lightweight Alternative</h3>
<p>If you like conda but don&rsquo;t want all the extra packages, Miniconda gives you just Python and conda. You can then install only what you need.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Install specific packages as needed</span>
</span></span><span style="display:flex;"><span>conda create --name finance_env python<span style="color:#f92672">=</span>3.10 pandas numpy matplotlib
</span></span></code></pre></div><h3 id="when-to-choose-each-option">When to Choose Each Option</h3>
<p>Here&rsquo;s a simple decision matrix I use:</p>
<ul>
<li>
<p><strong>Use pip + venv when:</strong></p>
<ul>
<li>You&rsquo;re building a standard Python application</li>
<li>Your project has simple dependencies</li>
<li>You&rsquo;re developing a package for others to use</li>
<li>You&rsquo;re following my previous posts where we used venv</li>
<li>You want to keep things lightweight</li>
</ul>
</li>
<li>
<p><strong>Use conda when:</strong></p>
<ul>
<li>You need complex scientific packages (NumPy, SciPy, etc.)</li>
<li>You work with packages that have non-Python dependencies</li>
<li>You switch between different projects with conflicting dependencies</li>
<li>You need consistent environments across different operating systems</li>
</ul>
</li>
<li>
<p><strong>Use Anaconda when:</strong></p>
<ul>
<li>You&rsquo;re just getting started with data science</li>
<li>You want a hassle-free setup with all major packages included</li>
<li>You prefer using a GUI (Anaconda Navigator)</li>
<li>Disk space isn&rsquo;t a concern</li>
<li>You&rsquo;re setting up a training environment</li>
</ul>
</li>
</ul>
<p>For my financial analysis work, I primarily use conda environments because many financial modeling packages have complex dependencies, and I often need to switch between different project environments.</p>
<h2 id="installing-and-exploring-anaconda-navigator">Installing and Exploring Anaconda Navigator</h2>
<p>Let&rsquo;s explore Anaconda Navigator, which provides a graphical interface to manage environments and packages.</p>
<h3 id="installation">Installation</h3>
<ol>
<li>Download Anaconda from <a href="https://www.anaconda.com/products/distribution">the official site</a></li>
<li>Run the installer:
<ul>
<li>Windows: Double-click the <code>.exe</code> file and follow the wizard</li>
<li>macOS: Double-click the <code>.pkg</code> file and follow the prompts</li>
<li>Linux: Run <code>bash Anaconda-latest-Linux-x86_64.sh</code> in terminal</li>
</ul>
</li>
</ol>
<p>During installation:</p>
<ul>
<li>Install for &ldquo;Just Me&rdquo; (recommended)</li>
<li>Accept the default location (or choose another)</li>
<li><strong>Important choice</strong>: Whether to add Anaconda to your PATH environment variable
<ul>
<li>I recommend selecting &ldquo;Yes&rdquo; for convenience, though the installer suggests &ldquo;No&rdquo;</li>
</ul>
</li>
</ul>
<h3 id="launching-anaconda-navigator">Launching Anaconda Navigator</h3>
<ul>
<li>Windows: Start menu → Anaconda3 → Anaconda Navigator</li>
<li>macOS: Launchpad → Anaconda Navigator</li>
<li>Linux: Terminal → <code>anaconda-navigator</code></li>
</ul>
<h3 id="navigator-interface-overview">Navigator Interface Overview</h3>
<p>When you open Navigator, you&rsquo;ll see a dashboard with various applications and tools:</p>
<p><img alt="Anaconda Navigator Interface" loading="lazy" src="https://via.placeholder.com/800x450"></p>
<p>The main sections include:</p>
<ol>
<li><strong>Home</strong>: Launch applications like Jupyter Notebook, JupyterLab, etc.</li>
<li><strong>Environments</strong>: Create and manage conda environments</li>
<li><strong>Learning</strong>: Educational resources (tutorials, documentation)</li>
<li><strong>Community</strong>: Forums, bug reports, feature requests</li>
</ol>
<h3 id="creating-an-environment-for-financial-analysis">Creating an Environment for Financial Analysis</h3>
<p>Let&rsquo;s create a dedicated environment for financial analysis:</p>
<ol>
<li>Click on &ldquo;Environments&rdquo; in the left sidebar</li>
<li>Click the &ldquo;Create&rdquo; button at the bottom</li>
<li>Name it &ldquo;finance&rdquo; and select Python 3.9</li>
<li>Click &ldquo;Create&rdquo;</li>
<li>With your new environment selected, switch to &ldquo;Installed&rdquo; packages</li>
<li>Use the search box to find and install essential financial packages:
<ul>
<li>pandas</li>
<li>numpy</li>
<li>matplotlib</li>
<li>pandas-datareader</li>
<li>yfinance</li>
<li>scipy</li>
<li>statsmodels</li>
<li>scikit-learn</li>
</ul>
</li>
</ol>
<p>After selecting the packages, click &ldquo;Apply&rdquo; to install them in your environment.</p>
<h3 id="using-navigator-to-launch-applications">Using Navigator to Launch Applications</h3>
<p>Now that we have our environment set up:</p>
<ol>
<li>Go back to the &ldquo;Home&rdquo; tab</li>
<li>Make sure your &ldquo;finance&rdquo; environment is selected in the dropdown</li>
<li>Click &ldquo;Launch&rdquo; under Jupyter Notebook</li>
</ol>
<p>This will start Jupyter Notebook with access to all the packages we installed in our finance environment.</p>
<h2 id="jupyter-notebooks-interactive-financial-data-analysis">Jupyter Notebooks: Interactive Financial Data Analysis</h2>
<p>Jupyter Notebooks are interactive documents that combine code, outputs, visualizations, and explanatory text. They&rsquo;re perfect for financial analysis where you want to document your thought process alongside your calculations.</p>
<h3 id="installing-jupyter">Installing Jupyter</h3>
<p>If you&rsquo;re using Anaconda, Jupyter is already installed. Otherwise, you can install it with pip:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Using pip in a virtual environment</span>
</span></span><span style="display:flex;"><span>pip install notebook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using conda</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge notebook
</span></span></code></pre></div><h3 id="launching-jupyter-notebook">Launching Jupyter Notebook</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># From the command line</span>
</span></span><span style="display:flex;"><span>jupyter notebook
</span></span></code></pre></div><p>This will open a browser window showing the Jupyter dashboard.</p>
<h3 id="notebook-anatomy">Notebook Anatomy</h3>
<p>A Jupyter Notebook (<code>.ipynb</code> file) consists of cells, which can be:</p>
<ol>
<li><strong>Code cells</strong>: Contain executable Python code</li>
<li><strong>Markdown cells</strong>: Contain formatted text, equations, and explanations</li>
<li><strong>Raw cells</strong>: Contain unformatted text</li>
</ol>
<p>Let&rsquo;s create a simple notebook to analyze stock returns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># In a code cell</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> yfinance <span style="color:#66d9ef">as</span> yf
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set the output to display inline</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make the plots look nicer</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#39;fivethirtyeight&#39;</span>)
</span></span></code></pre></div><p>In a new code cell, let&rsquo;s download some financial data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Define a list of tech stocks</span>
</span></span><span style="display:flex;"><span>tech_stocks <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;AAPL&#39;</span>, <span style="color:#e6db74">&#39;MSFT&#39;</span>, <span style="color:#e6db74">&#39;GOOG&#39;</span>, <span style="color:#e6db74">&#39;AMZN&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set date range for analysis</span>
</span></span><span style="display:flex;"><span>start_date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;2020-01-01&#39;</span>
</span></span><span style="display:flex;"><span>end_date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Download the data</span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>download(tech_stocks, start<span style="color:#f92672">=</span>start_date, end<span style="color:#f92672">=</span>end_date)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Display the first few rows of Adjusted Close prices</span>
</span></span><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>Now let&rsquo;s add a Markdown cell to explain what we&rsquo;re doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span><span style="color:#75715e">## Tech Stock Performance Analysis
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>This analysis examines the performance of major tech stocks since 2020, including:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Apple (AAPL)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Microsoft (MSFT)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Google (GOOG)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Amazon (AMZN)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>We&#39;ll calculate returns and volatility to assess risk-adjusted performance.
</span></span></code></pre></div><p>Next, let&rsquo;s calculate returns and create a visualization:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate daily returns</span>
</span></span><span style="display:flex;"><span>returns <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]<span style="color:#f92672">.</span>pct_change()<span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot the cumulative returns</span>
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> returns)<span style="color:#f92672">.</span>cumprod()<span style="color:#f92672">.</span>plot(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Cumulative Returns of Tech Stocks (2020-Present)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Cumulative Return&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axhline(y<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.3</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>We can also calculate risk metrics:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate annualized volatility (standard deviation of returns * sqrt(252 trading days))</span>
</span></span><span style="display:flex;"><span>volatility <span style="color:#f92672">=</span> returns<span style="color:#f92672">.</span>std() <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>sqrt(<span style="color:#ae81ff">252</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate annualized returns</span>
</span></span><span style="display:flex;"><span>ann_returns <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> returns<span style="color:#f92672">.</span>mean())<span style="color:#f92672">**</span><span style="color:#ae81ff">252</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a risk-return DataFrame</span>
</span></span><span style="display:flex;"><span>risk_return <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Annualized Return&#39;</span>: ann_returns,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Annualized Volatility&#39;</span>: volatility,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Sharpe Ratio&#39;</span>: ann_returns <span style="color:#f92672">/</span> volatility  <span style="color:#75715e"># Simplified Sharpe ratio (assuming 0% risk-free rate)</span>
</span></span><span style="display:flex;"><span>})<span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;Sharpe Ratio&#39;</span>, ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>risk_return
</span></span></code></pre></div><h3 id="notebook-features-that-enhance-financial-analysis">Notebook Features That Enhance Financial Analysis</h3>
<h4 id="magic-commands">Magic Commands</h4>
<p>Jupyter notebooks support &ldquo;magic commands&rdquo; that enhance functionality:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Display all variables in memory</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>who
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Time the execution of a cell</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> [i<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1000000</span>)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run external shell commands</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!</span>pip list <span style="color:#f92672">|</span> grep pandas
</span></span></code></pre></div><h4 id="rich-display-for-financial-data">Rich Display for Financial Data</h4>
<p>Jupyter can display HTML, charts, tables, and even interactive visualizations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Interactive stock chart using Plotly</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.express <span style="color:#66d9ef">as</span> px
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fig <span style="color:#f92672">=</span> px<span style="color:#f92672">.</span>line(
</span></span><span style="display:flex;"><span>    returns<span style="color:#f92672">.</span>reset_index(), 
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Date&#39;</span>, 
</span></span><span style="display:flex;"><span>    y<span style="color:#f92672">=</span>tech_stocks,
</span></span><span style="display:flex;"><span>    title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Daily Returns of Tech Stocks&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>fig<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><h4 id="widgets-for-interactive-financial-models">Widgets for Interactive Financial Models</h4>
<p>Jupyter supports interactive widgets that let you build dynamic financial models:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> ipywidgets <span style="color:#f92672">import</span> interact, FloatSlider
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_loan_payment</span>(principal<span style="color:#f92672">=</span><span style="color:#ae81ff">100000</span>, interest_rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>, years<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate monthly mortgage payment.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    monthly_rate <span style="color:#f92672">=</span> interest_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    payments <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (monthly_rate <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate)<span style="color:#f92672">**</span>payments) <span style="color:#f92672">/</span> ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate)<span style="color:#f92672">**</span>payments <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly payment: $</span><span style="color:#e6db74">{</span>payment<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>interact(
</span></span><span style="display:flex;"><span>    calculate_loan_payment,
</span></span><span style="display:flex;"><span>    principal<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">50000</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">1000000</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">250000</span>),
</span></span><span style="display:flex;"><span>    interest_rate<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">0.10</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0025</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">0.045</span>),
</span></span><span style="display:flex;"><span>    years<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h3 id="sharing-and-exporting-notebooks">Sharing and Exporting Notebooks</h3>
<p>Once you&rsquo;ve completed your analysis, you can:</p>
<ol>
<li><strong>Share the <code>.ipynb</code> file</strong> with colleagues who have Jupyter installed</li>
<li><strong>Export to various formats</strong>:
<ul>
<li>HTML (with interactive elements)</li>
<li>PDF (for formal reports)</li>
<li>Python script (.py)</li>
<li>Markdown</li>
<li>Slides (for presentations)</li>
</ul>
</li>
</ol>
<p>To export:</p>
<ul>
<li>File → Download as → Select format</li>
<li>Or from the command line: <code>jupyter nbconvert --to pdf my_notebook.ipynb</code></li>
</ul>
<h3 id="using-notebooks-for-financial-reporting">Using Notebooks for Financial Reporting</h3>
<p>Notebooks are excellent for creating reproducible financial reports:</p>
<ol>
<li>Start with a markdown cell describing the purpose of the analysis</li>
<li>Import data from your financial systems</li>
<li>Perform calculations and create visualizations</li>
<li>Add markdown cells explaining your methodology and findings</li>
<li>Export to PDF or HTML for distribution</li>
</ol>
<p>For example, here&rsquo;s how you might start a monthly financial performance report:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span># Monthly Financial Performance Report
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Period: April 2023
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>This notebook analyzes the company&#39;s financial performance for April 2023 compared to budget and previous periods. It includes:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">1.</span> Revenue analysis by product line
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">2.</span> Cost structure breakdown
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">3.</span> Margin analysis
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">4.</span> Cash flow metrics
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">5.</span> Financial ratios
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Data sources:**</span> GL extract as of May 3, 2023
</span></span></code></pre></div><h2 id="jupyterlab-the-next-generation-notebook-interface">JupyterLab: The Next-Generation Notebook Interface</h2>
<p>While Jupyter Notebook is fantastic, JupyterLab is its more powerful successor with a modern interface.</p>
<h3 id="installing-jupyterlab">Installing JupyterLab</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Using pip</span>
</span></span><span style="display:flex;"><span>pip install jupyterlab
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using conda</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge jupyterlab
</span></span></code></pre></div><p>If you&rsquo;re using Anaconda, JupyterLab is already installed.</p>
<h3 id="launching-jupyterlab">Launching JupyterLab</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># From the command line</span>
</span></span><span style="display:flex;"><span>jupyter lab
</span></span></code></pre></div><h3 id="jupyterlab-features-for-financial-analysis">JupyterLab Features for Financial Analysis</h3>
<p>JupyterLab enhances the notebook experience with:</p>
<ol>
<li><strong>Multiple panels</strong>: View multiple notebooks, terminals, and files side-by-side</li>
<li><strong>File browser</strong>: Navigate your project files without leaving the interface</li>
<li><strong>Integrated terminal</strong>: Run shell commands directly in JupyterLab</li>
<li><strong>Table of Contents</strong>: Navigate long financial reports easily</li>
<li><strong>Extensions</strong>: Add functionality like Git integration, variable inspectors, etc.</li>
</ol>
<p>This layout is particularly useful for financial analysis where you might want to:</p>
<ul>
<li>Compare multiple financial models side-by-side</li>
<li>Keep reference data open while working on calculations</li>
<li>Run terminal commands to fetch latest financial data</li>
<li>Browse through different financial statements</li>
</ul>
<h2 id="google-colab-cloud-based-notebooks">Google Colab: Cloud-Based Notebooks</h2>
<p>If you want to work on notebooks without installing anything, Google Colab is a free, cloud-based alternative:</p>
<ul>
<li>Runs entirely in the browser</li>
<li>Provides free access to GPUs and TPUs for machine learning</li>
<li>Integrates with Google Drive for storage</li>
<li>Includes many pre-installed data science packages</li>
</ul>
<p>It&rsquo;s perfect for:</p>
<ul>
<li>Working on financial analysis when you&rsquo;re away from your main computer</li>
<li>Sharing interactive financial models with colleagues who don&rsquo;t have Python installed</li>
<li>Experimenting with machine learning for financial predictions</li>
</ul>
<p>Visit <a href="https://colab.research.google.com/">Google Colab</a> to get started.</p>
<h2 id="practical-example-building-an-interactive-financial-dashboard">Practical Example: Building an Interactive Financial Dashboard</h2>
<p>Let&rsquo;s bring everything together with a practical example. Here&rsquo;s an outline for creating an interactive financial dashboard in a Jupyter notebook:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.express <span style="color:#66d9ef">as</span> px
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.graph_objects <span style="color:#66d9ef">as</span> go
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ipywidgets <span style="color:#f92672">import</span> interact, widgets
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime, timedelta
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sample financial data (in practice, you&#39;d import from your financial systems)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_financial_data</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Generate dates for the past 12 months</span>
</span></span><span style="display:flex;"><span>    end_date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>    start_date <span style="color:#f92672">=</span> end_date <span style="color:#f92672">-</span> timedelta(days<span style="color:#f92672">=</span><span style="color:#ae81ff">365</span>)
</span></span><span style="display:flex;"><span>    dates <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>date_range(start<span style="color:#f92672">=</span>start_date, end<span style="color:#f92672">=</span>end_date, freq<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;M&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create sample department data with some randomness</span>
</span></span><span style="display:flex;"><span>    np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">42</span>)  <span style="color:#75715e"># For reproducibility</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Date&#39;</span>: dates,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Revenue&#39;</span>: <span style="color:#ae81ff">1000000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">50000</span>, len(dates)) <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">200000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;COGS&#39;</span>: <span style="color:#ae81ff">600000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30000</span>, len(dates)) <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Marketing&#39;</span>: <span style="color:#ae81ff">50000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">5000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;R&amp;D&#39;</span>: <span style="color:#ae81ff">75000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7500</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Admin&#39;</span>: <span style="color:#ae81ff">100000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;IT&#39;</span>: <span style="color:#ae81ff">40000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">4000</span>, len(dates))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(data)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate derived metrics</span>
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;COGS&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Marketing&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;R&amp;D&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;Admin&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;IT&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Gross_Margin&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">/</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Operating_Margin&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>] <span style="color:#f92672">/</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate our sample data</span>
</span></span><span style="display:flex;"><span>financial_data <span style="color:#f92672">=</span> generate_financial_data()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Display first few rows</span>
</span></span><span style="display:flex;"><span>financial_data<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>Now let&rsquo;s create interactive visualizations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a function for our dashboard</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">financial_dashboard</span>(metric):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>:
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Revenue&#39;</span>],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;COGS&#39;</span>] <span style="color:#f92672">+</span> financial_data[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Total Costs&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue vs. Total Costs&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Amount ($)&#39;</span>,
</span></span><span style="display:flex;"><span>            barmode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;group&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Profit Margins&#39;</span>:
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Scatter(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Gross_Margin&#39;</span>],
</span></span><span style="display:flex;"><span>            mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;lines+markers&#39;</span>,
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Gross Margin&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Scatter(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Operating_Margin&#39;</span>],
</span></span><span style="display:flex;"><span>            mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;lines+markers&#39;</span>,
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Operating Margin&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Profit Margins Over Time&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Margin (%)&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis<span style="color:#f92672">=</span>dict(tickformat<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.0%&#39;</span>)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Expense Breakdown&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a pie chart of the latest month&#39;s expenses</span>
</span></span><span style="display:flex;"><span>        latest <span style="color:#f92672">=</span> financial_data<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        labels <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;COGS&#39;</span>, <span style="color:#e6db74">&#39;Marketing&#39;</span>, <span style="color:#e6db74">&#39;R&amp;D&#39;</span>, <span style="color:#e6db74">&#39;Admin&#39;</span>, <span style="color:#e6db74">&#39;IT&#39;</span>]
</span></span><span style="display:flex;"><span>        values <span style="color:#f92672">=</span> [latest[<span style="color:#e6db74">&#39;COGS&#39;</span>], latest[<span style="color:#e6db74">&#39;Marketing&#39;</span>], latest[<span style="color:#e6db74">&#39;R&amp;D&#39;</span>], latest[<span style="color:#e6db74">&#39;Admin&#39;</span>], latest[<span style="color:#e6db74">&#39;IT&#39;</span>]]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure(data<span style="color:#f92672">=</span>[go<span style="color:#f92672">.</span>Pie(
</span></span><span style="display:flex;"><span>            labels<span style="color:#f92672">=</span>labels,
</span></span><span style="display:flex;"><span>            values<span style="color:#f92672">=</span>values,
</span></span><span style="display:flex;"><span>            hole<span style="color:#f92672">=</span><span style="color:#ae81ff">.3</span>
</span></span><span style="display:flex;"><span>        )])
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(title<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Expense Breakdown (Latest Month: </span><span style="color:#e6db74">{</span>latest[<span style="color:#e6db74">&#34;Date&#34;</span>]<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%b %Y&#34;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Trend Analysis&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Month-over-month growth rates</span>
</span></span><span style="display:flex;"><span>        growth_data <span style="color:#f92672">=</span> financial_data<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Revenue_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Revenue&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Gross_Profit_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Operating_Income_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Date&#39;</span>][<span style="color:#ae81ff">1</span>:],  <span style="color:#75715e"># Skip first month (no growth rate)</span>
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Revenue_Growth&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue Growth&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Date&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Operating_Income_Growth&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Operating Income Growth&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month-over-Month Growth Rates&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Growth Rate (%)&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    fig<span style="color:#f92672">.</span>show()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an interactive widget</span>
</span></span><span style="display:flex;"><span>interact(
</span></span><span style="display:flex;"><span>    financial_dashboard,
</span></span><span style="display:flex;"><span>    metric<span style="color:#f92672">=</span>widgets<span style="color:#f92672">.</span>Dropdown(
</span></span><span style="display:flex;"><span>        options<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>, <span style="color:#e6db74">&#39;Profit Margins&#39;</span>, <span style="color:#e6db74">&#39;Expense Breakdown&#39;</span>, <span style="color:#e6db74">&#39;Trend Analysis&#39;</span>],
</span></span><span style="display:flex;"><span>        value<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>,
</span></span><span style="display:flex;"><span>        description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Metric:&#39;</span>,
</span></span><span style="display:flex;"><span>        style<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;description_width&#39;</span>: <span style="color:#e6db74">&#39;initial&#39;</span>}
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>This interactive dashboard allows you to explore different financial metrics with a dropdown menu. In a real-world scenario, you would connect this to your actual financial data sources.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The Python ecosystem offers a rich set of tools for financial analysis, from package managers to interactive notebooks. Let&rsquo;s recap what we&rsquo;ve covered:</p>
<ol>
<li>
<p><strong>Package and environment management</strong>: pip, conda, and Anaconda each have their place in the Python ecosystem, with conda being particularly valuable for complex financial analysis packages.</p>
</li>
<li>
<p><strong>Anaconda Navigator</strong>: Provides a user-friendly interface for managing environments and launching applications, making it easier to set up environments for different financial analysis tasks.</p>
</li>
<li>
<p><strong>Jupyter Notebooks</strong>: Offer an interactive way to combine code, data, and narrative, perfect for financial reporting and exploratory analysis.</p>
</li>
<li>
<p><strong>JupyterLab</strong>: Enhances the notebook experience with a multi-panel interface ideal for complex financial analysis workflows.</p>
</li>
<li>
<p><strong>Interactive widgets</strong>: Allow you to build dynamic financial models and dashboards without web development knowledge.</p>
</li>
</ol>
<p>As you continue your Python journey, these tools will become essential parts of your financial analysis toolkit. They enable a more interactive, exploratory approach to financial data analysis that traditional spreadsheets simply can&rsquo;t match.</p>
<h2 id="next-steps">Next Steps</h2>
<ul>
<li>Install Anaconda and create a dedicated environment for financial analysis</li>
<li>Convert an existing financial spreadsheet to a Jupyter notebook</li>
<li>Create an interactive dashboard for a key financial metric you track</li>
<li>Explore the extensive ecosystem of financial packages available in Python</li>
</ul>
<p>In the next post, we&rsquo;ll dive deeper into NumPy, the foundation for numerical computing in Python, and see how it can speed up your financial calculations.</p>
]]></content:encoded></item></channel></rss>