<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Flake8 on Michael Brunger</title><link>https://michaelbrunger.com/tags/flake8/</link><description>Recent content in Flake8 on Michael Brunger</description><image><title>Michael Brunger</title><url>https://michaelbrunger.com/site-feature-image.jpg</url><link>https://michaelbrunger.com/site-feature-image.jpg</link></image><generator>Hugo -- 0.146.7</generator><language>en-GB</language><lastBuildDate>Fri, 13 Jun 2025 13:53:27 +0100</lastBuildDate><atom:link href="https://michaelbrunger.com/tags/flake8/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 7: Code Quality &amp; Collaboration in Python</title><link>https://michaelbrunger.com/python-virtual-environments-packaging/</link><pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-virtual-environments-packaging/</guid><description>Learn version control with Git and GitHub, write clean PEP 8-compliant code, use linters and auto-formatters, and create effective documentation for your Python projects.</description><content:encoded><![CDATA[<h1 id="code-quality--collaboration-building-finance-tools-that-last">Code Quality &amp; Collaboration: Building Finance Tools That Last</h1>
<p>As a finance professional learning Python, you&rsquo;ll soon want to move beyond writing scripts just for yourself. Whether you&rsquo;re building financial models, automating reporting, or creating data analysis tools, there comes a point when your code needs to be shared with colleagues or even the wider finance community. This post will guide you through best practices for creating high-quality, shareable code.</p>
<h2 id="version-control-git--github-for-financial-projects">Version Control: Git &amp; GitHub for Financial Projects</h2>
<h3 id="why-version-control-matters-in-finance">Why Version Control Matters in Finance</h3>
<p>Imagine you&rsquo;ve built a Python script that calculates key financial ratios from quarterly reports. After sharing it with your team, you make changes that accidentally break the debt-to-equity calculation. Without version control, finding and fixing this error could be a nightmare. With Git, you can simply revert to the previous working version.</p>
<p>In finance, where accuracy is paramount and regulatory compliance often requires audit trails, version control is essential.</p>
<h3 id="getting-started-with-git">Getting Started with Git</h3>
<p>First, <a href="https://git-scm.com/downloads">download and install Git</a> for your operating system.</p>
<p>Once installed, open a command prompt or terminal and set up your identity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global user.name <span style="color:#e6db74">&#34;Your Name&#34;</span>
</span></span><span style="display:flex;"><span>git config --global user.email <span style="color:#e6db74">&#34;your.email@example.com&#34;</span>
</span></span></code></pre></div><h3 id="creating-your-first-finance-repository">Creating Your First Finance Repository</h3>
<p>Let&rsquo;s walk through creating a repository for a simple financial calculator:</p>
<ol>
<li>Create a new directory for your project:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir financial-ratio-calculator
</span></span><span style="display:flex;"><span>cd financial-ratio-calculator
</span></span></code></pre></div><ol start="2">
<li>Initialis a Git repository:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init
</span></span></code></pre></div><p>You&rsquo;ll see a message that an empty Git repository has been initialised.</p>
<ol start="3">
<li>Create a simple Python file called <code>ratio_calculator.py</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_current_ratio</span>(current_assets, current_liabilities):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate the current ratio.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        current_assets (float): Total current assets
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        current_liabilities (float): Total current liabilities
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: Current ratio (current assets / current liabilities)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> current_liabilities <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Current liabilities cannot be zero (division by zero)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> current_assets <span style="color:#f92672">/</span> current_liabilities
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_debt_to_equity</span>(total_debt, shareholders_equity):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate the debt-to-equity ratio.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        total_debt (float): Total debt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        shareholders_equity (float): Total shareholders&#39; equity
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: Debt-to-equity ratio (total debt / shareholders&#39; equity)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> shareholders_equity <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Shareholders&#39; equity cannot be zero (division by zero)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total_debt <span style="color:#f92672">/</span> shareholders_equity
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add more financial ratios as needed</span>
</span></span></code></pre></div><ol start="4">
<li>Track the file with Git:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add ratio_calculator.py
</span></span></code></pre></div><ol start="5">
<li>Commit the changes:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Add basic financial ratio calculator functions&#34;</span>
</span></span></code></pre></div><h3 id="core-git-commands-for-daily-use">Core Git Commands for Daily Use</h3>
<ul>
<li><code>git status</code>: Check which files have been modified</li>
<li><code>git diff</code>: See exactly what changed in your files</li>
<li><code>git add &lt;filename&gt;</code>: Stage a file for commit</li>
<li><code>git commit -m &quot;Your message&quot;</code>: Commit staged changes</li>
<li><code>git log</code>: View commit history</li>
</ul>
<h3 id="branching-for-new-features">Branching for New Features</h3>
<p>Branching lets you work on new features without affecting your main code. This is perfect for when you&rsquo;re adding new financial calculations to your toolkit.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a branch for a new profitability ratio feature</span>
</span></span><span style="display:flex;"><span>git branch profitability-ratios
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Switch to that branch</span>
</span></span><span style="display:flex;"><span>git checkout profitability-ratios
</span></span></code></pre></div><p>Or do both at once:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout -b profitability-ratios
</span></span></code></pre></div><p>Now add some code to your ratio_calculator.py file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roe</span>(net_income, average_shareholders_equity):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Return on Equity (ROE).
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        net_income (float): Net income for the period
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        average_shareholders_equity (float): Average shareholders&#39; equity
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: ROE ratio (net income / average shareholders&#39; equity)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> average_shareholders_equity <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Average shareholders&#39; equity cannot be zero&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> net_income <span style="color:#f92672">/</span> average_shareholders_equity
</span></span></code></pre></div><p>Commit this new function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add ratio_calculator.py
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Add ROE calculation function&#34;</span>
</span></span></code></pre></div><p>When you&rsquo;re ready to merge this back into your main code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout main
</span></span><span style="display:flex;"><span>git merge profitability-ratios
</span></span></code></pre></div><h3 id="collaborating-with-github">Collaborating with GitHub</h3>
<p>GitHub extends Git&rsquo;s functionality by hosting your repositories online, making collaboration easier.</p>
<ol>
<li><a href="https://github.com/join">Create a GitHub account</a> if you don&rsquo;t have one</li>
<li>Create a new repository on GitHub</li>
<li>Connect your local repository to GitHub:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git remote add origin https://github.com/yourusername/financial-ratio-calculator.git
</span></span><span style="display:flex;"><span>git push -u origin main
</span></span></code></pre></div><p>Now your code is on GitHub! You can share the link with colleagues, collaborate on improvements, and track issues.</p>
<h3 id="pull-requests-the-professional-way-to-collaborate">Pull Requests: The Professional Way to Collaborate</h3>
<p>When working with a team of financial analysts, direct changes to the main codebase can be risky. Pull requests (PRs) provide a mechanism for review and discussion before code is merged:</p>
<ol>
<li>Make your changes in a separate branch</li>
<li>Push that branch to GitHub</li>
<li>Open a PR to merge your branch into main</li>
<li>Have teammates review your code</li>
<li>Merge the PR once approved</li>
</ol>
<p>This workflow is perfect for finance teams where code accuracy is critical; catching calculation errors before they make it into production reports!</p>
<h2 id="writing-clean-pep-8-compliant-code">Writing Clean, PEP 8 Compliant Code</h2>
<h3 id="what-is-pep-8">What is PEP 8?</h3>
<p>PEP 8 is Python&rsquo;s style guide—a set of conventions for writing readable code. In finance, where you might be sharing models with auditors or other stakeholders, clean code is particularly important.</p>
<h3 id="key-pep-8-rules-for-finance-code">Key PEP 8 Rules for Finance Code</h3>
<ul>
<li><strong>Use 4 spaces for indentation</strong> (not tabs)</li>
<li><strong>Keep lines under 79 characters</strong> for better readability in documentation</li>
<li><strong>Use descriptive variable names</strong> that reflect financial concepts:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Bad</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calc</span>(a, b):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">/</span> b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Good</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_price_to_earnings_ratio</span>(stock_price, earnings_per_share):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> stock_price <span style="color:#f92672">/</span> earnings_per_share
</span></span></code></pre></div><ul>
<li><strong>Use whitespace appropriately</strong>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Bad</span>
</span></span><span style="display:flex;"><span>profit<span style="color:#f92672">=</span>revenue<span style="color:#f92672">-</span>expenses
</span></span><span style="display:flex;"><span>tax_amount<span style="color:#f92672">=</span>profit<span style="color:#f92672">*</span>tax_rate
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Good</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> revenue <span style="color:#f92672">-</span> expenses
</span></span><span style="display:flex;"><span>tax_amount <span style="color:#f92672">=</span> profit <span style="color:#f92672">*</span> tax_rate
</span></span></code></pre></div><h3 id="using-linters-flake8">Using Linters: flake8</h3>
<p>Linters automatically check your code for style issues. Let&rsquo;s set up flake8:</p>
<ol>
<li>Install flake8:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install flake8
</span></span></code></pre></div><ol start="2">
<li>Run flake8 on your code:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>flake8 ratio_calculator.py
</span></span></code></pre></div><p>It will show any style violations that need fixing.</p>
<ol start="3">
<li>For a real finance project, create a configuration file (<code>.flake8</code>) in your project root:</li>
</ol>
<pre tabindex="0"><code>[flake8]
max-line-length = 88
exclude = .git,__pycache__,build,dist
per-file-ignores =
    __init__.py: F401
</code></pre><h3 id="auto-formatting-with-black">Auto-formatting with black</h3>
<p>Why spend time manually formatting code when tools can do it for you?</p>
<ol>
<li>Install black:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install black
</span></span></code></pre></div><ol start="2">
<li>Format your code:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>black ratio_calculator.py
</span></span></code></pre></div><p>Black will automatically reformat your code to follow a consistent style.</p>
<ol start="3">
<li>For finance projects, you might want to create a <code>pyproject.toml</code> file to configure black:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">tool</span>.<span style="color:#a6e22e">black</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">line-length</span> = <span style="color:#ae81ff">88</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">target-version</span> = [<span style="color:#e6db74">&#39;py38&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">include</span> = <span style="color:#e6db74">&#39;\.pyi?$&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exclude</span> = <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">/(
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \.git
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.hg
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.mypy_cache
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.tox
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.venv
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | _build
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | buck-out
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | build
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | dist
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><h3 id="organising-imports-with-isort">Organising Imports with isort</h3>
<p>isort automatically organises your import statements by type and alphabetically.</p>
<ol>
<li>Install isort:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install isort
</span></span></code></pre></div><ol start="2">
<li>Run isort on your file:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>isort ratio_calculator.py
</span></span></code></pre></div><p>For finance projects where you might be importing various data analysis libraries, isort keeps your imports clean and consistent:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Standard library imports</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> decimal <span style="color:#f92672">import</span> Decimal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Third-party imports</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> matplotlib <span style="color:#f92672">import</span> pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Local application imports</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .financial_models <span style="color:#f92672">import</span> discounted_cash_flow
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .ratio_analysis <span style="color:#f92672">import</span> calculate_current_ratio
</span></span></code></pre></div><h2 id="writing-effective-documentation">Writing Effective Documentation</h2>
<h3 id="docstrings-your-future-self-will-thank-you">Docstrings: Your Future Self Will Thank You</h3>
<p>Documentation isn&rsquo;t just for others, it&rsquo;s useful for you six months from now when you can&rsquo;t remember why you wrote that complex financial calculation a certain way.</p>
<h4 id="google-style-docstrings">Google Style Docstrings</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_npv</span>(cash_flows, discount_rate):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Net Present Value of a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows (list): List of cash flows, where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        discount_rate (float): Annual discount rate as a decimal (e.g., 0.1 for 10%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: Net Present Value
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Examples:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; calculate_npv([-1000, 200, 300, 400, 500], 0.1)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        152.07
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    npv <span style="color:#f92672">=</span> cash_flows[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># Initial investment</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, cf <span style="color:#f92672">in</span> enumerate(cash_flows[<span style="color:#ae81ff">1</span>:], <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">+=</span> cf <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> discount_rate) <span style="color:#f92672">**</span> i
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> round(npv, <span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><h4 id="numpy-style-docstrings">NumPy Style Docstrings</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_irr</span>(cash_flows):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Internal Rate of Return for a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Parameters
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ----------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    cash_flows : list or array-like
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        List of cash flows, where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    -------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    float
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        The Internal Rate of Return as a decimal
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Notes
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    -----
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Uses Newton&#39;s method to find the rate that makes NPV = 0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Examples
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    --------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &gt;&gt;&gt; calculate_irr([-1000, 300, 400, 500])
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    0.1548
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># IRR implementation...</span>
</span></span></code></pre></div><p>Choose one style and be consistent across your project.</p>
<h3 id="generating-documentation-with-sphinx">Generating Documentation with Sphinx</h3>
<p>For larger finance projects, automatic documentation generation with Sphinx is invaluable:</p>
<ol>
<li>Install Sphinx:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install sphinx sphinx-rtd-theme
</span></span></code></pre></div><ol start="2">
<li>Set up a docs directory:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir docs
</span></span><span style="display:flex;"><span>cd docs
</span></span><span style="display:flex;"><span>sphinx-quickstart
</span></span></code></pre></div><ol start="3">
<li>Configure <code>conf.py</code> to use a nice theme:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>html_theme <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;sphinx_rtd_theme&#39;</span>
</span></span></code></pre></div><ol start="4">
<li>Build your documentation:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sphinx-build -b html . _build
</span></span></code></pre></div><p>This creates HTML documentation you can share with your finance team.</p>
<h2 id="putting-it-all-together-a-finance-project-workflow">Putting It All Together: A Finance Project Workflow</h2>
<p>Let&rsquo;s walk through a complete workflow for a hypothetical financial analysis tool:</p>
<ol>
<li>
<p><strong>Set up your environment</strong>:</p>
<ul>
<li>Create a virtual environment</li>
<li>Install dependencies</li>
<li>Set up Git</li>
</ul>
</li>
<li>
<p><strong>Create your project structure</strong>:</p>
</li>
</ol>
<pre tabindex="0"><code>financial-analysis-toolkit/
├── .git/
├── .gitignore
├── .flake8
├── pyproject.toml
├── README.md
├── requirements.txt
├── setup.py
├── docs/
└── financial_toolkit/
    ├── __init__.py
    ├── ratio_analysis.py
    ├── valuation_models.py
    ├── risk_metrics.py
    └── utilities.py
</code></pre><ol start="3">
<li>
<p><strong>Write your code with documentation</strong>:</p>
<ul>
<li>Start with core functions</li>
<li>Add comprehensive docstrings</li>
<li>Make small, focused commits</li>
</ul>
</li>
<li>
<p><strong>Validate with linters and formatters</strong>:</p>
<ul>
<li>Run black to format code</li>
<li>Run isort to organise imports</li>
<li>Run flake8 to check for issues</li>
</ul>
</li>
<li>
<p><strong>Create tests</strong> (more on this in the next post)</p>
</li>
<li>
<p><strong>Push to GitHub and collaborate</strong>:</p>
<ul>
<li>Share with colleagues</li>
<li>Use pull requests for reviews</li>
<li>Track issues and feature requests</li>
</ul>
</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>As a finance professional using Python, the practices outlined in this post will help you create reliable, maintainable code that you can confidently share with colleagues or the wider finance community. Taking the time to learn these professional techniques now will save you countless hours in the future and elevate the quality of your financial analysis tools.</p>
<p>In the next post, we&rsquo;ll look at testing and debugging your financial code, which are critical skills for ensuring your calculations are accurate and robust.</p>
<h2 id="further-resources">Further Resources</h2>
<ul>
<li><a href="https://git-scm.com/doc">Git Documentation</a></li>
<li><a href="https://guides.github.com/">GitHub Guides</a></li>
<li><a href="https://pep8.org/">PEP 8 Style Guide</a></li>
<li><a href="https://realpython.com/documenting-python-code/">Real Python&rsquo;s Guide to Docstrings</a></li>
<li><a href="https://www.sphinx-doc.org/">Sphinx Documentation</a></li>
</ul>
<p><strong>Questions for Practice:</strong></p>
<ol>
<li>Try creating a Git repository for a simple financial calculator with at least three ratio calculations</li>
<li>Format your code with black and check it with flake8</li>
<li>Write Google-style docstrings for each function</li>
<li>Push your repository to GitHub and create a README explaining what your calculator does</li>
</ol>
]]></content:encoded></item></channel></rss>