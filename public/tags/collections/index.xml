<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Collections on Michael Brunger</title><link>https://michaelbrunger.com/tags/collections/</link><description>Recent content in Collections on Michael Brunger</description><image><title>Michael Brunger</title><url>https://michaelbrunger.com/site-feature-image.jpg</url><link>https://michaelbrunger.com/site-feature-image.jpg</link></image><generator>Hugo -- 0.146.7</generator><language>en-GB</language><lastBuildDate>Tue, 20 May 2025 10:17:00 +0100</lastBuildDate><atom:link href="https://michaelbrunger.com/tags/collections/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 4: Core Data Structures in Python</title><link>https://michaelbrunger.com/python-core-data-structures/</link><pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-core-data-structures/</guid><description>Explore Python&amp;#39;s essential data structures: lists, tuples, dictionaries, and sets. Learn creation methods, manipulation techniques, and guidelines for choosing the right structure for your tasks.</description><content:encoded><![CDATA[<h1 id="post-4-core-data-structures">Post 4: Core Data Structures</h1>
<p>Welcome to the fourth post in my Python learning journey. So far, we&rsquo;ve installed Python, set up a development environment, and explored the basic syntax. Now it&rsquo;s time to dive deeper into Python&rsquo;s core data structures; the building blocks you&rsquo;ll use to organise and manipulate data in your programs.</p>
<p>In this post, we&rsquo;ll cover:</p>
<ol>
<li>Lists: Python&rsquo;s versatile sequence type</li>
<li>Tuples: Immutable collections</li>
<li>Dictionaries: Key-value mapping</li>
<li>Sets: Unique value collections</li>
<li>Choosing the right data structure</li>
</ol>
<p>I&rsquo;ve found these data structures similar to concepts we use every day; lists are like columns in spreadsheets, dictionaries resemble lookup tables, and sets are perfect for tracking unique items like account codes.</p>
<hr>
<h2 id="1-lists">1. Lists</h2>
<p>Lists are ordered, mutable (changeable) collections that can contain items of different types. They&rsquo;re perhaps the most commonly used data structure in Python.</p>
<h3 id="11-creating-lists">1.1 Creating Lists</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty list</span>
</span></span><span style="display:flex;"><span>empty_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List with initial values</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>mixed_data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">42</span>, <span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#66d9ef">True</span>, <span style="color:#ae81ff">3.14</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating a list with the list() constructor</span>
</span></span><span style="display:flex;"><span>chars <span style="color:#f92672">=</span> list(<span style="color:#e6db74">&#34;Python&#34;</span>)  <span style="color:#75715e"># [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List of repeated values</span>
</span></span><span style="display:flex;"><span>zeros <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">5</span>  <span style="color:#75715e"># [0, 0, 0, 0, 0]</span>
</span></span></code></pre></div><h3 id="12-accessing-list-elements">1.2 Accessing List Elements</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">450</span>, <span style="color:#ae81ff">700</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">800</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Indexing (zero-based)</span>
</span></span><span style="display:flex;"><span>first_expense <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 1200</span>
</span></span><span style="display:flex;"><span>last_expense <span style="color:#f92672">=</span> expenses[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># 800</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Slicing [start:end:step] - end index is exclusive</span>
</span></span><span style="display:flex;"><span>first_three <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">3</span>]  <span style="color:#75715e"># [1200, 450, 700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Shorthand for starting from beginning</span>
</span></span><span style="display:flex;"><span>first_three <span style="color:#f92672">=</span> expenses[:<span style="color:#ae81ff">3</span>]   <span style="color:#75715e"># [1200, 450, 700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Shorthand for going to the end</span>
</span></span><span style="display:flex;"><span>last_three <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">2</span>:]    <span style="color:#75715e"># [700, 95, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Negative indices count from the end</span>
</span></span><span style="display:flex;"><span>last_two <span style="color:#f92672">=</span> expenses[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>:]     <span style="color:#75715e"># [95, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step value</span>
</span></span><span style="display:flex;"><span>every_other <span style="color:#f92672">=</span> expenses[::<span style="color:#ae81ff">2</span>]  <span style="color:#75715e"># [1200, 700, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reverse a list</span>
</span></span><span style="display:flex;"><span>reversed_expenses <span style="color:#f92672">=</span> expenses[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># [800, 95, 700, 450, 1200]</span>
</span></span></code></pre></div><h3 id="13-modifying-lists">1.3 Modifying Lists</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>departments <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Finance&#34;</span>, <span style="color:#e6db74">&#34;Marketing&#34;</span>, <span style="color:#e6db74">&#34;IT&#34;</span>, <span style="color:#e6db74">&#34;Operations&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Changing an element</span>
</span></span><span style="display:flex;"><span>departments[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Digital Marketing&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Adding elements</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#34;HR&#34;</span>)  <span style="color:#75715e"># Adds to the end</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;Sales&#34;</span>)  <span style="color:#75715e"># Inserts at specific position</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Removing elements</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#34;IT&#34;</span>)  <span style="color:#75715e"># Removes first occurrence of value</span>
</span></span><span style="display:flex;"><span>popped_item <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>pop()  <span style="color:#75715e"># Removes and returns last item</span>
</span></span><span style="display:flex;"><span>popped_item <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># Removes item at index 1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> departments[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># Removes item at index 0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Extending lists</span>
</span></span><span style="display:flex;"><span>dept1 <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Finance&#34;</span>, <span style="color:#e6db74">&#34;HR&#34;</span>]
</span></span><span style="display:flex;"><span>dept2 <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;IT&#34;</span>, <span style="color:#e6db74">&#34;Operations&#34;</span>]
</span></span><span style="display:flex;"><span>dept1<span style="color:#f92672">.</span>extend(dept2)  <span style="color:#75715e"># dept1 now contains [&#34;Finance&#34;, &#34;HR&#34;, &#34;IT&#34;, &#34;Operations&#34;]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternative: concatenation</span>
</span></span><span style="display:flex;"><span>all_depts <span style="color:#f92672">=</span> dept1 <span style="color:#f92672">+</span> dept2  <span style="color:#75715e"># Creates a new list</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding elements</span>
</span></span><span style="display:flex;"><span>position <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;HR&#34;</span>)  <span style="color:#75715e"># Raises ValueError if not found</span>
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;Finance&#34;</span>)  <span style="color:#75715e"># Counts occurrences of value</span>
</span></span></code></pre></div><h3 id="14-useful-list-operations">1.4 Useful List Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sorting</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>sort()  <span style="color:#75715e"># Modifies the list in-place: [1, 2, 5, 8, 9]</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>sort(reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)  <span style="color:#75715e"># Descending order: [9, 8, 5, 2, 1]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># If you don&#39;t want to modify the original list</span>
</span></span><span style="display:flex;"><span>sorted_numbers <span style="color:#f92672">=</span> sorted(numbers)  <span style="color:#75715e"># Returns a new sorted list</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reversing</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>reverse()  <span style="color:#75715e"># Modifies the list in-place</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding min/max</span>
</span></span><span style="display:flex;"><span>minimum <span style="color:#f92672">=</span> min(numbers)
</span></span><span style="display:flex;"><span>maximum <span style="color:#f92672">=</span> max(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sum of all elements</span>
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> sum(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Checking membership</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">in</span> numbers:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Found 5 in the list!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List comprehension (filtering and transforming)</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> [x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> numbers <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>doubled <span style="color:#f92672">=</span> [x <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> numbers]
</span></span></code></pre></div><h3 id="15-nested-lists-2d-lists">1.5 Nested Lists (2D Lists)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Quarterly expenses by department</span>
</span></span><span style="display:flex;"><span>quarterly_expenses <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">1500</span>, <span style="color:#ae81ff">1100</span>, <span style="color:#ae81ff">1800</span>],  <span style="color:#75715e"># Finance</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">900</span>, <span style="color:#ae81ff">950</span>, <span style="color:#ae81ff">1025</span>, <span style="color:#ae81ff">1150</span>],    <span style="color:#75715e"># Marketing</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">850</span>, <span style="color:#ae81ff">880</span>, <span style="color:#ae81ff">920</span>, <span style="color:#ae81ff">980</span>]       <span style="color:#75715e"># IT</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accessing elements</span>
</span></span><span style="display:flex;"><span>finance_q1 <span style="color:#f92672">=</span> quarterly_expenses[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 1200</span>
</span></span><span style="display:flex;"><span>marketing_q3 <span style="color:#f92672">=</span> quarterly_expenses[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">2</span>]  <span style="color:#75715e"># 1025</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Looping through a 2D list</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> department <span style="color:#f92672">in</span> quarterly_expenses:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> department:
</span></span><span style="display:flex;"><span>        print(expense, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>    print()  <span style="color:#75715e"># New line after each department</span>
</span></span></code></pre></div><hr>
<h2 id="2-tuples">2. Tuples</h2>
<p>Tuples are similar to lists but are immutable (cannot be changed after creation). They&rsquo;re commonly used for fixed collections of items.</p>
<h3 id="21-creating-tuples">2.1 Creating Tuples</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty tuple</span>
</span></span><span style="display:flex;"><span>empty_tuple <span style="color:#f92672">=</span> ()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tuple with values</span>
</span></span><span style="display:flex;"><span>coordinates <span style="color:#f92672">=</span> (<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>person <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#ae81ff">30</span>, <span style="color:#e6db74">&#34;Developer&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Single-item tuple needs a comma</span>
</span></span><span style="display:flex;"><span>single_item <span style="color:#f92672">=</span> (<span style="color:#ae81ff">42</span>,)  <span style="color:#75715e"># Without comma, it&#39;s just a number in parentheses</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tuple packing (no parentheses needed)</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#e6db74">&#34;Manager&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating with tuple() constructor</span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> tuple(<span style="color:#e6db74">&#34;abc&#34;</span>)  <span style="color:#75715e"># (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span>
</span></span></code></pre></div><h3 id="22-accessing-tuple-elements">2.2 Accessing Tuple Elements</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>coordinates <span style="color:#f92672">=</span> (<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Similar to list indexing and slicing</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> coordinates[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 10</span>
</span></span><span style="display:flex;"><span>last <span style="color:#f92672">=</span> coordinates[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># 50</span>
</span></span><span style="display:flex;"><span>subset <span style="color:#f92672">=</span> coordinates[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">4</span>]  <span style="color:#75715e"># (20, 30, 40)</span>
</span></span></code></pre></div><h3 id="23-tuple-operations">2.3 Tuple Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#e6db74">&#34;Manager&#34;</span>, <span style="color:#e6db74">&#34;HR&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Count and index (like lists)</span>
</span></span><span style="display:flex;"><span>age_pos <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>index(<span style="color:#ae81ff">35</span>)
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;Manager&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Concatenation</span>
</span></span><span style="display:flex;"><span>more_info <span style="color:#f92672">=</span> employee <span style="color:#f92672">+</span> (<span style="color:#e6db74">&#34;Full-time&#34;</span>,)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Unpacking (very useful feature!)</span>
</span></span><span style="display:flex;"><span>name, age, role, department <span style="color:#f92672">=</span> employee
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returning multiple values from a function (using tuple unpacking)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_employee_stats</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">85000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name, age, salary <span style="color:#f92672">=</span> get_employee_stats()
</span></span></code></pre></div><h3 id="24-why-use-tuples">2.4 Why Use Tuples?</h3>
<ol>
<li><strong>Immutability</strong> - Values can&rsquo;t be changed accidentally</li>
<li><strong>Hashable</strong> - Can be used as dictionary keys (lists cannot)</li>
<li><strong>Slightly more efficient</strong> than lists for fixed data</li>
<li><strong>Signal intent</strong> - Using a tuple indicates the data shouldn&rsquo;t change</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using tuples as dictionary keys (not possible with lists)</span>
</span></span><span style="display:flex;"><span>locations <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">40.7128</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">74.0060</span>): <span style="color:#e6db74">&#34;New York&#34;</span>,
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">34.0522</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">118.2437</span>): <span style="color:#e6db74">&#34;Los Angeles&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<h2 id="3-dictionaries">3. Dictionaries</h2>
<p>Dictionaries store data as key-value pairs, providing fast lookups by key. They&rsquo;re unordered in Python versions before 3.7 and preserve insertion order in 3.7+.</p>
<h3 id="31-creating-dictionaries">3.1 Creating Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty dictionary</span>
</span></span><span style="display:flex;"><span>empty_dict <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dictionary with initial key-value pairs</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane Smith&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;age&#34;</span>: <span style="color:#ae81ff">35</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternative creation with dict() constructor</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> dict(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Jane Smith&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">35</span>, department<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Finance&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating from sequences of pairs</span>
</span></span><span style="display:flex;"><span>items <span style="color:#f92672">=</span> [(<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Jane&#34;</span>), (<span style="color:#e6db74">&#34;age&#34;</span>, <span style="color:#ae81ff">35</span>)]
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> dict(items)
</span></span></code></pre></div><h3 id="32-accessing-dictionary-values">3.2 Accessing Dictionary Values</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane Smith&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;age&#34;</span>: <span style="color:#ae81ff">35</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Access by key</span>
</span></span><span style="display:flex;"><span>name <span style="color:#f92672">=</span> employee[<span style="color:#e6db74">&#34;name&#34;</span>]  <span style="color:#75715e"># &#34;Jane Smith&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># KeyError if key doesn&#39;t exist</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># salary = employee[&#34;bonus&#34;]  # Raises KeyError</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using get() method (safer, returns None or default value if key not found)</span>
</span></span><span style="display:flex;"><span>bonus <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;bonus&#34;</span>)  <span style="color:#75715e"># None</span>
</span></span><span style="display:flex;"><span>bonus <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;bonus&#34;</span>, <span style="color:#ae81ff">0</span>)  <span style="color:#75715e"># Returns 0 if key not found</span>
</span></span></code></pre></div><h3 id="33-modifying-dictionaries">3.3 Modifying Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Adding or updating values</span>
</span></span><span style="display:flex;"><span>employee[<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">35</span>  <span style="color:#75715e"># Add new key-value pair</span>
</span></span><span style="display:flex;"><span>employee[<span style="color:#e6db74">&#34;name&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Jane Smith&#34;</span>  <span style="color:#75715e"># Update existing value</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Removing items</span>
</span></span><span style="display:flex;"><span>removed_value <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>pop(<span style="color:#e6db74">&#34;age&#34;</span>)  <span style="color:#75715e"># Removes and returns value</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> employee[<span style="color:#e6db74">&#34;department&#34;</span>]  <span style="color:#75715e"># Removes key-value pair</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Clearing all items</span>
</span></span><span style="display:flex;"><span>employee<span style="color:#f92672">.</span>clear()  <span style="color:#75715e"># Empty dictionary {}</span>
</span></span></code></pre></div><h3 id="34-useful-dictionary-operations">3.4 Useful Dictionary Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;rent&#34;</span>: <span style="color:#ae81ff">1200</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;utilities&#34;</span>: <span style="color:#ae81ff">250</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;groceries&#34;</span>: <span style="color:#ae81ff">400</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;entertainment&#34;</span>: <span style="color:#ae81ff">150</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all keys</span>
</span></span><span style="display:flex;"><span>keys <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>keys()  <span style="color:#75715e"># dict_keys([&#39;rent&#39;, &#39;utilities&#39;, &#39;groceries&#39;, &#39;entertainment&#39;])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all values</span>
</span></span><span style="display:flex;"><span>values <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>values()  <span style="color:#75715e"># dict_values([1200, 250, 400, 150])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all key-value pairs as tuples</span>
</span></span><span style="display:flex;"><span>items <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>items()  <span style="color:#75715e"># dict_items([(&#39;rent&#39;, 1200), (&#39;utilities&#39;, 250), ...])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Iterating over a dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>key<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>expenses[key]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Better way to iterate over keys and values</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if key exists</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;rent&#34;</span> <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Rent is accounted for&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merging dictionaries (Python 3.9+)</span>
</span></span><span style="display:flex;"><span>monthly <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;rent&#34;</span>: <span style="color:#ae81ff">1200</span>, <span style="color:#e6db74">&#34;utilities&#34;</span>: <span style="color:#ae81ff">250</span>}
</span></span><span style="display:flex;"><span>occasional <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;repairs&#34;</span>: <span style="color:#ae81ff">100</span>, <span style="color:#e6db74">&#34;insurance&#34;</span>: <span style="color:#ae81ff">80</span>}
</span></span><span style="display:flex;"><span>all_expenses <span style="color:#f92672">=</span> monthly <span style="color:#f92672">|</span> occasional  <span style="color:#75715e"># Python 3.9+</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merging dictionaries (earlier versions)</span>
</span></span><span style="display:flex;"><span>all_expenses <span style="color:#f92672">=</span> {<span style="color:#f92672">**</span>monthly, <span style="color:#f92672">**</span>occasional}  <span style="color:#75715e"># Unpacking syntax</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dictionary comprehension</span>
</span></span><span style="display:flex;"><span>doubled_expenses <span style="color:#f92672">=</span> {k: v <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items()}
</span></span><span style="display:flex;"><span>large_expenses <span style="color:#f92672">=</span> {k: v <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items() <span style="color:#66d9ef">if</span> v <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">200</span>}
</span></span></code></pre></div><h3 id="35-nested-dictionaries">3.5 Nested Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Department budget by quarter and category</span>
</span></span><span style="display:flex;"><span>department_budget <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Finance&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q1&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">50000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">10000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">5000</span>},
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q2&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">52000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">8000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">6000</span>}
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;IT&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q1&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">60000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">20000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">3000</span>},
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q2&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">65000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">15000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">2000</span>}
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accessing nested values</span>
</span></span><span style="display:flex;"><span>finance_q1_salaries <span style="color:#f92672">=</span> department_budget[<span style="color:#e6db74">&#34;Finance&#34;</span>][<span style="color:#e6db74">&#34;Q1&#34;</span>][<span style="color:#e6db74">&#34;salaries&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Safely accessing nested values</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pprint  <span style="color:#75715e"># Pretty print module for better display of nested structures</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop through nested dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> dept, quarters <span style="color:#f92672">in</span> department_budget<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>dept<span style="color:#e6db74">}</span><span style="color:#e6db74"> Department:&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> quarter, categories <span style="color:#f92672">in</span> quarters<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;  </span><span style="color:#e6db74">{</span>quarter<span style="color:#e6db74">}</span><span style="color:#e6db74">:&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> categories<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;    </span><span style="color:#e6db74">{</span>category<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="4-sets">4. Sets</h2>
<p>Sets are unordered collections of unique elements. They&rsquo;re perfect for removing duplicates and performing mathematical set operations.</p>
<h3 id="41-creating-sets">4.1 Creating Sets</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty set (can&#39;t use {} as that creates an empty dictionary)</span>
</span></span><span style="display:flex;"><span>empty_set <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set with initial values</span>
</span></span><span style="display:flex;"><span>fruits <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;apple&#34;</span>, <span style="color:#e6db74">&#34;banana&#34;</span>, <span style="color:#e6db74">&#34;cherry&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating a set from a list (removes duplicates)</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> set([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>])  <span style="color:#75715e"># {1, 2, 3, 4, 5}</span>
</span></span><span style="display:flex;"><span>unique_chars <span style="color:#f92672">=</span> set(<span style="color:#e6db74">&#34;mississippi&#34;</span>)  <span style="color:#75715e"># {&#39;m&#39;, &#39;i&#39;, &#39;s&#39;, &#39;p&#39;}</span>
</span></span></code></pre></div><h3 id="42-set-operations">4.2 Set Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employees_dept_a <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Jess&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;David&#34;</span>}
</span></span><span style="display:flex;"><span>employees_dept_b <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;David&#34;</span>, <span style="color:#e6db74">&#34;Eve&#34;</span>, <span style="color:#e6db74">&#34;Frank&#34;</span>}
</span></span><span style="display:flex;"><span>candidates <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Eve&#34;</span>, <span style="color:#e6db74">&#34;Grace&#34;</span>, <span style="color:#e6db74">&#34;Heidi&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add and remove elements</span>
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>add(<span style="color:#e6db74">&#34;Grace&#34;</span>)
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#34;Bob&#34;</span>)  <span style="color:#75715e"># Raises KeyError if not found</span>
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>discard(<span style="color:#e6db74">&#34;Bob&#34;</span>)  <span style="color:#75715e"># No error if not found</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set operations</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Union (all employees)</span>
</span></span><span style="display:flex;"><span>all_employees <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">|</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>all_employees <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>union(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Intersection (employees in both departments)</span>
</span></span><span style="display:flex;"><span>in_both_depts <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">&amp;</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>in_both_depts <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>intersection(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Difference (employees in A but not in B)</span>
</span></span><span style="display:flex;"><span>only_in_a <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">-</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>only_in_a <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>difference(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Symmetric difference (employees in either dept but not both)</span>
</span></span><span style="display:flex;"><span>in_one_dept <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">^</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>in_one_dept <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>symmetric_difference(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Subset and superset</span>
</span></span><span style="display:flex;"><span>is_subset <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">&lt;=</span> employees_dept_b  <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>is_proper_subset <span style="color:#f92672">=</span> candidates <span style="color:#f92672">&lt;</span> all_employees  <span style="color:#75715e"># True (candidates is a proper subset of all_employees)</span>
</span></span></code></pre></div><h3 id="43-common-set-uses">4.3 Common Set Uses</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Removing duplicates from a list</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1001</span>, <span style="color:#ae81ff">1002</span>, <span style="color:#ae81ff">1001</span>, <span style="color:#ae81ff">1003</span>, <span style="color:#ae81ff">1002</span>, <span style="color:#ae81ff">1004</span>]
</span></span><span style="display:flex;"><span>unique_transactions <span style="color:#f92672">=</span> list(set(transactions))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Membership testing (very efficient for large datasets)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;Jess&#34;</span> <span style="color:#f92672">in</span> employees_dept_a:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Jess works in Department A&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding common elements</span>
</span></span><span style="display:flex;"><span>customer_ids <span style="color:#f92672">=</span> {<span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">105</span>}
</span></span><span style="display:flex;"><span>premium_ids <span style="color:#f92672">=</span> {<span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">106</span>}
</span></span><span style="display:flex;"><span>common_ids <span style="color:#f92672">=</span> customer_ids <span style="color:#f92672">&amp;</span> premium_ids
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set comprehensions</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> {x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>}  <span style="color:#75715e"># {0, 2, 4, 6, 8}</span>
</span></span></code></pre></div><hr>
<h2 id="5-choosing-the-right-data-structure">5. Choosing the Right Data Structure</h2>
<p>Selecting the appropriate data structure can make your code more efficient and readable. Here&rsquo;s a quick guide:</p>
<h3 id="51-when-to-use-each-structure">5.1 When to Use Each Structure</h3>
<p><strong>Use Lists when:</strong></p>
<ul>
<li>You need an ordered collection</li>
<li>Items might need to be changed, added, or removed</li>
<li>You need to store duplicate values</li>
<li>You need to maintain insertion order</li>
</ul>
<p><strong>Use Tuples when:</strong></p>
<ul>
<li>You have a fixed collection that shouldn&rsquo;t change</li>
<li>You want to return multiple values from a function</li>
<li>You need elements that can serve as dictionary keys</li>
<li>You want to ensure data integrity (immutability)</li>
</ul>
<p><strong>Use Dictionaries when:</strong></p>
<ul>
<li>You need key-value mapping (lookups by key)</li>
<li>You want fast lookups by a specific identifier</li>
<li>You&rsquo;re working with named attributes or properties</li>
<li>You need to count occurrences of items</li>
</ul>
<p><strong>Use Sets when:</strong></p>
<ul>
<li>You only care about unique values (no duplicates)</li>
<li>You need to perform set operations (union, intersection)</li>
<li>You want to quickly check if an item exists</li>
<li>You&rsquo;re removing duplicates from a collection</li>
</ul>
<h3 id="52-performance-considerations">5.2 Performance Considerations</h3>
<p>Data structure choice affects performance. In general:</p>
<ul>
<li><strong>Lists</strong>: O(1) for append/pop at end, O(n) for insert/delete elsewhere</li>
<li><strong>Dictionaries</strong>: O(1) average for key lookups, insertions, and deletions</li>
<li><strong>Sets</strong>: O(1) average for membership testing, adding, removing</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Example: Different approaches to counting word frequencies</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;to be or not to be that is the question&#34;</span>
</span></span><span style="display:flex;"><span>words <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using a list (inefficient for counting)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_list</span>(words):
</span></span><span style="display:flex;"><span>    counts <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> words:
</span></span><span style="display:flex;"><span>        found <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> counts:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> item[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> word:
</span></span><span style="display:flex;"><span>                item[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                found <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> found:
</span></span><span style="display:flex;"><span>            counts<span style="color:#f92672">.</span>append([word, <span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> counts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using a dictionary (efficient)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_dict</span>(words):
</span></span><span style="display:flex;"><span>    counts <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> words:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> word <span style="color:#f92672">in</span> counts:
</span></span><span style="display:flex;"><span>            counts[word] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            counts[word] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> counts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Even more concise with collections.Counter</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_counter</span>(words):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Counter(words)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compare results</span>
</span></span><span style="display:flex;"><span>print(count_with_list(words))
</span></span><span style="display:flex;"><span>print(count_with_dict(words))
</span></span><span style="display:flex;"><span>print(dict(count_with_counter(words)))
</span></span></code></pre></div><hr>
<h2 id="practice-exercise-financial-portfolio-tracker">Practice Exercise: Financial Portfolio Tracker</h2>
<p>Let&rsquo;s apply these data structures by creating a simple portfolio tracker:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">portfolio_tracker</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Initialise portfolio using a dictionary of dictionaries</span>
</span></span><span style="display:flex;"><span>    portfolio <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    transactions <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Portfolio Tracker&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;1. Add stock&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;2. Record transaction&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;3. View portfolio&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;4. View transaction history&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;5. Top holdings&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;6. Exit&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        choice <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter your choice (1-6): &#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;1&#34;</span>:
</span></span><span style="display:flex;"><span>            ticker <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter stock ticker symbol: &#34;</span>)<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>            company <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter company name: &#34;</span>)
</span></span><span style="display:flex;"><span>            sector <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter sector: &#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            portfolio[ticker] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;company&#34;</span>: company,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;sector&#34;</span>: sector,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;shares&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;cost_basis&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;current_price&#34;</span>: float(input(<span style="color:#e6db74">&#34;Enter current price: $&#34;</span>))
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Added </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> to portfolio.&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;2&#34;</span>:
</span></span><span style="display:flex;"><span>            ticker <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter stock ticker symbol: &#34;</span>)<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ticker <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error: </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> not in portfolio. Add it first.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            transaction_type <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Buy or sell? &#34;</span>)<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>            shares <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Number of shares: &#34;</span>))
</span></span><span style="display:flex;"><span>            price <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Price per share: $&#34;</span>))
</span></span><span style="display:flex;"><span>            date <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Date (YYYY-MM-DD): &#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Record transaction</span>
</span></span><span style="display:flex;"><span>            transaction <span style="color:#f92672">=</span> (date, ticker, transaction_type, shares, price)
</span></span><span style="display:flex;"><span>            transactions<span style="color:#f92672">.</span>append(transaction)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Update portfolio</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> transaction_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;buy&#34;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Calculate new cost basis</span>
</span></span><span style="display:flex;"><span>                current_shares <span style="color:#f92672">=</span> portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>]
</span></span><span style="display:flex;"><span>                current_basis <span style="color:#f92672">=</span> portfolio[ticker][<span style="color:#e6db74">&#34;cost_basis&#34;</span>]
</span></span><span style="display:flex;"><span>                new_shares <span style="color:#f92672">=</span> current_shares <span style="color:#f92672">+</span> shares
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> new_shares <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:  <span style="color:#75715e"># Avoid division by zero</span>
</span></span><span style="display:flex;"><span>                    new_basis <span style="color:#f92672">=</span> (current_shares <span style="color:#f92672">*</span> current_basis <span style="color:#f92672">+</span> shares <span style="color:#f92672">*</span> price) <span style="color:#f92672">/</span> new_shares
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                    new_basis <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">+=</span> shares
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;cost_basis&#34;</span>] <span style="color:#f92672">=</span> new_basis
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> transaction_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;sell&#34;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">&lt;</span> shares:
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">&#34;Error: Not enough shares.&#34;</span>)
</span></span><span style="display:flex;"><span>                    transactions<span style="color:#f92672">.</span>pop()  <span style="color:#75715e"># Remove the last transaction</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">-=</span> shares
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Transaction recorded. You now have </span><span style="color:#e6db74">{</span>portfolio[ticker][<span style="color:#e6db74">&#39;shares&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74"> shares of </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;3&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;Portfolio is empty.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Current Portfolio:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Company&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Sector&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Shares&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Cost Basis&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Current&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;9</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Value&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Gain/Loss&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            total_value <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> ticker, data <span style="color:#f92672">in</span> portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>                shares <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>]
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> shares <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:  <span style="color:#75715e"># Only show stocks we still own</span>
</span></span><span style="display:flex;"><span>                    cost_basis <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;cost_basis&#34;</span>]
</span></span><span style="display:flex;"><span>                    current <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;current_price&#34;</span>]
</span></span><span style="display:flex;"><span>                    value <span style="color:#f92672">=</span> shares <span style="color:#f92672">*</span> current
</span></span><span style="display:flex;"><span>                    gain_loss <span style="color:#f92672">=</span> value <span style="color:#f92672">-</span> (shares <span style="color:#f92672">*</span> cost_basis)
</span></span><span style="display:flex;"><span>                    
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>data[<span style="color:#e6db74">&#39;company&#39;</span>][:<span style="color:#ae81ff">20</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>data[<span style="color:#e6db74">&#39;sector&#39;</span>][:<span style="color:#ae81ff">15</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>shares<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>cost_basis<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>current<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;7.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>gain_loss<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>                    total_value <span style="color:#f92672">+=</span> value
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Portfolio Value: $</span><span style="color:#e6db74">{</span>total_value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;4&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> transactions:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;No transactions recorded.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Transaction History:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Date&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Type&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Shares&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Price&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Total&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">55</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> date, ticker, trans_type, shares, price <span style="color:#f92672">in</span> transactions:
</span></span><span style="display:flex;"><span>                total <span style="color:#f92672">=</span> shares <span style="color:#f92672">*</span> price
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>date<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>trans_type<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>shares<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>price<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;5&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;Portfolio is empty.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Use a list to sort holdings by value</span>
</span></span><span style="display:flex;"><span>            holdings <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> ticker, data <span style="color:#f92672">in</span> portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    value <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">*</span> data[<span style="color:#e6db74">&#34;current_price&#34;</span>]
</span></span><span style="display:flex;"><span>                    holdings<span style="color:#f92672">.</span>append((ticker, data[<span style="color:#e6db74">&#34;company&#34;</span>], value))
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Sort by value (descending)</span>
</span></span><span style="display:flex;"><span>            holdings<span style="color:#f92672">.</span>sort(key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">2</span>], reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Top Holdings:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Rank&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;5</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Company&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Value&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">45</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> i, (ticker, company, value) <span style="color:#f92672">in</span> enumerate(holdings[:<span style="color:#ae81ff">5</span>], <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;5</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>company[:<span style="color:#ae81ff">20</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;6&#34;</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Thank you for using Portfolio Tracker!&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Invalid choice. Please try again.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run the application</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    portfolio_tracker()
</span></span></code></pre></div><p>This example demonstrates:</p>
<ul>
<li>Dictionaries for storing portfolio data</li>
<li>Lists for transaction history</li>
<li>Tuples for individual transactions</li>
<li>Sorting and filtering data</li>
<li>Calculating values based on stored data</li>
</ul>
<hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we&rsquo;ve covered Python&rsquo;s core data structures, the next post will explore functions, modules, and file I/O—essential tools for organising your code and working with external data.</p>
<p>Stay tuned for Post 5: Functions, Modules &amp; File I/O!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please reach out.</em></p>
]]></content:encoded></item></channel></rss>