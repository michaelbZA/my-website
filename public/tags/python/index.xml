<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on Michael Brunger</title><link>https://michaelbrunger.com/tags/python/</link><description>Recent content in Python on Michael Brunger</description><image><title>Michael Brunger</title><url>https://michaelbrunger.com/site-feature-image.jpg</url><link>https://michaelbrunger.com/site-feature-image.jpg</link></image><generator>Hugo -- 0.146.7</generator><language>en-GB</language><lastBuildDate>Tue, 20 May 2025 10:17:00 +0100</lastBuildDate><atom:link href="https://michaelbrunger.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 17: Next Steps &amp; Advanced Python Topics</title><link>https://michaelbrunger.com/python-next-steps-advanced-topics/</link><pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-next-steps-advanced-topics/</guid><description>Explore advanced Python topics including concurrency, asyncio, and complete an end-to-end project. Discover resources for further learning and tips for continuing your Python journey.</description><content:encoded><![CDATA[<h1 id="next-steps--advanced-python-topics">Next Steps &amp; Advanced Python Topics</h1>
<p>Welcome to the final post in our Python beginner series! If you&rsquo;ve made it this far, congratulationsâ€”you&rsquo;ve built a solid foundation in Python programming. In this post, we&rsquo;ll explore some advanced topics and provide guidance on where to go next in your Python journey, with a particular focus on financial applications.</p>
<h2 id="concurrency--asynchronous-programming">Concurrency &amp; Asynchronous Programming</h2>
<p>As your Python programs grow more complex, especially when dealing with financial data processing or automation, you&rsquo;ll need to understand how to make your code run faster and more efficiently.</p>
<h3 id="threading-vs-multiprocessing">Threading vs. Multiprocessing</h3>
<p>Python offers several options for concurrent programming:</p>
<h4 id="threading-threading-module">Threading (<code>threading</code> module)</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> threading
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">download_financial_data</span>(ticker):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Downloading data for </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">...&#34;</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">2</span>)  <span style="color:#75715e"># Simulating network delay</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Download complete for </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create threads for different stock tickers</span>
</span></span><span style="display:flex;"><span>threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ticker <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#34;AAPL&#34;</span>, <span style="color:#e6db74">&#34;MSFT&#34;</span>, <span style="color:#e6db74">&#34;GOOGL&#34;</span>, <span style="color:#e6db74">&#34;AMZN&#34;</span>]:
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>download_financial_data, args<span style="color:#f92672">=</span>(ticker,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Wait for all threads to complete</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;All financial data downloaded&#34;</span>)
</span></span></code></pre></div><p><strong>When to use threading:</strong></p>
<ul>
<li>I/O-bound tasks (waiting for network responses, file operations)</li>
<li>When you need to keep the UI responsive</li>
<li>For tasks that spend time waiting rather than computing</li>
</ul>
<p><strong>Limitations:</strong> Due to Python&rsquo;s Global Interpreter Lock (GIL), threads can&rsquo;t execute Python code in parallel, limiting CPU-bound performance gains.</p>
<h4 id="multiprocessing-multiprocessing-module">Multiprocessing (<code>multiprocessing</code> module)</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> multiprocessing
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">analyze_financial_data</span>(ticker):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Analyzing data for </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">...&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># CPU-intensive calculations</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10000000</span>):  <span style="color:#75715e"># Simulate complex calculation</span>
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Analysis complete for </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>result<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create processes for different stock tickers</span>
</span></span><span style="display:flex;"><span>    pool <span style="color:#f92672">=</span> multiprocessing<span style="color:#f92672">.</span>Pool(processes<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)  <span style="color:#75715e"># Use 4 CPU cores</span>
</span></span><span style="display:flex;"><span>    tickers <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;AAPL&#34;</span>, <span style="color:#e6db74">&#34;MSFT&#34;</span>, <span style="color:#e6db74">&#34;GOOGL&#34;</span>, <span style="color:#e6db74">&#34;AMZN&#34;</span>]
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> pool<span style="color:#f92672">.</span>map(analyze_financial_data, tickers)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    pool<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>    pool<span style="color:#f92672">.</span>join()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;All analyses complete. Results: </span><span style="color:#e6db74">{</span>results<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p><strong>When to use multiprocessing:</strong></p>
<ul>
<li>CPU-bound tasks (complex calculations, portfolio optimizations)</li>
<li>When you need true parallelism across CPU cores</li>
<li>For tasks that need to bypass the GIL</li>
</ul>
<p><strong>Considerations:</strong> Processes have more overhead than threads and don&rsquo;t share memory by default.</p>
<h3 id="asynchronous-programming-with-asyncio">Asynchronous Programming with <code>asyncio</code></h3>
<p>For modern Python concurrency, especially in financial applications handling many simultaneous connections to data providers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> asyncio
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">async</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fetch_stock_price</span>(ticker):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Fetching </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">...&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">await</span> asyncio<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">2</span>)  <span style="color:#75715e"># Simulating API call</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># In reality, you might use aiohttp to fetch data</span>
</span></span><span style="display:flex;"><span>    price <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;AAPL&#34;</span>: <span style="color:#ae81ff">182.63</span>, <span style="color:#e6db74">&#34;MSFT&#34;</span>: <span style="color:#ae81ff">425.27</span>, <span style="color:#e6db74">&#34;GOOGL&#34;</span>: <span style="color:#ae81ff">175.98</span>}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> {ticker: price<span style="color:#f92672">.</span>get(ticker, <span style="color:#ae81ff">0</span>)}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">async</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Run multiple API calls concurrently</span>
</span></span><span style="display:flex;"><span>    tasks <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        fetch_stock_price(<span style="color:#e6db74">&#34;AAPL&#34;</span>),
</span></span><span style="display:flex;"><span>        fetch_stock_price(<span style="color:#e6db74">&#34;MSFT&#34;</span>),
</span></span><span style="display:flex;"><span>        fetch_stock_price(<span style="color:#e6db74">&#34;GOOGL&#34;</span>)
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    results <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> asyncio<span style="color:#f92672">.</span>gather(<span style="color:#f92672">*</span>tasks)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    end <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Results: </span><span style="color:#e6db74">{</span>results<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Time taken: </span><span style="color:#e6db74">{</span>end <span style="color:#f92672">-</span> start<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> seconds&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Python 3.7+</span>
</span></span><span style="display:flex;"><span>asyncio<span style="color:#f92672">.</span>run(main())
</span></span></code></pre></div><p><strong>Benefits for financial applications:</strong></p>
<ul>
<li>Handle thousands of concurrent connections with minimal resources</li>
<li>Perfect for real-time market data feeds and trading systems</li>
<li>More efficient than threading for I/O-bound operations</li>
</ul>
<h2 id="end-to-end-financial-mini-projects">End-to-End Financial Mini Projects</h2>
<p>Now let&rsquo;s look at some project ideas that combine everything you&rsquo;ve learned:</p>
<h3 id="1-personal-finance-dashboard">1. Personal Finance Dashboard</h3>
<p>Build a web application that helps track personal finances:</p>
<ul>
<li><strong>Backend:</strong> Flask or Django for API endpoints</li>
<li><strong>Database:</strong> SQLite or PostgreSQL to store transactions</li>
<li><strong>Data Analysis:</strong> pandas for trend analysis and category breakdowns</li>
<li><strong>Visualization:</strong> Matplotlib or Plotly for spending charts</li>
<li><strong>Frontend:</strong> Basic HTML/CSS with JavaScript or a simple Tkinter desktop app</li>
<li><strong>Features:</strong>
<ul>
<li>Transaction importing from CSV bank statements</li>
<li>Budget tracking and alerts</li>
<li>Monthly spending reports</li>
<li>Investment performance tracking</li>
</ul>
</li>
</ul>
<h3 id="2-stock-portfolio-analyzer">2. Stock Portfolio Analyzer</h3>
<p>Create a tool to analyze investment portfolios:</p>
<ul>
<li><strong>Data Source:</strong> Yahoo Finance API or Alpha Vantage (use <code>requests</code> or <code>aiohttp</code>)</li>
<li><strong>Analysis:</strong> Calculate risk metrics (beta, Sharpe ratio, etc.) with NumPy</li>
<li><strong>Visualization:</strong> Interactive charts with Plotly</li>
<li><strong>Optimization:</strong> Monte Carlo simulations for portfolio optimization</li>
<li><strong>Testing:</strong> Unit tests for financial calculations</li>
<li><strong>Documentation:</strong> Proper docstrings and a user guide</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Sample snippet for a portfolio analyzer</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> yfinance <span style="color:#66d9ef">as</span> yf
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get historical data</span>
</span></span><span style="display:flex;"><span>tickers <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;AAPL&#34;</span>, <span style="color:#e6db74">&#34;MSFT&#34;</span>, <span style="color:#e6db74">&#34;GOOGL&#34;</span>, <span style="color:#e6db74">&#34;BRK-B&#34;</span>, <span style="color:#e6db74">&#34;JPM&#34;</span>]
</span></span><span style="display:flex;"><span>start_date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2020-01-01&#34;</span>
</span></span><span style="display:flex;"><span>end_date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2023-01-01&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Download data</span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>download(tickers, start<span style="color:#f92672">=</span>start_date, end<span style="color:#f92672">=</span>end_date)[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate returns</span>
</span></span><span style="display:flex;"><span>returns <span style="color:#f92672">=</span> data<span style="color:#f92672">.</span>pct_change()<span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate portfolio metrics</span>
</span></span><span style="display:flex;"><span>mean_returns <span style="color:#f92672">=</span> returns<span style="color:#f92672">.</span>mean() <span style="color:#f92672">*</span> <span style="color:#ae81ff">252</span>  <span style="color:#75715e"># Annualized returns</span>
</span></span><span style="display:flex;"><span>cov_matrix <span style="color:#f92672">=</span> returns<span style="color:#f92672">.</span>cov() <span style="color:#f92672">*</span> <span style="color:#ae81ff">252</span>     <span style="color:#75715e"># Annualized covariance</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate random portfolio weights</span>
</span></span><span style="display:flex;"><span>num_portfolios <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>results <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((<span style="color:#ae81ff">3</span>, num_portfolios))
</span></span><span style="display:flex;"><span>weights_record <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_portfolios):
</span></span><span style="display:flex;"><span>    weights <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>random(len(tickers))
</span></span><span style="display:flex;"><span>    weights <span style="color:#f92672">/=</span> np<span style="color:#f92672">.</span>sum(weights)
</span></span><span style="display:flex;"><span>    weights_record<span style="color:#f92672">.</span>append(weights)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Portfolio return</span>
</span></span><span style="display:flex;"><span>    portfolio_return <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>sum(weights <span style="color:#f92672">*</span> mean_returns)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Portfolio volatility</span>
</span></span><span style="display:flex;"><span>    portfolio_stddev <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>sqrt(np<span style="color:#f92672">.</span>dot(weights<span style="color:#f92672">.</span>T, np<span style="color:#f92672">.</span>dot(cov_matrix, weights)))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Sharpe ratio (assuming risk-free rate of 0 for simplicity)</span>
</span></span><span style="display:flex;"><span>    sharpe_ratio <span style="color:#f92672">=</span> portfolio_return <span style="color:#f92672">/</span> portfolio_stddev
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    results[<span style="color:#ae81ff">0</span>,i] <span style="color:#f92672">=</span> portfolio_return
</span></span><span style="display:flex;"><span>    results[<span style="color:#ae81ff">1</span>,i] <span style="color:#f92672">=</span> portfolio_stddev
</span></span><span style="display:flex;"><span>    results[<span style="color:#ae81ff">2</span>,i] <span style="color:#f92672">=</span> sharpe_ratio
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find the optimal portfolio</span>
</span></span><span style="display:flex;"><span>max_sharpe_idx <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>argmax(results[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>optimal_weights <span style="color:#f92672">=</span> weights_record[max_sharpe_idx]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Optimal Portfolio Allocation:&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ticker, weight <span style="color:#f92672">in</span> zip(tickers, optimal_weights):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>weight<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Expected Annual Return: </span><span style="color:#e6db74">{</span>results[<span style="color:#ae81ff">0</span>,max_sharpe_idx]<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Expected Volatility: </span><span style="color:#e6db74">{</span>results[<span style="color:#ae81ff">1</span>,max_sharpe_idx]<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Sharpe Ratio: </span><span style="color:#e6db74">{</span>results[<span style="color:#ae81ff">2</span>,max_sharpe_idx]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="3-financial-statement-analyzer">3. Financial Statement Analyzer</h3>
<p>Build a tool for analyzing company financial statements:</p>
<ul>
<li><strong>Data Gathering:</strong> Web scraping SEC filings with BeautifulSoup</li>
<li><strong>Data Storage:</strong> Structured storage in SQLite/pandas</li>
<li><strong>Analysis:</strong> Ratio calculations and trend analysis</li>
<li><strong>Reporting:</strong> Automated PDF reports with ReportLab</li>
<li><strong>Future Enhancement:</strong> Sentiment analysis on earnings call transcripts</li>
</ul>
<h2 id="learning-resources">Learning Resources</h2>
<h3 id="books">Books</h3>
<ol>
<li>
<p><strong>&ldquo;Python for Finance&rdquo; by Yves Hilpisch</strong></p>
<ul>
<li>Advanced quantitative finance with Python</li>
<li>Derivatives pricing, risk management, and algorithmic trading</li>
</ul>
</li>
<li>
<p><strong>&ldquo;Fluent Python&rdquo; by Luciano Ramalho</strong></p>
<ul>
<li>Deep dive into Python&rsquo;s internals</li>
<li>Advanced language features and best practices</li>
</ul>
</li>
<li>
<p><strong>&ldquo;Effective Python&rdquo; by Brett Slatkin</strong></p>
<ul>
<li>90 specific ways to write better Python code</li>
<li>Practical advice for clean, efficient coding</li>
</ul>
</li>
</ol>
<h3 id="online-courses">Online Courses</h3>
<ol>
<li>
<p><strong>Coursera: &ldquo;Python for Financial Analysis and Algorithmic Trading&rdquo;</strong></p>
<ul>
<li>Financial time series analysis</li>
<li>Algorithmic trading strategies implementation</li>
</ul>
</li>
<li>
<p><strong>edX: &ldquo;Introduction to Computational Finance and Financial Econometrics&rdquo;</strong></p>
<ul>
<li>Statistical models for financial analysis</li>
<li>Risk assessment techniques</li>
</ul>
</li>
<li>
<p><strong>DataCamp: &ldquo;Python for Finance&rdquo; Track</strong></p>
<ul>
<li>Importing and managing financial data</li>
<li>Time series analysis and visualization</li>
</ul>
</li>
</ol>
<h3 id="blogs-and-websites">Blogs and Websites</h3>
<ol>
<li>
<p><strong>Towards Data Science</strong> (Medium)</p>
<ul>
<li>Regular articles on Python for finance and data science</li>
</ul>
</li>
<li>
<p><strong>PyCoders Weekly</strong></p>
<ul>
<li>Newsletter with latest Python news and packages</li>
</ul>
</li>
<li>
<p><strong>Planet Python</strong></p>
<ul>
<li>Aggregator of Python blogs</li>
</ul>
</li>
<li>
<p><strong>Real Python</strong></p>
<ul>
<li>In-depth tutorials and articles</li>
</ul>
</li>
</ol>
<h3 id="github-repositories-to-follow">GitHub Repositories to Follow</h3>
<ol>
<li><strong>pandas-dev/pandas</strong></li>
<li><strong>PyData ecosystem projects</strong></li>
<li><strong>quantopian/zipline</strong> (algorithmic trading library)</li>
<li><strong>hudson-and-thames/mlfinlab</strong> (machine learning for finance)</li>
</ol>
<h2 id="community-engagement">Community Engagement</h2>
<p>Getting involved in the Python community is one of the best ways to continue learning:</p>
<ol>
<li><strong>Attend PyCon or PyData conferences</strong> (many have financial tracks)</li>
<li><strong>Join local Python meetup groups</strong></li>
<li><strong>Participate in open source projects</strong></li>
<li><strong>Share your knowledge through blogs or talks</strong></li>
</ol>
<h2 id="advanced-topics-to-explore-next">Advanced Topics to Explore Next</h2>
<p>As you continue your Python journey, consider exploring these advanced topics with financial applications:</p>
<h3 id="1-machine-learning-for-finance">1. Machine Learning for Finance</h3>
<ul>
<li><strong>Scikit-learn</strong> for predictive models (default prediction, credit scoring)</li>
<li><strong>TensorFlow/PyTorch</strong> for deep learning (market prediction, algorithmic trading)</li>
<li><strong>Financial time series forecasting</strong> with ARIMA, GARCH, and RNNs</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Simple example of a credit risk classifier</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.ensemble <span style="color:#f92672">import</span> RandomForestClassifier
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.model_selection <span style="color:#f92672">import</span> train_test_split
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.metrics <span style="color:#f92672">import</span> classification_report
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Load credit data (you&#39;d replace this with your own dataset)</span>
</span></span><span style="display:flex;"><span>credit_data <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;credit_data.csv&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Features and target</span>
</span></span><span style="display:flex;"><span>X <span style="color:#f92672">=</span> credit_data<span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#39;default&#39;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> credit_data[<span style="color:#e6db74">&#39;default&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Split data</span>
</span></span><span style="display:flex;"><span>X_train, X_test, y_train, y_test <span style="color:#f92672">=</span> train_test_split(
</span></span><span style="display:flex;"><span>    X, y, test_size<span style="color:#f92672">=</span><span style="color:#ae81ff">0.2</span>, random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Train model</span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> RandomForestClassifier(n_estimators<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>model<span style="color:#f92672">.</span>fit(X_train, y_train)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Evaluate</span>
</span></span><span style="display:flex;"><span>y_pred <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>predict(X_test)
</span></span><span style="display:flex;"><span>print(classification_report(y_test, y_pred))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Feature importance for interpretability</span>
</span></span><span style="display:flex;"><span>importances <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>feature_importances_
</span></span><span style="display:flex;"><span>features <span style="color:#f92672">=</span> X<span style="color:#f92672">.</span>columns
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> feature, importance <span style="color:#f92672">in</span> sorted(zip(features, importances), 
</span></span><span style="display:flex;"><span>                                  key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>feature<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>importance<span style="color:#e6db74">:</span><span style="color:#e6db74">.4f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="2-cloud-deployment">2. Cloud Deployment</h3>
<ul>
<li><strong>AWS Lambda</strong> for serverless financial calculations</li>
<li><strong>Google Cloud Run</strong> for containerized financial applications</li>
<li><strong>Azure Functions</strong> for event-driven financial processing</li>
</ul>
<h3 id="3-big-data-processing">3. Big Data Processing</h3>
<ul>
<li><strong>Apache Spark with PySpark</strong> for distributed financial data processing</li>
<li><strong>Dask</strong> for parallel computing with pandas-like API</li>
<li><strong>Handling and analyzing terabytes</strong> of market data efficiently</li>
</ul>
<h3 id="4-natural-language-processing-for-finance">4. Natural Language Processing for Finance</h3>
<ul>
<li><strong>Sentiment analysis</strong> on financial news and earnings calls</li>
<li><strong>Named entity recognition</strong> for financial document processing</li>
<li><strong>Summarization</strong> of lengthy financial reports</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>You&rsquo;ve come a long way from your first &ldquo;Hello, World!&rdquo; program to understanding advanced Python concepts. Remember that programming is a journey of continuous learningâ€”there&rsquo;s always something new to discover and master.</p>
<p>The financial industry is increasingly embracing Python for everything from data analysis to algorithmic trading. The skills you&rsquo;ve developed in this series provide a strong foundation, but the most valuable skill is knowing how to learn and adapt as both Python and finance evolve.</p>
<p>Keep building projects, participating in the community, and pushing your boundaries. The combination of finance expertise and Python programming skills is incredibly powerful and will serve you well throughout your career.</p>
<p>Happy coding, and I look forward to seeing what you build next!</p>
]]></content:encoded></item><item><title>Part 16: Building Simple GUI Applications with Tkinter</title><link>https://michaelbrunger.com/simple-gui-applications-tkinter/</link><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/simple-gui-applications-tkinter/</guid><description>Create desktop applications with Python&amp;#39;s built-in Tkinter library. Learn about widgets, layout managers, and build a practical mini-project with a graphical user interface.</description><content:encoded><![CDATA[<h1 id="building-simple-gui-applications-with-tkinter">Building Simple GUI Applications with Tkinter</h1>
<p><em>Part 16 of my Learning Python in Public series</em></p>
<p>As a finance professional diving into programming, I&rsquo;ve realized that data analysis is only half the battle. Sometimes you need to package your calculations into user-friendly applications that colleagues can use without knowing Python. That&rsquo;s where GUI (Graphical User Interface) programming comes in, and Python makes this surprisingly accessible with Tkinter.</p>
<h2 id="what-is-tkinter">What is Tkinter?</h2>
<p>Tkinter (pronounced &ldquo;tee-kay-inter&rdquo;) is Python&rsquo;s standard GUI framework that comes bundled with your Python installation. No extra pip installs needed! It&rsquo;s based on the Tk toolkit, which has been around since the 1990s. While not the most modern-looking framework, it&rsquo;s:</p>
<ul>
<li>Built-in and instantly available</li>
<li>Relatively easy to learn</li>
<li>Cross-platform (Windows, macOS, Linux)</li>
<li>Perfect for internal tools and prototypes</li>
</ul>
<h2 id="setting-up-your-first-tkinter-application">Setting Up Your First Tkinter Application</h2>
<p>Let&rsquo;s start with the absolute basics. Every Tkinter application follows a similar structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the main window</span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;My First Tkinter App&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;400x300&#34;</span>)  <span style="color:#75715e"># Width x Height</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add widgets here...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start the event loop</span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>If you run this code, you&rsquo;ll see a small, empty window appear. Let&rsquo;s break down what&rsquo;s happening:</p>
<ol>
<li>We import <code>tkinter</code> and alias it as <code>tk</code> (standard practice)</li>
<li>We create a main window (called <code>root</code> by convention)</li>
<li>We set a title and dimensions</li>
<li><code>mainloop()</code> starts the event loop that listens for user interactions</li>
</ol>
<p>Nothing fancy yet, but you&rsquo;ve already created your first GUI application!</p>
<h2 id="core-tkinter-widgets">Core Tkinter Widgets</h2>
<p>Tkinter provides a set of basic widgets (UI elements) you can add to your application:</p>
<ul>
<li><strong>Label</strong>: Displays text or images</li>
<li><strong>Button</strong>: Clickable element that triggers actions</li>
<li><strong>Entry</strong>: Single-line text input field</li>
<li><strong>Text</strong>: Multi-line text input area</li>
<li><strong>Frame</strong>: Container for organizing other widgets</li>
<li><strong>Checkbutton</strong>: On/off toggle</li>
<li><strong>Radiobutton</strong>: One-of-many selection</li>
<li><strong>Listbox</strong>: List of selectable items</li>
<li><strong>Combobox</strong>: Dropdown selection (from ttk submodule)</li>
</ul>
<p>Let&rsquo;s add a few of these to our window:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Finance Calculator&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;400x300&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)  <span style="color:#75715e"># Add some padding</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a label</span>
</span></span><span style="display:flex;"><span>header <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Investment Calculator&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))
</span></span><span style="display:flex;"><span>header<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an entry field with a label</span>
</span></span><span style="display:flex;"><span>amount_frame <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Frame(root)
</span></span><span style="display:flex;"><span>amount_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>amount_label <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Label(amount_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Initial Investment ($):&#34;</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, anchor<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>)
</span></span><span style="display:flex;"><span>amount_label<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;left&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>amount_entry <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(amount_frame)
</span></span><span style="display:flex;"><span>amount_entry<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;left&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x&#34;</span>)
</span></span><span style="display:flex;"><span>amount_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;1000&#34;</span>)  <span style="color:#75715e"># Default value</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add a button</span>
</span></span><span style="display:flex;"><span>calculate_button <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Calculate Returns&#34;</span>)
</span></span><span style="display:flex;"><span>calculate_button<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>Now we&rsquo;re getting somewhere! This code creates:</p>
<ul>
<li>A header label with larger, bold text</li>
<li>A frame containing a label and entry field side-by-side</li>
<li>A button (which doesn&rsquo;t do anything yet)</li>
</ul>
<h2 id="layout-management">Layout Management</h2>
<p>You may have noticed I used <code>.pack()</code> to position the widgets. This is one of three layout managers in Tkinter:</p>
<h3 id="1-pack">1. Pack</h3>
<p>The simplest layout manager. It packs widgets one after another, either vertically (default) or horizontally.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>widget<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;top&#34;</span>)  <span style="color:#75715e"># Options: &#34;top&#34;, &#34;bottom&#34;, &#34;left&#34;, &#34;right&#34;</span>
</span></span></code></pre></div><p>Useful options:</p>
<ul>
<li><code>fill</code>: Can be &ldquo;x&rdquo;, &ldquo;y&rdquo;, or &ldquo;both&rdquo; to make the widget expand</li>
<li><code>expand</code>: Boolean that determines if the widget should claim extra space</li>
<li><code>padx</code>, <code>pady</code>: Add external padding around the widget</li>
</ul>
<h3 id="2-grid">2. Grid</h3>
<p>More flexible, allows positioning in a table-like grid:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>widget<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span></code></pre></div><p>Useful options:</p>
<ul>
<li><code>rowspan</code>, <code>columnspan</code>: Make a widget span multiple cells</li>
<li><code>sticky</code>: Align widget within its cell (&ldquo;n&rdquo;, &ldquo;s&rdquo;, &ldquo;e&rdquo;, &ldquo;w&rdquo; or combinations)</li>
<li><code>padx</code>, <code>pady</code>: Add padding around the widget</li>
</ul>
<h3 id="3-place">3. Place</h3>
<p>Gives absolute positioning control:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>widget<span style="color:#f92672">.</span>place(x<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, height<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span></code></pre></div><p>Most Tkinter applications use either pack or grid. Let&rsquo;s rewrite our example using grid:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Finance Calculator&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;500x400&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Header</span>
</span></span><span style="display:flex;"><span>header <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Investment Calculator&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))
</span></span><span style="display:flex;"><span>header<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Initial Investment</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Initial Investment ($):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>initial_investment <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>initial_investment<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>initial_investment<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;1000&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Annual Contribution</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Annual Contribution ($):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>annual_contribution <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>annual_contribution<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>annual_contribution<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;0&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Interest Rate</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Expected Return (%):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>interest_rate <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>interest_rate<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>interest_rate<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;7&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Time Period</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Years:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>years <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>years<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>years<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;10&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate Button</span>
</span></span><span style="display:flex;"><span>calculate_button <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Calculate Returns&#34;</span>)
</span></span><span style="display:flex;"><span>calculate_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Results Label</span>
</span></span><span style="display:flex;"><span>result_label <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Future Value: $0.00&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">12</span>))
</span></span><span style="display:flex;"><span>result_label<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">6</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Configure grid columns to resize</span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">1</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>This creates a more structured form with labels on the left and entry fields on the right.</p>
<h2 id="adding-functionality-with-event-handlers">Adding Functionality with Event Handlers</h2>
<p>Now let&rsquo;s make our calculator actually do something when you click the button. We&rsquo;ll add an event handler:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> tkinter <span style="color:#f92672">import</span> messagebox
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> locale
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set locale for currency formatting</span>
</span></span><span style="display:flex;"><span>locale<span style="color:#f92672">.</span>setlocale(locale<span style="color:#f92672">.</span>LC_ALL, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_investment</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get values from entry fields</span>
</span></span><span style="display:flex;"><span>        initial <span style="color:#f92672">=</span> float(initial_investment<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>        annual <span style="color:#f92672">=</span> float(annual_contribution<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>        rate <span style="color:#f92672">=</span> float(interest_rate<span style="color:#f92672">.</span>get()) <span style="color:#f92672">/</span> <span style="color:#ae81ff">100</span>  <span style="color:#75715e"># Convert percentage to decimal</span>
</span></span><span style="display:flex;"><span>        time <span style="color:#f92672">=</span> int(years<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Calculate compound interest with annual additions</span>
</span></span><span style="display:flex;"><span>        future_value <span style="color:#f92672">=</span> initial <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> rate) <span style="color:#f92672">**</span> time
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add effect of annual contributions</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> annual <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> rate <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            future_value <span style="color:#f92672">+=</span> annual <span style="color:#f92672">*</span> ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> rate) <span style="color:#f92672">**</span> time <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> rate
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update result label with formatted currency</span>
</span></span><span style="display:flex;"><span>        formatted_value <span style="color:#f92672">=</span> locale<span style="color:#f92672">.</span>currency(future_value, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        result_label<span style="color:#f92672">.</span>config(text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Future Value: </span><span style="color:#e6db74">{</span>formatted_value<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create detailed breakdown</span>
</span></span><span style="display:flex;"><span>        show_breakdown(initial, annual, rate, time, future_value)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>        messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter valid numbers in all fields&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_breakdown</span>(initial, annual, rate, time, final):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create a new window for the breakdown</span>
</span></span><span style="display:flex;"><span>    breakdown <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Toplevel(root)
</span></span><span style="display:flex;"><span>    breakdown<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Investment Breakdown&#34;</span>)
</span></span><span style="display:flex;"><span>    breakdown<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;400x300&#34;</span>)
</span></span><span style="display:flex;"><span>    breakdown<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add a heading</span>
</span></span><span style="display:flex;"><span>    tk<span style="color:#f92672">.</span>Label(breakdown, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Year-by-Year Breakdown&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">12</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create text widget for the breakdown</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Text(breakdown, width<span style="color:#f92672">=</span><span style="color:#ae81ff">40</span>, height<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>    text<span style="color:#f92672">.</span>pack(expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add scrollbar</span>
</span></span><span style="display:flex;"><span>    scrollbar <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Scrollbar(text)
</span></span><span style="display:flex;"><span>    scrollbar<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;right&#34;</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;y&#34;</span>)
</span></span><span style="display:flex;"><span>    text<span style="color:#f92672">.</span>config(yscrollcommand<span style="color:#f92672">=</span>scrollbar<span style="color:#f92672">.</span>set)
</span></span><span style="display:flex;"><span>    scrollbar<span style="color:#f92672">.</span>config(command<span style="color:#f92672">=</span>text<span style="color:#f92672">.</span>yview)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Insert header</span>
</span></span><span style="display:flex;"><span>    text<span style="color:#f92672">.</span>insert(<span style="color:#e6db74">&#34;end&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Year&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}{</span><span style="color:#e6db74">&#39;Balance&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}{</span><span style="color:#e6db74">&#39;Interest&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}{</span><span style="color:#e6db74">&#39;Total&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    text<span style="color:#f92672">.</span>insert(<span style="color:#e6db74">&#34;end&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">50</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate and insert year-by-year breakdown</span>
</span></span><span style="display:flex;"><span>    current_value <span style="color:#f92672">=</span> initial
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> year <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, time <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        interest <span style="color:#f92672">=</span> current_value <span style="color:#f92672">*</span> rate
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> year <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:  <span style="color:#75715e"># Add annual contribution except for first year</span>
</span></span><span style="display:flex;"><span>            current_value <span style="color:#f92672">+=</span> annual
</span></span><span style="display:flex;"><span>        current_value <span style="color:#f92672">+=</span> interest
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        text<span style="color:#f92672">.</span>insert(<span style="color:#e6db74">&#34;end&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>year<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}{</span>locale<span style="color:#f92672">.</span>currency(current_value <span style="color:#f92672">-</span> interest, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        text<span style="color:#f92672">.</span>insert(<span style="color:#e6db74">&#34;end&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>locale<span style="color:#f92672">.</span>currency(interest, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}{</span>locale<span style="color:#f92672">.</span>currency(current_value, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Make text widget read-only</span>
</span></span><span style="display:flex;"><span>    text<span style="color:#f92672">.</span>config(state<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;disabled&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Investment Calculator&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;500x400&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Header</span>
</span></span><span style="display:flex;"><span>header <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Investment Calculator&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))
</span></span><span style="display:flex;"><span>header<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Initial Investment</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Initial Investment ($):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>initial_investment <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>initial_investment<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>initial_investment<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;1000&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Annual Contribution</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Annual Contribution ($):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>annual_contribution <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>annual_contribution<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>annual_contribution<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;0&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Interest Rate</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Expected Return (%):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>interest_rate <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>interest_rate<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>interest_rate<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;7&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Time Period</span>
</span></span><span style="display:flex;"><span>tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Years:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>years <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Entry(root)
</span></span><span style="display:flex;"><span>years<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>years<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;10&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate Button</span>
</span></span><span style="display:flex;"><span>calculate_button <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Calculate Returns&#34;</span>, command<span style="color:#f92672">=</span>calculate_investment)
</span></span><span style="display:flex;"><span>calculate_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Results Label</span>
</span></span><span style="display:flex;"><span>result_label <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Future Value: $0.00&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">12</span>))
</span></span><span style="display:flex;"><span>result_label<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">6</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Configure grid columns to resize</span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">1</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>Now we&rsquo;ve added:</p>
<ol>
<li>A <code>calculate_investment()</code> function that runs when the button is clicked</li>
<li>Input validation with error handling</li>
<li>A detailed year-by-year breakdown in a separate window</li>
<li>Connected the button to the function using the <code>command</code> parameter</li>
</ol>
<h2 id="styling-and-polish">Styling and Polish</h2>
<p>Tkinter&rsquo;s default appearance is&hellip; functional, but not particularly attractive. Let&rsquo;s add some styling:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> tkinter <span style="color:#f92672">import</span> ttk, messagebox
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> locale
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set locale for currency formatting</span>
</span></span><span style="display:flex;"><span>locale<span style="color:#f92672">.</span>setlocale(locale<span style="color:#f92672">.</span>LC_ALL, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_investment</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get values from entry fields</span>
</span></span><span style="display:flex;"><span>        initial <span style="color:#f92672">=</span> float(initial_investment<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>        annual <span style="color:#f92672">=</span> float(annual_contribution<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>        rate <span style="color:#f92672">=</span> float(interest_rate<span style="color:#f92672">.</span>get()) <span style="color:#f92672">/</span> <span style="color:#ae81ff">100</span>  <span style="color:#75715e"># Convert percentage to decimal</span>
</span></span><span style="display:flex;"><span>        time <span style="color:#f92672">=</span> int(years<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Calculate compound interest with annual additions</span>
</span></span><span style="display:flex;"><span>        future_value <span style="color:#f92672">=</span> initial <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> rate) <span style="color:#f92672">**</span> time
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add effect of annual contributions</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> annual <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> rate <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            future_value <span style="color:#f92672">+=</span> annual <span style="color:#f92672">*</span> ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> rate) <span style="color:#f92672">**</span> time <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> rate
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update result label with formatted currency</span>
</span></span><span style="display:flex;"><span>        formatted_value <span style="color:#f92672">=</span> locale<span style="color:#f92672">.</span>currency(future_value, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        result_label<span style="color:#f92672">.</span>config(text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Future Value: </span><span style="color:#e6db74">{</span>formatted_value<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Show breakdown button</span>
</span></span><span style="display:flex;"><span>        breakdown_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">7</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Store values for breakdown</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">global</span> investment_data
</span></span><span style="display:flex;"><span>        investment_data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;initial&#34;</span>: initial,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;annual&#34;</span>: annual,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;rate&#34;</span>: rate,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;time&#34;</span>: time,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;final&#34;</span>: future_value
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>        messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter valid numbers in all fields&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_breakdown</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create a new window for the breakdown</span>
</span></span><span style="display:flex;"><span>    breakdown <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Toplevel(root)
</span></span><span style="display:flex;"><span>    breakdown<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Investment Breakdown&#34;</span>)
</span></span><span style="display:flex;"><span>    breakdown<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;600x400&#34;</span>)
</span></span><span style="display:flex;"><span>    breakdown<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add a heading</span>
</span></span><span style="display:flex;"><span>    tk<span style="color:#f92672">.</span>Label(breakdown, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Year-by-Year Breakdown&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">12</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create a frame for the table</span>
</span></span><span style="display:flex;"><span>    table_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(breakdown)
</span></span><span style="display:flex;"><span>    table_frame<span style="color:#f92672">.</span>pack(expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create treeview (table)</span>
</span></span><span style="display:flex;"><span>    columns <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;Year&#34;</span>, <span style="color:#e6db74">&#34;Starting Balance&#34;</span>, <span style="color:#e6db74">&#34;Interest Earned&#34;</span>, <span style="color:#e6db74">&#34;Contribution&#34;</span>, <span style="color:#e6db74">&#34;Ending Balance&#34;</span>)
</span></span><span style="display:flex;"><span>    table <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Treeview(table_frame, columns<span style="color:#f92672">=</span>columns, show<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;headings&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Configure columns</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> columns:
</span></span><span style="display:flex;"><span>        table<span style="color:#f92672">.</span>heading(col, text<span style="color:#f92672">=</span>col)
</span></span><span style="display:flex;"><span>        table<span style="color:#f92672">.</span>column(col, width<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, anchor<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;center&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add scrollbar</span>
</span></span><span style="display:flex;"><span>    scrollbar <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Scrollbar(table_frame, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vertical&#34;</span>, command<span style="color:#f92672">=</span>table<span style="color:#f92672">.</span>yview)
</span></span><span style="display:flex;"><span>    scrollbar<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;right&#34;</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;y&#34;</span>)
</span></span><span style="display:flex;"><span>    table<span style="color:#f92672">.</span>configure(yscrollcommand<span style="color:#f92672">=</span>scrollbar<span style="color:#f92672">.</span>set)
</span></span><span style="display:flex;"><span>    table<span style="color:#f92672">.</span>pack(expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Extract values from stored data</span>
</span></span><span style="display:flex;"><span>    initial <span style="color:#f92672">=</span> investment_data[<span style="color:#e6db74">&#34;initial&#34;</span>]
</span></span><span style="display:flex;"><span>    annual <span style="color:#f92672">=</span> investment_data[<span style="color:#e6db74">&#34;annual&#34;</span>]
</span></span><span style="display:flex;"><span>    rate <span style="color:#f92672">=</span> investment_data[<span style="color:#e6db74">&#34;rate&#34;</span>]
</span></span><span style="display:flex;"><span>    time <span style="color:#f92672">=</span> investment_data[<span style="color:#e6db74">&#34;time&#34;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate and insert year-by-year breakdown</span>
</span></span><span style="display:flex;"><span>    current_value <span style="color:#f92672">=</span> initial
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> year <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, time <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        starting_balance <span style="color:#f92672">=</span> current_value
</span></span><span style="display:flex;"><span>        interest <span style="color:#f92672">=</span> current_value <span style="color:#f92672">*</span> rate
</span></span><span style="display:flex;"><span>        contribution <span style="color:#f92672">=</span> annual <span style="color:#66d9ef">if</span> year <span style="color:#f92672">&lt;</span> time <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">0</span>  <span style="color:#75715e"># No contribution in final year calculation</span>
</span></span><span style="display:flex;"><span>        current_value <span style="color:#f92672">=</span> starting_balance <span style="color:#f92672">+</span> interest <span style="color:#f92672">+</span> contribution
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Format values as currency</span>
</span></span><span style="display:flex;"><span>        formatted_starting <span style="color:#f92672">=</span> locale<span style="color:#f92672">.</span>currency(starting_balance, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        formatted_interest <span style="color:#f92672">=</span> locale<span style="color:#f92672">.</span>currency(interest, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        formatted_contribution <span style="color:#f92672">=</span> locale<span style="color:#f92672">.</span>currency(contribution, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        formatted_ending <span style="color:#f92672">=</span> locale<span style="color:#f92672">.</span>currency(current_value, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add row to table</span>
</span></span><span style="display:flex;"><span>        table<span style="color:#f92672">.</span>insert(<span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;end&#34;</span>, values<span style="color:#f92672">=</span>(year, formatted_starting, formatted_interest, 
</span></span><span style="display:flex;"><span>                                        formatted_contribution, formatted_ending))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add a button to generate a chart</span>
</span></span><span style="display:flex;"><span>    chart_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(breakdown, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Generate Chart&#34;</span>, command<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span>: show_chart(time))
</span></span><span style="display:flex;"><span>    chart_button<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_chart</span>(years):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This would normally use matplotlib for charting</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Since we can&#39;t include matplotlib in this basic example, we&#39;ll show a message</span>
</span></span><span style="display:flex;"><span>    messagebox<span style="color:#f92672">.</span>showinfo(<span style="color:#e6db74">&#34;Chart Generation&#34;</span>, 
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;In a real application, this would generate a matplotlib chart showing growth over time.</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;To implement this, you would:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;1. Install matplotlib (pip install matplotlib)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;2. Import matplotlib.pyplot as plt</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;3. Create a Figure and embed it in a Tkinter window</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;4. Plot the investment growth data</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Your investment would grow over </span><span style="color:#e6db74">{</span>years<span style="color:#e6db74">}</span><span style="color:#e6db74"> years.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create main application window</span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Financial Investment Calculator&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;500x450&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Use ttk theme for better looking widgets</span>
</span></span><span style="display:flex;"><span>style <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Style()
</span></span><span style="display:flex;"><span>style<span style="color:#f92672">.</span>theme_use(<span style="color:#e6db74">&#34;clam&#34;</span>)  <span style="color:#75715e"># Options: &#39;clam&#39;, &#39;alt&#39;, &#39;default&#39;, &#39;classic&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Header with a frame for visual separation</span>
</span></span><span style="display:flex;"><span>header_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(root, padding<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>header_frame<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>)
</span></span><span style="display:flex;"><span>header_frame<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">0</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>header <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Label(header_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Investment Calculator&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">16</span>))
</span></span><span style="display:flex;"><span>header<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>separator <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Separator(root, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;horizontal&#34;</span>)
</span></span><span style="display:flex;"><span>separator<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Input form</span>
</span></span><span style="display:flex;"><span>form_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>LabelFrame(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Investment Parameters&#34;</span>, padding<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>form_frame<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;nsew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>form_frame<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">1</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Initial Investment</span>
</span></span><span style="display:flex;"><span>ttk<span style="color:#f92672">.</span>Label(form_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Initial Investment ($):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>initial_investment <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(form_frame)
</span></span><span style="display:flex;"><span>initial_investment<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>initial_investment<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;1000&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Annual Contribution</span>
</span></span><span style="display:flex;"><span>ttk<span style="color:#f92672">.</span>Label(form_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Annual Contribution ($):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>annual_contribution <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(form_frame)
</span></span><span style="display:flex;"><span>annual_contribution<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>annual_contribution<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;0&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Interest Rate</span>
</span></span><span style="display:flex;"><span>ttk<span style="color:#f92672">.</span>Label(form_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Expected Return (%):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>interest_rate <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(form_frame)
</span></span><span style="display:flex;"><span>interest_rate<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>interest_rate<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;7&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Time Period</span>
</span></span><span style="display:flex;"><span>ttk<span style="color:#f92672">.</span>Label(form_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Years:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>years <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(form_frame)
</span></span><span style="display:flex;"><span>years<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>years<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;10&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add some space</span>
</span></span><span style="display:flex;"><span>ttk<span style="color:#f92672">.</span>Separator(root, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;horizontal&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate Button</span>
</span></span><span style="display:flex;"><span>calculate_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Calculate Returns&#34;</span>, command<span style="color:#f92672">=</span>calculate_investment)
</span></span><span style="display:flex;"><span>calculate_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Results Label</span>
</span></span><span style="display:flex;"><span>result_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(root, padding<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>result_frame<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>result_frame<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">0</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>result_label <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Label(result_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Future Value: $0.00&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">12</span>))
</span></span><span style="display:flex;"><span>result_label<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Breakdown button (initially hidden)</span>
</span></span><span style="display:flex;"><span>breakdown_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;View Year-by-Year Breakdown&#34;</span>, command<span style="color:#f92672">=</span>show_breakdown)
</span></span><span style="display:flex;"><span>breakdown_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">7</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>breakdown_button<span style="color:#f92672">.</span>grid_remove()  <span style="color:#75715e"># Hide initially</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Global variable to store calculation results</span>
</span></span><span style="display:flex;"><span>investment_data <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Configure grid expansion</span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>grid_rowconfigure(<span style="color:#ae81ff">2</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">0</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>In this enhanced version, we&rsquo;ve used several more advanced features:</p>
<ol>
<li>The <code>ttk</code> module that provides themed widgets (more modern look)</li>
<li>Organizational widgets like <code>LabelFrame</code> and <code>Separator</code> for better visual structure</li>
<li>A <code>Treeview</code> widget to display tabular data in the breakdown</li>
<li>A placeholder for charting (which would normally use matplotlib)</li>
</ol>
<h2 id="packaging-your-application">Packaging Your Application</h2>
<p>Once your application is working as expected, you might want to distribute it to colleagues. Here&rsquo;s how to convert it to a standalone executable (no Python installation required):</p>
<ol>
<li>Install PyInstaller:</li>
</ol>
<pre tabindex="0"><code>pip install pyinstaller
</code></pre><ol start="2">
<li>Create your executable:</li>
</ol>
<pre tabindex="0"><code>pyinstaller --onefile --windowed investment_calculator.py
</code></pre><p>This will create a <code>dist</code> folder containing a single <code>.exe</code> file you can share.</p>
<h2 id="building-a-simple-expense-tracker">Building a Simple Expense Tracker</h2>
<p>Let&rsquo;s create another finance-related application: a basic expense tracker. This will introduce a few new Tkinter concepts:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> tkinter <span style="color:#f92672">import</span> ttk, messagebox
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExpenseTracker</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, root):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root <span style="color:#f92672">=</span> root
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Expense Tracker&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;800x600&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Data storage</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>expenses <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>data_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;expenses.json&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>load_data()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create UI</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>create_widgets()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_widgets</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Main container</span>
</span></span><span style="display:flex;"><span>        main_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        main_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Left panel - Add Expense</span>
</span></span><span style="display:flex;"><span>        left_panel <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>LabelFrame(main_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Add New Expense&#34;</span>)
</span></span><span style="display:flex;"><span>        left_panel<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;left&#34;</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, padx<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>), pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Date selector</span>
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(left_panel, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Date:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>date_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(left_panel)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>date_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>date_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Amount entry</span>
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(left_panel, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Amount ($):&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>amount_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(left_panel)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>amount_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Category dropdown</span>
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(left_panel, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Category:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>categories <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Food&#34;</span>, <span style="color:#e6db74">&#34;Transportation&#34;</span>, <span style="color:#e6db74">&#34;Housing&#34;</span>, <span style="color:#e6db74">&#34;Entertainment&#34;</span>, <span style="color:#e6db74">&#34;Utilities&#34;</span>, <span style="color:#e6db74">&#34;Other&#34;</span>]
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>category_var <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>StringVar()
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>category_dropdown <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Combobox(left_panel, textvariable<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>category_var)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>category_dropdown[<span style="color:#e6db74">&#39;values&#39;</span>] <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>categories
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>category_dropdown<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>category_dropdown<span style="color:#f92672">.</span>current(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Description entry</span>
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(left_panel, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Description:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>description_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(left_panel)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>description_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add button</span>
</span></span><span style="display:flex;"><span>        add_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(left_panel, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Add Expense&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>add_expense)
</span></span><span style="display:flex;"><span>        add_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Reporting section</span>
</span></span><span style="display:flex;"><span>        report_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(left_panel)
</span></span><span style="display:flex;"><span>        report_frame<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(report_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Total Expenses: &#34;</span>)<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;left&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>total_label <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Label(report_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;$0.00&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>total_label<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;left&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Right panel - Expense List</span>
</span></span><span style="display:flex;"><span>        right_panel <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>LabelFrame(main_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Expense History&#34;</span>)
</span></span><span style="display:flex;"><span>        right_panel<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;right&#34;</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, padx<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>), pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create treeview</span>
</span></span><span style="display:flex;"><span>        columns <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;Date&#34;</span>, <span style="color:#e6db74">&#34;Amount&#34;</span>, <span style="color:#e6db74">&#34;Category&#34;</span>, <span style="color:#e6db74">&#34;Description&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>expense_table <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Treeview(right_panel, columns<span style="color:#f92672">=</span>columns, show<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;headings&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Configure columns</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> columns:
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>heading(col, text<span style="color:#f92672">=</span>col)
</span></span><span style="display:flex;"><span>            width <span style="color:#f92672">=</span> <span style="color:#ae81ff">150</span> <span style="color:#66d9ef">if</span> col <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Description&#34;</span> <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>column(col, width<span style="color:#f92672">=</span>width)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add scrollbar</span>
</span></span><span style="display:flex;"><span>        scrollbar <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Scrollbar(right_panel, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vertical&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>yview)
</span></span><span style="display:flex;"><span>        scrollbar<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;right&#34;</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;y&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>configure(yscrollcommand<span style="color:#f92672">=</span>scrollbar<span style="color:#f92672">.</span>set)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>pack(expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add right-click menu for deleting entries</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>context_menu <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Menu(self<span style="color:#f92672">.</span>root, tearoff<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>context_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Delete&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>delete_expense)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>bind(<span style="color:#e6db74">&#34;&lt;Button-3&gt;&#34;</span>, self<span style="color:#f92672">.</span>show_context_menu)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Configure column weights</span>
</span></span><span style="display:flex;"><span>        left_panel<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">1</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Populate table with saved data</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>update_expense_table()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_expense</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            date <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>date_entry<span style="color:#f92672">.</span>get()
</span></span><span style="display:flex;"><span>            amount <span style="color:#f92672">=</span> float(self<span style="color:#f92672">.</span>amount_entry<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>            category <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>category_var<span style="color:#f92672">.</span>get()
</span></span><span style="display:flex;"><span>            description <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>description_entry<span style="color:#f92672">.</span>get()
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Validate inputs</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> date <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> category <span style="color:#f92672">or</span> amount <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter valid values for all fields.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Add to expenses list</span>
</span></span><span style="display:flex;"><span>            expense <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;date&#34;</span>: date,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;amount&#34;</span>: amount,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;category&#34;</span>: category,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;description&#34;</span>: description
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>expenses<span style="color:#f92672">.</span>append(expense)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Save data</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>save_data()
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Update UI</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>update_expense_table()
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Clear inputs</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>amount_entry<span style="color:#f92672">.</span>delete(<span style="color:#ae81ff">0</span>, tk<span style="color:#f92672">.</span>END)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>description_entry<span style="color:#f92672">.</span>delete(<span style="color:#ae81ff">0</span>, tk<span style="color:#f92672">.</span>END)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>date_entry<span style="color:#f92672">.</span>delete(<span style="color:#ae81ff">0</span>, tk<span style="color:#f92672">.</span>END)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>date_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>            messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter a valid amount.&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_expense_table</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Clear existing entries</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>get_children():
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>delete(row)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Sort expenses by date (newest first)</span>
</span></span><span style="display:flex;"><span>        sorted_expenses <span style="color:#f92672">=</span> sorted(self<span style="color:#f92672">.</span>expenses, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#e6db74">&#34;date&#34;</span>], reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add expenses to table</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> sorted_expenses:
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>insert(<span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;end&#34;</span>, values<span style="color:#f92672">=</span>(
</span></span><span style="display:flex;"><span>                expense[<span style="color:#e6db74">&#34;date&#34;</span>],
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>expense[<span style="color:#e6db74">&#39;amount&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>                expense[<span style="color:#e6db74">&#34;category&#34;</span>],
</span></span><span style="display:flex;"><span>                expense[<span style="color:#e6db74">&#34;description&#34;</span>]
</span></span><span style="display:flex;"><span>            ))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update total</span>
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> sum(expense[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>expenses)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>total_label<span style="color:#f92672">.</span>config(text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_context_menu</span>(self, event):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get the item under cursor</span>
</span></span><span style="display:flex;"><span>        item <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>identify_row(event<span style="color:#f92672">.</span>y)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> item:
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>selection_set(item)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>context_menu<span style="color:#f92672">.</span>post(event<span style="color:#f92672">.</span>x_root, event<span style="color:#f92672">.</span>y_root)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">delete_expense</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get selected item</span>
</span></span><span style="display:flex;"><span>        selected <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>selection()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> selected:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Confirm deletion</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> messagebox<span style="color:#f92672">.</span>askyesno(<span style="color:#e6db74">&#34;Confirm Delete&#34;</span>, <span style="color:#e6db74">&#34;Are you sure you want to delete this expense?&#34;</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Get the index from selection</span>
</span></span><span style="display:flex;"><span>            item_id <span style="color:#f92672">=</span> selected[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>            item_index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>expense_table<span style="color:#f92672">.</span>index(item_id)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Remove from data</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;=</span> item_index <span style="color:#f92672">&lt;</span> len(self<span style="color:#f92672">.</span>expenses):
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>expenses<span style="color:#f92672">.</span>pop(item_index)
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>save_data()
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>update_expense_table()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">load_data</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(self<span style="color:#f92672">.</span>data_file):
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">with</span> open(self<span style="color:#f92672">.</span>data_file, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>expenses <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(file)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Data Error&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error loading data: </span><span style="color:#e6db74">{</span>str(e)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>expenses <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">save_data</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">with</span> open(self<span style="color:#f92672">.</span>data_file, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>                json<span style="color:#f92672">.</span>dump(self<span style="color:#f92672">.</span>expenses, file, indent<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Data Error&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error saving data: </span><span style="color:#e6db74">{</span>str(e)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create and run the application</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>    app <span style="color:#f92672">=</span> ExpenseTracker(root)
</span></span><span style="display:flex;"><span>    root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>This expense tracker application introduces several new concepts:</p>
<ol>
<li><strong>Object-Oriented Approach</strong>: Using a class to organize the application</li>
<li><strong>Combobox Widget</strong>: For selecting from a predefined list</li>
<li><strong>Context Menu</strong>: Right-click menu for actions like deletion</li>
<li><strong>Data Persistence</strong>: Saving/loading data to/from a JSON file</li>
<li><strong>Event Binding</strong>: Connecting events (like right-click) to handlers</li>
</ol>
<h2 id="advanced-tkinter-topics">Advanced Tkinter Topics</h2>
<p>If you want to take your Tkinter applications further, here are some advanced topics worth exploring:</p>
<h3 id="1-custom-styling-with-themes">1. Custom Styling with Themes</h3>
<p>The <code>ttk</code> module (themed Tkinter) supports customization through themes. You can create a custom look for your application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> tkinter <span style="color:#f92672">import</span> ttk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Custom Styled App&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the default style object</span>
</span></span><span style="display:flex;"><span>style <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Style()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change the theme</span>
</span></span><span style="display:flex;"><span>style<span style="color:#f92672">.</span>theme_use(<span style="color:#e6db74">&#39;clam&#39;</span>)  <span style="color:#75715e"># Options include: &#39;clam&#39;, &#39;alt&#39;, &#39;default&#39;, &#39;classic&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Configure specific elements</span>
</span></span><span style="display:flex;"><span>style<span style="color:#f92672">.</span>configure(<span style="color:#e6db74">&#39;TButton&#39;</span>, 
</span></span><span style="display:flex;"><span>                foreground<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;navy&#39;</span>,
</span></span><span style="display:flex;"><span>                background<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;lightblue&#39;</span>, 
</span></span><span style="display:flex;"><span>                font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;Arial&#39;</span>, <span style="color:#ae81ff">11</span>, <span style="color:#e6db74">&#39;bold&#39;</span>),
</span></span><span style="display:flex;"><span>                padding<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>style<span style="color:#f92672">.</span>configure(<span style="color:#e6db74">&#39;TLabel&#39;</span>,
</span></span><span style="display:flex;"><span>                font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;Arial&#39;</span>, <span style="color:#ae81ff">12</span>),
</span></span><span style="display:flex;"><span>                padding<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a custom style for specific widgets</span>
</span></span><span style="display:flex;"><span>style<span style="color:#f92672">.</span>configure(<span style="color:#e6db74">&#39;Danger.TButton&#39;</span>,
</span></span><span style="display:flex;"><span>                foreground<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;white&#39;</span>,
</span></span><span style="display:flex;"><span>                background<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;red&#39;</span>,
</span></span><span style="display:flex;"><span>                font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;Arial&#39;</span>, <span style="color:#ae81ff">11</span>, <span style="color:#e6db74">&#39;bold&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using the styles</span>
</span></span><span style="display:flex;"><span>normal_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Normal Button&#34;</span>)
</span></span><span style="display:flex;"><span>normal_button<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>danger_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Delete&#34;</span>, style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Danger.TButton&#39;</span>)
</span></span><span style="display:flex;"><span>danger_button<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>This just scratches the surface. You can define custom styles for almost every widget property, though note that not all styling options work the same across different operating systems.</p>
<h3 id="2-canvas-widget-for-custom-graphics">2. Canvas Widget for Custom Graphics</h3>
<p>For more complex visualizations, the <code>Canvas</code> widget provides a drawing surface:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> math
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Financial Pie Chart&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;400x400&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a canvas</span>
</span></span><span style="display:flex;"><span>canvas <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Canvas(root, width<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>, height<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>, bg<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;white&#39;</span>)
</span></span><span style="display:flex;"><span>canvas<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sample data (expense categories and values)</span>
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Housing&#34;</span>: <span style="color:#ae81ff">1200</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Food&#34;</span>: <span style="color:#ae81ff">500</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Transportation&#34;</span>: <span style="color:#ae81ff">300</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Entertainment&#34;</span>: <span style="color:#ae81ff">200</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Utilities&#34;</span>: <span style="color:#ae81ff">250</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Other&#34;</span>: <span style="color:#ae81ff">150</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate total</span>
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> sum(expenses<span style="color:#f92672">.</span>values())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Define colors</span>
</span></span><span style="display:flex;"><span>colors <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;#ff9999&#39;</span>, <span style="color:#e6db74">&#39;#66b3ff&#39;</span>, <span style="color:#e6db74">&#39;#99ff99&#39;</span>, <span style="color:#e6db74">&#39;#ffcc99&#39;</span>, <span style="color:#e6db74">&#39;#c2c2f0&#39;</span>, <span style="color:#e6db74">&#39;#ffb3e6&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Draw pie chart</span>
</span></span><span style="display:flex;"><span>cx, cy, r <span style="color:#f92672">=</span> <span style="color:#ae81ff">150</span>, <span style="color:#ae81ff">150</span>, <span style="color:#ae81ff">100</span>  <span style="color:#75715e"># center x, center y, radius</span>
</span></span><span style="display:flex;"><span>start_angle <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i, (category, value) <span style="color:#f92672">in</span> enumerate(expenses<span style="color:#f92672">.</span>items()):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate angle for this segment</span>
</span></span><span style="display:flex;"><span>    angle <span style="color:#f92672">=</span> <span style="color:#ae81ff">360</span> <span style="color:#f92672">*</span> (value <span style="color:#f92672">/</span> total)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Convert to radians for math functions</span>
</span></span><span style="display:flex;"><span>    end_angle <span style="color:#f92672">=</span> start_angle <span style="color:#f92672">+</span> angle
</span></span><span style="display:flex;"><span>    start_rad <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>radians(start_angle)
</span></span><span style="display:flex;"><span>    end_rad <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>radians(end_angle)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create the arc/slice</span>
</span></span><span style="display:flex;"><span>    canvas<span style="color:#f92672">.</span>create_arc(cx<span style="color:#f92672">-</span>r, cy<span style="color:#f92672">-</span>r, cx<span style="color:#f92672">+</span>r, cy<span style="color:#f92672">+</span>r, 
</span></span><span style="display:flex;"><span>                     start<span style="color:#f92672">=</span>start_angle, extent<span style="color:#f92672">=</span>angle,
</span></span><span style="display:flex;"><span>                     fill<span style="color:#f92672">=</span>colors[i <span style="color:#f92672">%</span> len(colors)], outline<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;white&#39;</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate position for label</span>
</span></span><span style="display:flex;"><span>    mid_rad <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>radians(start_angle <span style="color:#f92672">+</span> angle<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    label_r <span style="color:#f92672">=</span> r <span style="color:#f92672">*</span> <span style="color:#ae81ff">0.7</span>  <span style="color:#75715e"># Place label at 70% of radius</span>
</span></span><span style="display:flex;"><span>    label_x <span style="color:#f92672">=</span> cx <span style="color:#f92672">+</span> label_r <span style="color:#f92672">*</span> math<span style="color:#f92672">.</span>cos(mid_rad)
</span></span><span style="display:flex;"><span>    label_y <span style="color:#f92672">=</span> cy <span style="color:#f92672">+</span> label_r <span style="color:#f92672">*</span> math<span style="color:#f92672">.</span>sin(mid_rad)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Draw label</span>
</span></span><span style="display:flex;"><span>    canvas<span style="color:#f92672">.</span>create_text(label_x, label_y, text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>value<span style="color:#f92672">/</span>total<span style="color:#e6db74">:</span><span style="color:#e6db74">.1%</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, 
</span></span><span style="display:flex;"><span>                      font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">8</span>), fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;black&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Move to next segment</span>
</span></span><span style="display:flex;"><span>    start_angle <span style="color:#f92672">=</span> end_angle
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add a title</span>
</span></span><span style="display:flex;"><span>canvas<span style="color:#f92672">.</span>create_text(cx, <span style="color:#ae81ff">30</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Monthly Expenses&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>The Canvas widget can be used for all kinds of custom graphics, from charts and graphs to custom UI elements and even simple animations.</p>
<h3 id="3-multithreading-for-long-running-tasks">3. Multithreading for Long-Running Tasks</h3>
<p>When performing calculations or operations that might take time, you should use threading to keep the UI responsive:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> tkinter <span style="color:#f92672">import</span> ttk
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> threading
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">long_running_task</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Simulate a complex calculation or API call</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update progress from the worker thread</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Note: we use root.after to schedule UI updates from the main thread</span>
</span></span><span style="display:flex;"><span>        progress_var <span style="color:#f92672">=</span> (i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>        root<span style="color:#f92672">.</span>after(<span style="color:#ae81ff">0</span>, progress_bar<span style="color:#f92672">.</span>config, {<span style="color:#e6db74">&#34;value&#34;</span>: progress_var})
</span></span><span style="display:flex;"><span>        root<span style="color:#f92672">.</span>after(<span style="color:#ae81ff">0</span>, progress_label<span style="color:#f92672">.</span>config, {<span style="color:#e6db74">&#34;text&#34;</span>: <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Processing: </span><span style="color:#e6db74">{</span>progress_var<span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>})
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.5</span>)  <span style="color:#75715e"># Simulate work</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Enable the button when done</span>
</span></span><span style="display:flex;"><span>    root<span style="color:#f92672">.</span>after(<span style="color:#ae81ff">0</span>, calculate_button<span style="color:#f92672">.</span>config, {<span style="color:#e6db74">&#34;state&#34;</span>: <span style="color:#e6db74">&#34;normal&#34;</span>})
</span></span><span style="display:flex;"><span>    root<span style="color:#f92672">.</span>after(<span style="color:#ae81ff">0</span>, progress_label<span style="color:#f92672">.</span>config, {<span style="color:#e6db74">&#34;text&#34;</span>: <span style="color:#e6db74">&#34;Calculation complete!&#34;</span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start_calculation</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Disable button during calculation</span>
</span></span><span style="display:flex;"><span>    calculate_button<span style="color:#f92672">.</span>config(state<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;disabled&#34;</span>)
</span></span><span style="display:flex;"><span>    progress_label<span style="color:#f92672">.</span>config(text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Starting calculation...&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Start the task in a separate thread</span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>long_running_task)
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>daemon <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>  <span style="color:#75715e"># Thread will exit when main program exits</span>
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Threaded Operations&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;400x200&#34;</span>)
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create progress bar</span>
</span></span><span style="display:flex;"><span>progress_bar <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Progressbar(root, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;horizontal&#34;</span>, length<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>, mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;determinate&#34;</span>)
</span></span><span style="display:flex;"><span>progress_bar<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Status label</span>
</span></span><span style="display:flex;"><span>progress_label <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Label(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Ready&#34;</span>)
</span></span><span style="display:flex;"><span>progress_label<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Button to start calculation</span>
</span></span><span style="display:flex;"><span>calculate_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(root, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Run Financial Analysis&#34;</span>, command<span style="color:#f92672">=</span>start_calculation)
</span></span><span style="display:flex;"><span>calculate_button<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>This pattern is very important for finance applications where you might be running complex calculations or API calls that would otherwise freeze the UI.</p>
<h3 id="4-creating-a-portfolio-tracker-with-multiple-windows">4. Creating a Portfolio Tracker with Multiple Windows</h3>
<p>Let&rsquo;s create a more complex application that demonstrates multiple windows, menus, and data visualization:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> tkinter <span style="color:#66d9ef">as</span> tk
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> tkinter <span style="color:#f92672">import</span> ttk, messagebox, simpledialog
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random  <span style="color:#75715e"># For demo data; you&#39;d use real APIs in production</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PortfolioTracker</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, root):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root <span style="color:#f92672">=</span> root
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Investment Portfolio Tracker&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;800x600&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Data storage</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>portfolio <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>data_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;portfolio_data.json&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>load_data()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create UI</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>create_widgets()
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>create_menu()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_menu</span>(self):
</span></span><span style="display:flex;"><span>        menubar <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Menu(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># File menu</span>
</span></span><span style="display:flex;"><span>        file_menu <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Menu(menubar, tearoff<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        file_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;New Portfolio&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>new_portfolio)
</span></span><span style="display:flex;"><span>        file_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Save&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>save_data)
</span></span><span style="display:flex;"><span>        file_menu<span style="color:#f92672">.</span>add_separator()
</span></span><span style="display:flex;"><span>        file_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Exit&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>quit)
</span></span><span style="display:flex;"><span>        menubar<span style="color:#f92672">.</span>add_cascade(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;File&#34;</span>, menu<span style="color:#f92672">=</span>file_menu)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Portfolio menu</span>
</span></span><span style="display:flex;"><span>        portfolio_menu <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Menu(menubar, tearoff<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        portfolio_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Add Investment&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>add_investment_dialog)
</span></span><span style="display:flex;"><span>        portfolio_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Rebalance Portfolio&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>rebalance_portfolio)
</span></span><span style="display:flex;"><span>        menubar<span style="color:#f92672">.</span>add_cascade(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Portfolio&#34;</span>, menu<span style="color:#f92672">=</span>portfolio_menu)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Analysis menu</span>
</span></span><span style="display:flex;"><span>        analysis_menu <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Menu(menubar, tearoff<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        analysis_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Risk Analysis&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>show_risk_analysis)
</span></span><span style="display:flex;"><span>        analysis_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Performance Chart&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>show_performance_chart)
</span></span><span style="display:flex;"><span>        menubar<span style="color:#f92672">.</span>add_cascade(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Analysis&#34;</span>, menu<span style="color:#f92672">=</span>analysis_menu)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Help menu</span>
</span></span><span style="display:flex;"><span>        help_menu <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Menu(menubar, tearoff<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        help_menu<span style="color:#f92672">.</span>add_command(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;About&#34;</span>, command<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>show_about)
</span></span><span style="display:flex;"><span>        menubar<span style="color:#f92672">.</span>add_cascade(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Help&#34;</span>, menu<span style="color:#f92672">=</span>help_menu)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>config(menu<span style="color:#f92672">=</span>menubar)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_widgets</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Main container with notebook (tabbed interface)</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>notebook <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Notebook(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>notebook<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create tabs</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>overview_tab <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(self<span style="color:#f92672">.</span>notebook)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>stocks_tab <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(self<span style="color:#f92672">.</span>notebook)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>bonds_tab <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(self<span style="color:#f92672">.</span>notebook)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>cash_tab <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(self<span style="color:#f92672">.</span>notebook)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>notebook<span style="color:#f92672">.</span>add(self<span style="color:#f92672">.</span>overview_tab, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Portfolio Overview&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>notebook<span style="color:#f92672">.</span>add(self<span style="color:#f92672">.</span>stocks_tab, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Stocks&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>notebook<span style="color:#f92672">.</span>add(self<span style="color:#f92672">.</span>bonds_tab, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Bonds&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>notebook<span style="color:#f92672">.</span>add(self<span style="color:#f92672">.</span>cash_tab, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Cash &amp; Equivalents&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Set up the overview tab</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>setup_overview_tab()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Set up asset-specific tabs</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>setup_asset_tab(self<span style="color:#f92672">.</span>stocks_tab, <span style="color:#e6db74">&#34;stock&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>setup_asset_tab(self<span style="color:#f92672">.</span>bonds_tab, <span style="color:#e6db74">&#34;bond&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>setup_asset_tab(self<span style="color:#f92672">.</span>cash_tab, <span style="color:#e6db74">&#34;cash&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">setup_overview_tab</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Summary frame at top</span>
</span></span><span style="display:flex;"><span>        summary_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>LabelFrame(self<span style="color:#f92672">.</span>overview_tab, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Portfolio Summary&#34;</span>)
</span></span><span style="display:flex;"><span>        summary_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Portfolio value display</span>
</span></span><span style="display:flex;"><span>        value_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(summary_frame)
</span></span><span style="display:flex;"><span>        value_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(value_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Total Portfolio Value:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>total_value_label <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Label(value_frame, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;$0.00&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">12</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>total_value_label<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Asset allocation frame</span>
</span></span><span style="display:flex;"><span>        allocation_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>LabelFrame(self<span style="color:#f92672">.</span>overview_tab, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Asset Allocation&#34;</span>)
</span></span><span style="display:flex;"><span>        allocation_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Placeholder for chart - in a real app, use matplotlib or similar</span>
</span></span><span style="display:flex;"><span>        allocation_canvas <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Canvas(allocation_frame, bg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;white&#34;</span>, height<span style="color:#f92672">=</span><span style="color:#ae81ff">250</span>)
</span></span><span style="display:flex;"><span>        allocation_canvas<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Placeholder text (replace with actual chart)</span>
</span></span><span style="display:flex;"><span>        allocation_canvas<span style="color:#f92672">.</span>create_text(
</span></span><span style="display:flex;"><span>            allocation_canvas<span style="color:#f92672">.</span>winfo_reqwidth() <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>, 
</span></span><span style="display:flex;"><span>            allocation_canvas<span style="color:#f92672">.</span>winfo_reqheight() <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>            text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[Asset Allocation Chart Would Be Here]&#34;</span>,
</span></span><span style="display:flex;"><span>            font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Recent performance</span>
</span></span><span style="display:flex;"><span>        performance_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>LabelFrame(self<span style="color:#f92672">.</span>overview_tab, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Recent Performance&#34;</span>)
</span></span><span style="display:flex;"><span>        performance_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Basic stats in grid layout</span>
</span></span><span style="display:flex;"><span>        stats <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;1 Day:&#34;</span>, <span style="color:#e6db74">&#34;+0.3%&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;1 Week:&#34;</span>, <span style="color:#e6db74">&#34;-0.7%&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;1 Month:&#34;</span>, <span style="color:#e6db74">&#34;+2.1%&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;3 Months:&#34;</span>, <span style="color:#e6db74">&#34;+5.4%&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;YTD:&#34;</span>, <span style="color:#e6db74">&#34;+12.3%&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;1 Year:&#34;</span>, <span style="color:#e6db74">&#34;+15.8%&#34;</span>)
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i, (label, value) <span style="color:#f92672">in</span> enumerate(stats):
</span></span><span style="display:flex;"><span>            row, col <span style="color:#f92672">=</span> i <span style="color:#f92672">//</span> <span style="color:#ae81ff">3</span>, i <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>            ttk<span style="color:#f92672">.</span>Label(performance_frame, text<span style="color:#f92672">=</span>label)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span>row, column<span style="color:#f92672">=</span>col<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;e&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Color based on positive/negative</span>
</span></span><span style="display:flex;"><span>            color <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;green&#34;</span> <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;+&#34;</span> <span style="color:#f92672">in</span> value <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;red&#34;</span>
</span></span><span style="display:flex;"><span>            value_label <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Label(performance_frame, text<span style="color:#f92672">=</span>value)
</span></span><span style="display:flex;"><span>            value_label<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span>row, column<span style="color:#f92672">=</span>col<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Note: ttk doesn&#39;t support direct text color, would need custom style</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update displays</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>update_overview()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">setup_asset_tab</span>(self, tab, asset_type):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create treeview for this asset type</span>
</span></span><span style="display:flex;"><span>        columns <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;Name&#34;</span>, <span style="color:#e6db74">&#34;Ticker&#34;</span>, <span style="color:#e6db74">&#34;Shares/Units&#34;</span>, <span style="color:#e6db74">&#34;Price&#34;</span>, <span style="color:#e6db74">&#34;Value&#34;</span>, <span style="color:#e6db74">&#34;Allocation&#34;</span>)
</span></span><span style="display:flex;"><span>        tree <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Treeview(tab, columns<span style="color:#f92672">=</span>columns, show<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;headings&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Configure columns</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> columns:
</span></span><span style="display:flex;"><span>            tree<span style="color:#f92672">.</span>heading(col, text<span style="color:#f92672">=</span>col)
</span></span><span style="display:flex;"><span>            width <span style="color:#f92672">=</span> <span style="color:#ae81ff">150</span> <span style="color:#66d9ef">if</span> col <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Name&#34;</span> <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>            tree<span style="color:#f92672">.</span>column(col, width<span style="color:#f92672">=</span>width)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add scrollbar</span>
</span></span><span style="display:flex;"><span>        scrollbar <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Scrollbar(tab, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vertical&#34;</span>, command<span style="color:#f92672">=</span>tree<span style="color:#f92672">.</span>yview)
</span></span><span style="display:flex;"><span>        scrollbar<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;right&#34;</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;y&#34;</span>)
</span></span><span style="display:flex;"><span>        tree<span style="color:#f92672">.</span>configure(yscrollcommand<span style="color:#f92672">=</span>scrollbar<span style="color:#f92672">.</span>set)
</span></span><span style="display:flex;"><span>        tree<span style="color:#f92672">.</span>pack(expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Store reference to this tree</span>
</span></span><span style="display:flex;"><span>        setattr(self, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>asset_type<span style="color:#e6db74">}</span><span style="color:#e6db74">_tree&#34;</span>, tree)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add button frame</span>
</span></span><span style="display:flex;"><span>        button_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Frame(tab)
</span></span><span style="display:flex;"><span>        button_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add buttons</span>
</span></span><span style="display:flex;"><span>        add_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(
</span></span><span style="display:flex;"><span>            button_frame, 
</span></span><span style="display:flex;"><span>            text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Add </span><span style="color:#e6db74">{</span>asset_type<span style="color:#f92672">.</span>title()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, 
</span></span><span style="display:flex;"><span>            command<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span>: self<span style="color:#f92672">.</span>add_investment_dialog(asset_type)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        add_button<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;left&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        remove_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(
</span></span><span style="display:flex;"><span>            button_frame, 
</span></span><span style="display:flex;"><span>            text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Remove Selected&#34;</span>, 
</span></span><span style="display:flex;"><span>            command<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span>: self<span style="color:#f92672">.</span>remove_investment(asset_type, getattr(self, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>asset_type<span style="color:#e6db74">}</span><span style="color:#e6db74">_tree&#34;</span>))
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        remove_button<span style="color:#f92672">.</span>pack(side<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;left&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Bind double-click to edit</span>
</span></span><span style="display:flex;"><span>        tree<span style="color:#f92672">.</span>bind(<span style="color:#e6db74">&#34;&lt;Double-1&gt;&#34;</span>, <span style="color:#66d9ef">lambda</span> event, at<span style="color:#f92672">=</span>asset_type: self<span style="color:#f92672">.</span>edit_investment(at, event))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_investment_dialog</span>(self, asset_type<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> asset_type <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Let user select asset type if not specified</span>
</span></span><span style="display:flex;"><span>            options <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;stock&#34;</span>, <span style="color:#e6db74">&#34;bond&#34;</span>, <span style="color:#e6db74">&#34;cash&#34;</span>]
</span></span><span style="display:flex;"><span>            asset_type <span style="color:#f92672">=</span> simpledialog<span style="color:#f92672">.</span>askstring(
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;Asset Type&#34;</span>, 
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;Enter asset type (stock, bond, cash):&#34;</span>,
</span></span><span style="display:flex;"><span>                parent<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>root
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> asset_type <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> options:
</span></span><span style="display:flex;"><span>                messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Error&#34;</span>, <span style="color:#e6db74">&#34;Invalid asset type&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create dialog window</span>
</span></span><span style="display:flex;"><span>        dialog <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Toplevel(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>title(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Add </span><span style="color:#e6db74">{</span>asset_type<span style="color:#f92672">.</span>title()<span style="color:#e6db74">}</span><span style="color:#e6db74"> Investment&#34;</span>)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;400x300&#34;</span>)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>transient(self<span style="color:#f92672">.</span>root)  <span style="color:#75715e"># Set as transient to main window</span>
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>grab_set()  <span style="color:#75715e"># Modal dialog</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Form fields</span>
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Name:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        name_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        name_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Ticker/Symbol:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        ticker_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        ticker_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Shares/Units:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        shares_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        shares_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Price per Share/Unit:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        price_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        price_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Purchase Date:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        date_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        date_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        date_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add Button</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">save_investment</span>():
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                name <span style="color:#f92672">=</span> name_entry<span style="color:#f92672">.</span>get()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>                ticker <span style="color:#f92672">=</span> ticker_entry<span style="color:#f92672">.</span>get()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>                shares <span style="color:#f92672">=</span> float(shares_entry<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>                price <span style="color:#f92672">=</span> float(price_entry<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>                date <span style="color:#f92672">=</span> date_entry<span style="color:#f92672">.</span>get()
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> name <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> ticker <span style="color:#f92672">or</span> shares <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> price <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter valid values for all fields.&#34;</span>)
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Create unique ID</span>
</span></span><span style="display:flex;"><span>                investment_id <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>asset_type<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span><span style="color:#e6db74">{</span>len(self<span style="color:#f92672">.</span>portfolio) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Add to portfolio</span>
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>portfolio[investment_id] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;id&#34;</span>: investment_id,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;name&#34;</span>: name,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;ticker&#34;</span>: ticker,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;shares&#34;</span>: shares,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;price&#34;</span>: price,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;purchase_date&#34;</span>: date,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;type&#34;</span>: asset_type
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Update UI</span>
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>save_data()
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>update_display()
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Close dialog</span>
</span></span><span style="display:flex;"><span>                dialog<span style="color:#f92672">.</span>destroy()
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>                messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter valid numbers for shares and price.&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        save_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Save Investment&#34;</span>, command<span style="color:#f92672">=</span>save_investment)
</span></span><span style="display:flex;"><span>        save_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Configure grid expansion</span>
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">1</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">edit_investment</span>(self, asset_type, event):
</span></span><span style="display:flex;"><span>        tree <span style="color:#f92672">=</span> getattr(self, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>asset_type<span style="color:#e6db74">}</span><span style="color:#e6db74">_tree&#34;</span>)
</span></span><span style="display:flex;"><span>        item_id <span style="color:#f92672">=</span> tree<span style="color:#f92672">.</span>identify_row(event<span style="color:#f92672">.</span>y)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> item_id:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get the values displayed in the treeview</span>
</span></span><span style="display:flex;"><span>        values <span style="color:#f92672">=</span> tree<span style="color:#f92672">.</span>item(item_id, <span style="color:#e6db74">&#39;values&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> values:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Find the investment in our data</span>
</span></span><span style="display:flex;"><span>        ticker <span style="color:#f92672">=</span> values[<span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># Assuming ticker is in second column</span>
</span></span><span style="display:flex;"><span>        investment <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>        investment_id <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> id, inv <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> inv[<span style="color:#e6db74">&#34;ticker&#34;</span>] <span style="color:#f92672">==</span> ticker <span style="color:#f92672">and</span> inv[<span style="color:#e6db74">&#34;type&#34;</span>] <span style="color:#f92672">==</span> asset_type:
</span></span><span style="display:flex;"><span>                investment <span style="color:#f92672">=</span> inv
</span></span><span style="display:flex;"><span>                investment_id <span style="color:#f92672">=</span> id
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> investment:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create dialog window</span>
</span></span><span style="display:flex;"><span>        dialog <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Toplevel(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>title(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Edit </span><span style="color:#e6db74">{</span>investment[<span style="color:#e6db74">&#39;name&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;400x300&#34;</span>)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>transient(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>grab_set()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Form fields (pre-filled)</span>
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Name:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        name_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        name_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        name_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, investment[<span style="color:#e6db74">&#34;name&#34;</span>])
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Ticker/Symbol:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        ticker_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        ticker_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        ticker_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, investment[<span style="color:#e6db74">&#34;ticker&#34;</span>])
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Shares/Units:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        shares_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        shares_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        shares_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, str(investment[<span style="color:#e6db74">&#34;shares&#34;</span>]))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Price per Share/Unit:&#34;</span>)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        price_entry <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Entry(dialog, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>        price_entry<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ew&#34;</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        price_entry<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, str(investment[<span style="color:#e6db74">&#34;price&#34;</span>]))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update Button</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_investment</span>():
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                name <span style="color:#f92672">=</span> name_entry<span style="color:#f92672">.</span>get()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>                ticker <span style="color:#f92672">=</span> ticker_entry<span style="color:#f92672">.</span>get()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>                shares <span style="color:#f92672">=</span> float(shares_entry<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>                price <span style="color:#f92672">=</span> float(price_entry<span style="color:#f92672">.</span>get())
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> name <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> ticker <span style="color:#f92672">or</span> shares <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> price <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter valid values for all fields.&#34;</span>)
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Update portfolio</span>
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>portfolio[investment_id][<span style="color:#e6db74">&#34;name&#34;</span>] <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>portfolio[investment_id][<span style="color:#e6db74">&#34;ticker&#34;</span>] <span style="color:#f92672">=</span> ticker
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>portfolio[investment_id][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">=</span> shares
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>portfolio[investment_id][<span style="color:#e6db74">&#34;price&#34;</span>] <span style="color:#f92672">=</span> price
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Update UI</span>
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>save_data()
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>update_display()
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Close dialog</span>
</span></span><span style="display:flex;"><span>                dialog<span style="color:#f92672">.</span>destroy()
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>                messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Input Error&#34;</span>, <span style="color:#e6db74">&#34;Please enter valid numbers for shares and price.&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        update_button <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>Button(dialog, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Update Investment&#34;</span>, command<span style="color:#f92672">=</span>update_investment)
</span></span><span style="display:flex;"><span>        update_button<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, columnspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Configure grid expansion</span>
</span></span><span style="display:flex;"><span>        dialog<span style="color:#f92672">.</span>grid_columnconfigure(<span style="color:#ae81ff">1</span>, weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">remove_investment</span>(self, asset_type, tree):
</span></span><span style="display:flex;"><span>        selected <span style="color:#f92672">=</span> tree<span style="color:#f92672">.</span>selection()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> selected:
</span></span><span style="display:flex;"><span>            messagebox<span style="color:#f92672">.</span>showinfo(<span style="color:#e6db74">&#34;Selection Required&#34;</span>, <span style="color:#e6db74">&#34;Please select an investment to remove.&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Confirm deletion</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> messagebox<span style="color:#f92672">.</span>askyesno(<span style="color:#e6db74">&#34;Confirm Removal&#34;</span>, 
</span></span><span style="display:flex;"><span>                                  <span style="color:#e6db74">&#34;Are you sure you want to remove the selected investment(s)?&#34;</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get the values from the selected items</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item_id <span style="color:#f92672">in</span> selected:
</span></span><span style="display:flex;"><span>            values <span style="color:#f92672">=</span> tree<span style="color:#f92672">.</span>item(item_id, <span style="color:#e6db74">&#39;values&#39;</span>)
</span></span><span style="display:flex;"><span>            ticker <span style="color:#f92672">=</span> values[<span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># Assuming ticker is in second column</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Find and remove the investment from our data</span>
</span></span><span style="display:flex;"><span>            to_remove <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> id, inv <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> inv[<span style="color:#e6db74">&#34;ticker&#34;</span>] <span style="color:#f92672">==</span> ticker <span style="color:#f92672">and</span> inv[<span style="color:#e6db74">&#34;type&#34;</span>] <span style="color:#f92672">==</span> asset_type:
</span></span><span style="display:flex;"><span>                    to_remove<span style="color:#f92672">.</span>append(id)
</span></span><span style="display:flex;"><span>                    
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> id <span style="color:#f92672">in</span> to_remove:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">del</span> self<span style="color:#f92672">.</span>portfolio[id]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update UI</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>save_data()
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>update_display()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_display</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update all asset type tabs</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>update_asset_tab(<span style="color:#e6db74">&#34;stock&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>update_asset_tab(<span style="color:#e6db74">&#34;bond&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>update_asset_tab(<span style="color:#e6db74">&#34;cash&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update overview tab</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>update_overview()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_asset_tab</span>(self, asset_type):
</span></span><span style="display:flex;"><span>        tree <span style="color:#f92672">=</span> getattr(self, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>asset_type<span style="color:#e6db74">}</span><span style="color:#e6db74">_tree&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Clear existing entries</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> tree<span style="color:#f92672">.</span>get_children():
</span></span><span style="display:flex;"><span>            tree<span style="color:#f92672">.</span>delete(item)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Calculate total portfolio value</span>
</span></span><span style="display:flex;"><span>        total_value <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>calculate_total_value()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add investments to tree</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> id, investment <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> investment[<span style="color:#e6db74">&#34;type&#34;</span>] <span style="color:#f92672">==</span> asset_type:
</span></span><span style="display:flex;"><span>                value <span style="color:#f92672">=</span> investment[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">*</span> investment[<span style="color:#e6db74">&#34;price&#34;</span>]
</span></span><span style="display:flex;"><span>                allocation <span style="color:#f92672">=</span> value <span style="color:#f92672">/</span> total_value <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span> <span style="color:#66d9ef">if</span> total_value <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                tree<span style="color:#f92672">.</span>insert(<span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;end&#34;</span>, values<span style="color:#f92672">=</span>(
</span></span><span style="display:flex;"><span>                    investment[<span style="color:#e6db74">&#34;name&#34;</span>],
</span></span><span style="display:flex;"><span>                    investment[<span style="color:#e6db74">&#34;ticker&#34;</span>],
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>investment[<span style="color:#e6db74">&#39;shares&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>investment[<span style="color:#e6db74">&#39;price&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>allocation<span style="color:#e6db74">:</span><span style="color:#e6db74">.1f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>
</span></span><span style="display:flex;"><span>                ))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_overview</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Calculate total value</span>
</span></span><span style="display:flex;"><span>        total_value <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>calculate_total_value()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Update value label</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>total_value_label<span style="color:#f92672">.</span>config(text<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>total_value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># In a real app, update charts and other visualizations here</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_total_value</span>(self):
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> id, investment <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            total <span style="color:#f92672">+=</span> investment[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">*</span> investment[<span style="color:#e6db74">&#34;price&#34;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> total
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">new_portfolio</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> messagebox<span style="color:#f92672">.</span>askyesno(<span style="color:#e6db74">&#34;New Portfolio&#34;</span>, 
</span></span><span style="display:flex;"><span>                              <span style="color:#e6db74">&#34;Are you sure you want to create a new portfolio? This will delete all current data.&#34;</span>):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>portfolio <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>save_data()
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>update_display()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rebalance_portfolio</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># In a real app, this would be a complex algorithm</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># For now, we&#39;ll just show a placeholder dialog</span>
</span></span><span style="display:flex;"><span>        messagebox<span style="color:#f92672">.</span>showinfo(<span style="color:#e6db74">&#34;Rebalance Portfolio&#34;</span>, 
</span></span><span style="display:flex;"><span>                           <span style="color:#e6db74">&#34;In a complete application, this would analyze your portfolio and suggest trades to reach your target allocation.&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_risk_analysis</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a new window</span>
</span></span><span style="display:flex;"><span>        analysis <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Toplevel(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        analysis<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Risk Analysis&#34;</span>)
</span></span><span style="display:flex;"><span>        analysis<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;600x400&#34;</span>)
</span></span><span style="display:flex;"><span>        analysis<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Add some placeholder content</span>
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(analysis, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Portfolio Risk Analysis&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Metrics frame</span>
</span></span><span style="display:flex;"><span>        metrics_frame <span style="color:#f92672">=</span> ttk<span style="color:#f92672">.</span>LabelFrame(analysis, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Key Risk Metrics&#34;</span>)
</span></span><span style="display:flex;"><span>        metrics_frame<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        metrics <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;Beta:&#34;</span>, <span style="color:#e6db74">&#34;0.85&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;Sharpe Ratio:&#34;</span>, <span style="color:#e6db74">&#34;1.23&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;Standard Deviation:&#34;</span>, <span style="color:#e6db74">&#34;12.4%&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;Max Drawdown:&#34;</span>, <span style="color:#e6db74">&#34;-15.7%&#34;</span>),
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#34;Value at Risk (95%):&#34;</span>, <span style="color:#e6db74">&#34;$3,245&#34;</span>)
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i, (label, value) <span style="color:#f92672">in</span> enumerate(metrics):
</span></span><span style="display:flex;"><span>            ttk<span style="color:#f92672">.</span>Label(metrics_frame, text<span style="color:#f92672">=</span>label)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span>i, column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>            ttk<span style="color:#f92672">.</span>Label(metrics_frame, text<span style="color:#f92672">=</span>value)<span style="color:#f92672">.</span>grid(row<span style="color:#f92672">=</span>i, column<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, sticky<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;w&#34;</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(analysis, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Note: In a complete application, this would provide detailed risk metrics based on historical data and correlations between your holdings.&#34;</span>)<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_performance_chart</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a new window</span>
</span></span><span style="display:flex;"><span>        chart_window <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Toplevel(self<span style="color:#f92672">.</span>root)
</span></span><span style="display:flex;"><span>        chart_window<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Performance Chart&#34;</span>)
</span></span><span style="display:flex;"><span>        chart_window<span style="color:#f92672">.</span>geometry(<span style="color:#e6db74">&#34;800x500&#34;</span>)
</span></span><span style="display:flex;"><span>        chart_window<span style="color:#f92672">.</span>configure(padx<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        ttk<span style="color:#f92672">.</span>Label(chart_window, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Portfolio Performance&#34;</span>, font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#34;bold&#34;</span>))<span style="color:#f92672">.</span>pack(pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># In a real app, you would use matplotlib or another charting library</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># For now, just show a canvas with placeholder text</span>
</span></span><span style="display:flex;"><span>        canvas <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Canvas(chart_window, bg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;white&#34;</span>, height<span style="color:#f92672">=</span><span style="color:#ae81ff">400</span>)
</span></span><span style="display:flex;"><span>        canvas<span style="color:#f92672">.</span>pack(fill<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;both&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, padx<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, pady<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        canvas<span style="color:#f92672">.</span>create_text(
</span></span><span style="display:flex;"><span>            canvas<span style="color:#f92672">.</span>winfo_reqwidth() <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>, 
</span></span><span style="display:flex;"><span>            canvas<span style="color:#f92672">.</span>winfo_reqheight() <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>            text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[Performance Chart Would Be Here]</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">In a complete application, this would be a</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">charting library like Matplotlib showing</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">your portfolio&#39;s performance over time.&#34;</span>,
</span></span><span style="display:flex;"><span>            font<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#34;Arial&#34;</span>, <span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_about</span>(self):
</span></span><span style="display:flex;"><span>        messagebox<span style="color:#f92672">.</span>showinfo(<span style="color:#e6db74">&#34;About&#34;</span>, <span style="color:#e6db74">&#34;Portfolio Tracker v1.0</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">Created with Python and Tkinter</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">Part of the &#39;Learning Python in Public&#39; series&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">load_data</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(self<span style="color:#f92672">.</span>data_file):
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">with</span> open(self<span style="color:#f92672">.</span>data_file, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>                    self<span style="color:#f92672">.</span>portfolio <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(file)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Demo data for first-time users</span>
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>create_demo_data()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Data Error&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error loading data: </span><span style="color:#e6db74">{</span>str(e)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>portfolio <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">save_data</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">with</span> open(self<span style="color:#f92672">.</span>data_file, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>                json<span style="color:#f92672">.</span>dump(self<span style="color:#f92672">.</span>portfolio, file, indent<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            messagebox<span style="color:#f92672">.</span>showerror(<span style="color:#e6db74">&#34;Data Error&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error saving data: </span><span style="color:#e6db74">{</span>str(e)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_demo_data</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create some sample investments</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>portfolio <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;stock_AAPL_1&#34;</span>: {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;stock_AAPL_1&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Apple Inc.&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;ticker&#34;</span>: <span style="color:#e6db74">&#34;AAPL&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;shares&#34;</span>: <span style="color:#ae81ff">10</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;price&#34;</span>: <span style="color:#ae81ff">175.50</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;purchase_date&#34;</span>: <span style="color:#e6db74">&#34;2023-01-15&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;stock&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;stock_MSFT_2&#34;</span>: {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;stock_MSFT_2&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Microsoft Corporation&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;ticker&#34;</span>: <span style="color:#e6db74">&#34;MSFT&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;shares&#34;</span>: <span style="color:#ae81ff">5</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;price&#34;</span>: <span style="color:#ae81ff">325.20</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;purchase_date&#34;</span>: <span style="color:#e6db74">&#34;2023-02-20&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;stock&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;bond_TBILL_3&#34;</span>: {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;bond_TBILL_3&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;US Treasury Bill&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;ticker&#34;</span>: <span style="color:#e6db74">&#34;TBILL&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;shares&#34;</span>: <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;price&#34;</span>: <span style="color:#ae81ff">1000.00</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;purchase_date&#34;</span>: <span style="color:#e6db74">&#34;2023-03-10&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;bond&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;cash_SAVINGS_4&#34;</span>: {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;cash_SAVINGS_4&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;High Yield Savings&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;ticker&#34;</span>: <span style="color:#e6db74">&#34;SAVINGS&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;shares&#34;</span>: <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;price&#34;</span>: <span style="color:#ae81ff">5000.00</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;purchase_date&#34;</span>: <span style="color:#e6db74">&#34;2023-01-01&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;cash&#34;</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating and running the application when this file is executed directly</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    root <span style="color:#f92672">=</span> tk<span style="color:#f92672">.</span>Tk()
</span></span><span style="display:flex;"><span>    app <span style="color:#f92672">=</span> PortfolioTracker(root)
</span></span><span style="display:flex;"><span>    root<span style="color:#f92672">.</span>mainloop()
</span></span></code></pre></div><p>This portfolio tracker demonstrates several advanced concepts:</p>
<ul>
<li>Multiple windows and dialogs</li>
<li>Menus and tabbed interfaces</li>
<li>Complex layout with frames and grids</li>
<li>Data persistence and management</li>
<li>Object-oriented design for maintainability</li>
</ul>
<h3 id="5-best-practices-for-tkinter-applications">5. Best Practices for Tkinter Applications</h3>
<p>As you develop more complex Tkinter applications, keep these best practices in mind:</p>
<ol>
<li>**Separate UI from Logic: Keep your application logic (calculations, data processing) separate from your UI code (widget creation, layout). This makes your code easier to understand, test, and maintain. Using classes, as shown in the Expense Tracker and Portfolio Tracker examples, is a good way to achieve this. Your functions that perform calculations (calculate_investment) should ideally not directly manipulate widgets too much; instead, they can return values that another function then uses to update the UI.</li>
</ol>
<p>Use an Object-Oriented Approach: For anything beyond a very simple script, structuring your Tkinter application as a class (or multiple classes) is highly beneficial. This helps in organizing your code, managing state, and making your application more scalable. Notice how the ExpenseTracker and PortfolioTracker classes encapsulate all their widgets and methods.</p>
<p>Employ Layout Managers Effectively: Choose between pack, grid, and place wisely. grid is often the most versatile for structured layouts. pack is good for simpler, sequential layouts or side-by-side arrangements within frames. Avoid using place for most of your layout needs as it can make your UI less adaptable to window resizing or font changes, unless you require precise pixel control. Don&rsquo;t mix grid and pack within the same master window or frame, as it can lead to unexpected behavior.</p>
<p>Use ttk for a Modern Look: The tkinter.ttk module provides themed widgets that generally look better and more native than the classic Tkinter widgets. Always try to use ttk.Button, ttk.Label, etc., where available.</p>
<p>Keep the UI Responsive: For any tasks that might take more than a fraction of a second (e.g., complex financial calculations, network requests, file operations), run them in a separate thread to prevent the GUI from freezing. Use root.after() or queues to safely update the UI from these background threads, as demonstrated in the multithreading example.</p>
<p>Manage Widget References: When you need to interact with a widget after its creation (e.g., to get its value or update its text), store a reference to it, typically as an instance variable (e.g., self.my_entry = ttk.Entry(&hellip;)).</p>
<p>Provide User Feedback: Use labels, message boxes (tkinter.messagebox), or progress bars to inform the user about what the application is doing, especially during longer operations or when errors occur.</p>
<p>Handle Errors Gracefully: Use try-except blocks to catch potential errors (e.g., ValueError when converting entry text to numbers, IOError when dealing with files) and display user-friendly error messages instead of letting the application crash.</p>
<p>Organize with Frames: For complex interfaces, use Frame or ttk.LabelFrame widgets as containers to group related widgets. This makes your layout more modular and easier to manage.</p>
<p>Comment Your Code: Especially in UI programming where widget hierarchies and event bindings can become complex, good comments will help you (and others) understand your code later.</p>
<p>Conclusion: Your Gateway to Desktop Applications
Tkinter, while sometimes viewed as old-fashioned, remains an incredibly valuable tool in the Python ecosystem. As we&rsquo;ve seen, you can go from a simple window to a multi-tabbed, data-driven financial application with relative ease. Its built-in nature means you can quickly prototype ideas or build internal tools without worrying about external dependencies for your users.</p>
<p>For us finance professionals, this opens up a world of possibilities:</p>
<p>Creating custom calculators for specific financial models.
Building simple dashboards to track key metrics.
Developing tools to automate repetitive data entry or report generation tasks.
The examples we&rsquo;ve explored, from a basic investment calculator to a more comprehensive portfolio tracker, only scratch the surface. The key is to start simple, understand the core concepts of widgets, layout management, and event handling, and then gradually build up complexity.</p>
<p>While newer frameworks might offer more visual flair, Tkinter&rsquo;s simplicity, stability, and ubiquity make it an excellent starting point for GUI development in Python. I encourage you to take these examples, experiment with them, and see what useful applications you can build to make your financial workflows more efficient and user-friendly!</p>
]]></content:encoded></item><item><title>Part 15: Web Development Foundations with Python</title><link>https://michaelbrunger.com/python-web-development-foundations/</link><pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-web-development-foundations/</guid><description>Explore web development options in Python. Learn Flask for lightweight applications, Django for full-featured sites, or web scraping with requests and BeautifulSoup. Deploy your first web app.</description><content:encoded><![CDATA[<h1 id="python-learning-series-web-development-foundations">Python Learning Series: Web Development Foundations</h1>
<p><em>Part 15 of my 17-part series on learning Python as a finance professional</em></p>
<p>After exploring all the fundamentals of Python programming, it&rsquo;s time to put those skills to practical use by diving into web development. As a finance manager, I&rsquo;ve found that building simple web applications can help automate reports, create interactive dashboards, and share financial data across teams.</p>
<p>In this post, I&rsquo;ll cover three popular approaches to web development with Python:</p>
<ul>
<li><strong>Option A</strong>: Flask - A lightweight web framework</li>
<li><strong>Option B</strong>: Django - A full-featured web framework</li>
<li><strong>Option C</strong>: Web Scraping - Extracting financial data from websites</li>
</ul>
<p>Let&rsquo;s explore each option with practical examples relevant to finance work.</p>
<h2 id="option-a-flask---building-a-lightweight-financial-dashboard">Option A: Flask - Building a Lightweight Financial Dashboard</h2>
<p>Flask is perfect when you need a simple web interface without the overhead of a full framework. Let&rsquo;s build a basic financial dashboard that displays company expense data.</p>
<h3 id="setting-up-flask">Setting Up Flask</h3>
<p>First, we need to install Flask:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create and activate your virtual environment first</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Then install Flask</span>
</span></span><span style="display:flex;"><span>pip install flask
</span></span></code></pre></div><p>Now, let&rsquo;s create a simple Flask application in a file called <code>app.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask, render_template
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app <span style="color:#f92672">=</span> Flask(__name__)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sample financial data (in a real app, this would come from a database)</span>
</span></span><span style="display:flex;"><span>expense_data <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;month&#34;</span>: <span style="color:#e6db74">&#34;January&#34;</span>, <span style="color:#e6db74">&#34;marketing&#34;</span>: <span style="color:#ae81ff">2400</span>, <span style="color:#e6db74">&#34;operations&#34;</span>: <span style="color:#ae81ff">5000</span>, <span style="color:#e6db74">&#34;payroll&#34;</span>: <span style="color:#ae81ff">12000</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;month&#34;</span>: <span style="color:#e6db74">&#34;February&#34;</span>, <span style="color:#e6db74">&#34;marketing&#34;</span>: <span style="color:#ae81ff">1800</span>, <span style="color:#e6db74">&#34;operations&#34;</span>: <span style="color:#ae81ff">5100</span>, <span style="color:#e6db74">&#34;payroll&#34;</span>: <span style="color:#ae81ff">12000</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;month&#34;</span>: <span style="color:#e6db74">&#34;March&#34;</span>, <span style="color:#e6db74">&#34;marketing&#34;</span>: <span style="color:#ae81ff">2200</span>, <span style="color:#e6db74">&#34;operations&#34;</span>: <span style="color:#ae81ff">4800</span>, <span style="color:#e6db74">&#34;payroll&#34;</span>: <span style="color:#ae81ff">12500</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;month&#34;</span>: <span style="color:#e6db74">&#34;April&#34;</span>, <span style="color:#e6db74">&#34;marketing&#34;</span>: <span style="color:#ae81ff">2500</span>, <span style="color:#e6db74">&#34;operations&#34;</span>: <span style="color:#ae81ff">5200</span>, <span style="color:#e6db74">&#34;payroll&#34;</span>: <span style="color:#ae81ff">12500</span>}
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">index</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate totals</span>
</span></span><span style="display:flex;"><span>    total_marketing <span style="color:#f92672">=</span> sum(month[<span style="color:#e6db74">&#34;marketing&#34;</span>] <span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> expense_data)
</span></span><span style="display:flex;"><span>    total_operations <span style="color:#f92672">=</span> sum(month[<span style="color:#e6db74">&#34;operations&#34;</span>] <span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> expense_data)
</span></span><span style="display:flex;"><span>    total_payroll <span style="color:#f92672">=</span> sum(month[<span style="color:#e6db74">&#34;payroll&#34;</span>] <span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> expense_data)
</span></span><span style="display:flex;"><span>    grand_total <span style="color:#f92672">=</span> total_marketing <span style="color:#f92672">+</span> total_operations <span style="color:#f92672">+</span> total_payroll
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> render_template(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;dashboard.html&#39;</span>, 
</span></span><span style="display:flex;"><span>        expense_data<span style="color:#f92672">=</span>expense_data,
</span></span><span style="display:flex;"><span>        total_marketing<span style="color:#f92672">=</span>total_marketing,
</span></span><span style="display:flex;"><span>        total_operations<span style="color:#f92672">=</span>total_operations,
</span></span><span style="display:flex;"><span>        total_payroll<span style="color:#f92672">=</span>total_payroll,
</span></span><span style="display:flex;"><span>        grand_total<span style="color:#f92672">=</span>grand_total,
</span></span><span style="display:flex;"><span>        chart_data<span style="color:#f92672">=</span>json<span style="color:#f92672">.</span>dumps(expense_data)
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    app<span style="color:#f92672">.</span>run(debug<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><h3 id="creating-templates">Creating Templates</h3>
<p>Flask uses templates to generate HTML. Create a <code>templates</code> folder in the same directory as your <code>app.py</code> file, and add a new file called <code>dashboard.html</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">title</span>&gt;Finance Dashboard&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ url_for(&#39;static&#39;, filename=&#39;styles.css&#39;) }}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/chart.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">h1</span>&gt;Quarterly Expense Dashboard&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary-box&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">h2</span>&gt;Q1 + April Expense Summary&lt;/<span style="color:#f92672">h2</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">p</span>&gt;Total Marketing: ${{ total_marketing }}&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">p</span>&gt;Total Operations: ${{ total_operations }}&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">p</span>&gt;Total Payroll: ${{ total_payroll }}&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;grand-total&#34;</span>&gt;Grand Total: ${{ grand_total }}&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;chart-container&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">canvas</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;expenseChart&#34;</span>&gt;&lt;/<span style="color:#f92672">canvas</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">table</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;expense-table&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">thead</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">th</span>&gt;Month&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">th</span>&gt;Marketing&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">th</span>&gt;Operations&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">th</span>&gt;Payroll&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">th</span>&gt;Monthly Total&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">thead</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">tbody</span>&gt;
</span></span><span style="display:flex;"><span>                {% for month in expense_data %}
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">td</span>&gt;{{ month.month }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">td</span>&gt;${{ month.marketing }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">td</span>&gt;${{ month.operations }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">td</span>&gt;${{ month.payroll }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">td</span>&gt;${{ month.marketing + month.operations + month.payroll }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                {% endfor %}
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">tbody</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">table</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Parse the data from Flask
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">expenseData</span> <span style="color:#f92672">=</span> {{ <span style="color:#a6e22e">chart_data</span><span style="color:#f92672">|</span><span style="color:#a6e22e">safe</span> }};
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Prepare data for Chart.js
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">labels</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expenseData</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">month</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">marketingData</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expenseData</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">marketing</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">operationsData</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expenseData</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">operations</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">payrollData</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expenseData</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">payroll</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Create the chart
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ctx</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;expenseChart&#39;</span>).<span style="color:#a6e22e">getContext</span>(<span style="color:#e6db74">&#39;2d&#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">expenseChart</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Chart</span>(<span style="color:#a6e22e">ctx</span>, {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;bar&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">labels</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">labels</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">datasets</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">label</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Marketing&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">marketingData</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">backgroundColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;rgba(54, 162, 235, 0.5)&#39;</span>
</span></span><span style="display:flex;"><span>                    },
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">label</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Operations&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">operationsData</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">backgroundColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;rgba(255, 206, 86, 0.5)&#39;</span>
</span></span><span style="display:flex;"><span>                    },
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">label</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Payroll&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">payrollData</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">backgroundColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;rgba(255, 99, 132, 0.5)&#39;</span>
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                ]
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">options</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">responsive</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">scales</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">x</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">stacked</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>                    },
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">y</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">stacked</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">beginAtZero</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><h3 id="adding-css-styles">Adding CSS Styles</h3>
<p>Create a <code>static</code> folder in the same directory as your <code>app.py</code> file, and add a file called <code>styles.css</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Arial, <span style="color:#66d9ef">sans-serif</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">line-height</span>: <span style="color:#ae81ff">1.6</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f5f5f5</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">container</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">1000</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">auto</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#66d9ef">white</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>: <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> rgba(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0.1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#333</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">center</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">summary-box</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f9f9f9</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">15</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">grand-total</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">bold</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">1.2</span><span style="color:#66d9ef">em</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#0066cc</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">chart-container</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">400</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">expense-table</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-collapse</span>: <span style="color:#66d9ef">collapse</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">expense-table</span> <span style="color:#f92672">th</span><span style="color:#f92672">,</span> .<span style="color:#a6e22e">expense-table</span> <span style="color:#f92672">td</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">right</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-bottom</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#ddd</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">expense-table</span> <span style="color:#f92672">th</span>:<span style="color:#a6e22e">first-child</span><span style="color:#f92672">,</span> .<span style="color:#a6e22e">expense-table</span> <span style="color:#f92672">td</span>:<span style="color:#a6e22e">first-child</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">left</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">expense-table</span> <span style="color:#f92672">th</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f2f2f2</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">expense-table</span> <span style="color:#f92672">tr</span>:<span style="color:#a6e22e">hover</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f5f5f5</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="running-the-flask-application">Running the Flask Application</h3>
<p>Run your application by executing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>python app<span style="color:#f92672">.</span>py
</span></span></code></pre></div><p>Then open your browser to <code>http://127.0.0.1:5000/</code> to see your dashboard!</p>
<h3 id="project-structure">Project Structure</h3>
<p>Your project should have this structure:</p>
<pre tabindex="0"><code>financial-dashboard/
â”œâ”€â”€ app.py
â”œâ”€â”€ static/
â”‚   â””â”€â”€ styles.css
â””â”€â”€ templates/
    â””â”€â”€ dashboard.html
</code></pre><h2 id="option-b-django---building-a-full-featured-financial-application">Option B: Django - Building a Full-Featured Financial Application</h2>
<p>Django is a more robust framework that&rsquo;s perfect for complex applications. Let&rsquo;s create a simplified financial transaction tracker.</p>
<h3 id="installing-django">Installing Django</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pip install django
</span></span></code></pre></div><h3 id="creating-a-new-django-project">Creating a New Django Project</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>django<span style="color:#f92672">-</span>admin startproject financial_tracker
</span></span><span style="display:flex;"><span>cd financial_tracker
</span></span><span style="display:flex;"><span>python manage<span style="color:#f92672">.</span>py startapp transactions
</span></span></code></pre></div><h3 id="defining-models">Defining Models</h3>
<p>Edit <code>transactions/models.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.db <span style="color:#f92672">import</span> models
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> django.utils <span style="color:#f92672">import</span> timezone
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Category</span>(models<span style="color:#f92672">.</span>Model):
</span></span><span style="display:flex;"><span>    name <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __str__(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>name
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Meta</span>:
</span></span><span style="display:flex;"><span>        verbose_name_plural <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Categories&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Transaction</span>(models<span style="color:#f92672">.</span>Model):
</span></span><span style="display:flex;"><span>    TRANSACTION_TYPES <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        (<span style="color:#e6db74">&#39;income&#39;</span>, <span style="color:#e6db74">&#39;Income&#39;</span>),
</span></span><span style="display:flex;"><span>        (<span style="color:#e6db74">&#39;expense&#39;</span>, <span style="color:#e6db74">&#39;Expense&#39;</span>),
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    amount <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>DecimalField(max_digits<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, decimal_places<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    description <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">255</span>)
</span></span><span style="display:flex;"><span>    category <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>ForeignKey(Category, on_delete<span style="color:#f92672">=</span>models<span style="color:#f92672">.</span>CASCADE)
</span></span><span style="display:flex;"><span>    transaction_type <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, choices<span style="color:#f92672">=</span>TRANSACTION_TYPES)
</span></span><span style="display:flex;"><span>    date <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>DateField(default<span style="color:#f92672">=</span>timezone<span style="color:#f92672">.</span>now)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __str__(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>description<span style="color:#e6db74">}</span><span style="color:#e6db74"> - $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><h3 id="registering-the-app">Registering the App</h3>
<p>Edit <code>financial_tracker/settings.py</code> to add the app to <code>INSTALLED_APPS</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>INSTALLED_APPS <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;django.contrib.admin&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;django.contrib.auth&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;django.contrib.contenttypes&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;django.contrib.sessions&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;django.contrib.messages&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;django.contrib.staticfiles&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;transactions&#39;</span>,  <span style="color:#75715e"># Add your app here</span>
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><h3 id="creating-migrations-and-admin-interface">Creating Migrations and Admin Interface</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>python manage<span style="color:#f92672">.</span>py makemigrations
</span></span><span style="display:flex;"><span>python manage<span style="color:#f92672">.</span>py migrate
</span></span><span style="display:flex;"><span>python manage<span style="color:#f92672">.</span>py createsuperuser
</span></span></code></pre></div><p>Register the models with the admin interface by editing <code>transactions/admin.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.contrib <span style="color:#f92672">import</span> admin
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .models <span style="color:#f92672">import</span> Category, Transaction
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@admin.register</span>(Category)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CategoryAdmin</span>(admin<span style="color:#f92672">.</span>ModelAdmin):
</span></span><span style="display:flex;"><span>    list_display <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;name&#39;</span>,)
</span></span><span style="display:flex;"><span>    search_fields <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;name&#39;</span>,)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@admin.register</span>(Transaction)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TransactionAdmin</span>(admin<span style="color:#f92672">.</span>ModelAdmin):
</span></span><span style="display:flex;"><span>    list_display <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;description&#39;</span>, <span style="color:#e6db74">&#39;amount&#39;</span>, <span style="color:#e6db74">&#39;category&#39;</span>, <span style="color:#e6db74">&#39;transaction_type&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>)
</span></span><span style="display:flex;"><span>    list_filter <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;category&#39;</span>, <span style="color:#e6db74">&#39;transaction_type&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>)
</span></span><span style="display:flex;"><span>    search_fields <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;description&#39;</span>,)
</span></span><span style="display:flex;"><span>    date_hierarchy <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;date&#39;</span>
</span></span></code></pre></div><h3 id="creating-views">Creating Views</h3>
<p>Edit <code>transactions/views.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.shortcuts <span style="color:#f92672">import</span> render
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> django.db.models <span style="color:#f92672">import</span> Sum
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .models <span style="color:#f92672">import</span> Transaction
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dashboard</span>(request):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Get recent transactions</span>
</span></span><span style="display:flex;"><span>    recent_transactions <span style="color:#f92672">=</span> Transaction<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>order_by(<span style="color:#e6db74">&#39;-date&#39;</span>)[:<span style="color:#ae81ff">10</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate summary statistics</span>
</span></span><span style="display:flex;"><span>    total_income <span style="color:#f92672">=</span> Transaction<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>filter(transaction_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;income&#39;</span>)<span style="color:#f92672">.</span>aggregate(Sum(<span style="color:#e6db74">&#39;amount&#39;</span>))[<span style="color:#e6db74">&#39;amount__sum&#39;</span>] <span style="color:#f92672">or</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    total_expenses <span style="color:#f92672">=</span> Transaction<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>filter(transaction_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;expense&#39;</span>)<span style="color:#f92672">.</span>aggregate(Sum(<span style="color:#e6db74">&#39;amount&#39;</span>))[<span style="color:#e6db74">&#39;amount__sum&#39;</span>] <span style="color:#f92672">or</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    net_balance <span style="color:#f92672">=</span> total_income <span style="color:#f92672">-</span> total_expenses
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Get monthly data for chart</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> django.db.models.functions <span style="color:#f92672">import</span> TruncMonth
</span></span><span style="display:flex;"><span>    monthly_data <span style="color:#f92672">=</span> Transaction<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>annotate(month<span style="color:#f92672">=</span>TruncMonth(<span style="color:#e6db74">&#39;date&#39;</span>)) \
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>values(<span style="color:#e6db74">&#39;month&#39;</span>, <span style="color:#e6db74">&#39;transaction_type&#39;</span>) \
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>annotate(total<span style="color:#f92672">=</span>Sum(<span style="color:#e6db74">&#39;amount&#39;</span>)) \
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>order_by(<span style="color:#e6db74">&#39;month&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Prepare data for chart</span>
</span></span><span style="display:flex;"><span>    months <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    income_data <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    expense_data <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    current_month <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>    current_income <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    current_expense <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> monthly_data:
</span></span><span style="display:flex;"><span>        month_str <span style="color:#f92672">=</span> item[<span style="color:#e6db74">&#39;month&#39;</span>]<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%b %Y&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> current_month <span style="color:#f92672">!=</span> month_str:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> current_month <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                months<span style="color:#f92672">.</span>append(current_month)
</span></span><span style="display:flex;"><span>                income_data<span style="color:#f92672">.</span>append(current_income)
</span></span><span style="display:flex;"><span>                expense_data<span style="color:#f92672">.</span>append(current_expense)
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            current_month <span style="color:#f92672">=</span> month_str
</span></span><span style="display:flex;"><span>            current_income <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            current_expense <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> item[<span style="color:#e6db74">&#39;transaction_type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;income&#39;</span>:
</span></span><span style="display:flex;"><span>            current_income <span style="color:#f92672">=</span> float(item[<span style="color:#e6db74">&#39;total&#39;</span>])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            current_expense <span style="color:#f92672">=</span> float(item[<span style="color:#e6db74">&#39;total&#39;</span>])
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add the last month</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> current_month <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        months<span style="color:#f92672">.</span>append(current_month)
</span></span><span style="display:flex;"><span>        income_data<span style="color:#f92672">.</span>append(current_income)
</span></span><span style="display:flex;"><span>        expense_data<span style="color:#f92672">.</span>append(current_expense)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    context <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;recent_transactions&#39;</span>: recent_transactions,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;total_income&#39;</span>: total_income,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;total_expenses&#39;</span>: total_expenses,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;net_balance&#39;</span>: net_balance,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;months&#39;</span>: months,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;income_data&#39;</span>: income_data,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;expense_data&#39;</span>: expense_data,
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> render(request, <span style="color:#e6db74">&#39;transactions/dashboard.html&#39;</span>, context)
</span></span></code></pre></div><h3 id="setting-up-urls">Setting Up URLs</h3>
<p>Create <code>transactions/urls.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.urls <span style="color:#f92672">import</span> path
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> . <span style="color:#f92672">import</span> views
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>urlpatterns <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    path(<span style="color:#e6db74">&#39;&#39;</span>, views<span style="color:#f92672">.</span>dashboard, name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dashboard&#39;</span>),
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>Then edit <code>financial_tracker/urls.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.contrib <span style="color:#f92672">import</span> admin
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> django.urls <span style="color:#f92672">import</span> path, include
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>urlpatterns <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    path(<span style="color:#e6db74">&#39;admin/&#39;</span>, admin<span style="color:#f92672">.</span>site<span style="color:#f92672">.</span>urls),
</span></span><span style="display:flex;"><span>    path(<span style="color:#e6db74">&#39;&#39;</span>, include(<span style="color:#e6db74">&#39;transactions.urls&#39;</span>)),
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><h3 id="creating-templates-1">Creating Templates</h3>
<p>Create directories:</p>
<pre tabindex="0"><code>mkdir -p transactions/templates/transactions
</code></pre><p>Create <code>transactions/templates/transactions/dashboard.html</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{% load static %}
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">title</span>&gt;Financial Tracker&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{% static &#39;transactions/styles.css&#39; %}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/chart.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">h1</span>&gt;Financial Tracker Dashboard&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary-container&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary-box income&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">h3</span>&gt;Total Income&lt;/<span style="color:#f92672">h3</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">p</span>&gt;${{ total_income }}&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary-box expenses&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">h3</span>&gt;Total Expenses&lt;/<span style="color:#f92672">h3</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">p</span>&gt;${{ total_expenses }}&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary-box balance&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">h3</span>&gt;Net Balance&lt;/<span style="color:#f92672">h3</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">p</span>&gt;${{ net_balance }}&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;chart-container&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">canvas</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;financialChart&#34;</span>&gt;&lt;/<span style="color:#f92672">canvas</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;recent-transactions&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">h2</span>&gt;Recent Transactions&lt;/<span style="color:#f92672">h2</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">table</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">thead</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">th</span>&gt;Date&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">th</span>&gt;Description&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">th</span>&gt;Category&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">th</span>&gt;Type&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">th</span>&gt;Amount&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;/<span style="color:#f92672">thead</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">tbody</span>&gt;
</span></span><span style="display:flex;"><span>                    {% for transaction in recent_transactions %}
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">tr</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ transaction.transaction_type }}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">td</span>&gt;{{ transaction.date }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">td</span>&gt;{{ transaction.description }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">td</span>&gt;{{ transaction.category }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">td</span>&gt;{{ transaction.transaction_type|title }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">td</span>&gt;${{ transaction.amount }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                    {% endfor %}
</span></span><span style="display:flex;"><span>                &lt;/<span style="color:#f92672">tbody</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">table</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Get data from context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">months</span> <span style="color:#f92672">=</span> {{ <span style="color:#a6e22e">months</span><span style="color:#f92672">|</span><span style="color:#a6e22e">safe</span> }};
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">incomeData</span> <span style="color:#f92672">=</span> {{ <span style="color:#a6e22e">income_data</span><span style="color:#f92672">|</span><span style="color:#a6e22e">safe</span> }};
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">expenseData</span> <span style="color:#f92672">=</span> {{ <span style="color:#a6e22e">expense_data</span><span style="color:#f92672">|</span><span style="color:#a6e22e">safe</span> }};
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Create chart
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ctx</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;financialChart&#39;</span>).<span style="color:#a6e22e">getContext</span>(<span style="color:#e6db74">&#39;2d&#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">financialChart</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Chart</span>(<span style="color:#a6e22e">ctx</span>, {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;bar&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">labels</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">months</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">datasets</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">label</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Income&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">incomeData</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">backgroundColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;rgba(75, 192, 192, 0.5)&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">borderColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;rgba(75, 192, 192, 1)&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">borderWidth</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    },
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">label</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Expenses&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">expenseData</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">backgroundColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;rgba(255, 99, 132, 0.5)&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">borderColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;rgba(255, 99, 132, 1)&#39;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">borderWidth</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                ]
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">options</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">responsive</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">scales</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">y</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">beginAtZero</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><h3 id="adding-static-files">Adding Static Files</h3>
<p>Create directories:</p>
<pre tabindex="0"><code>mkdir -p transactions/static/transactions
</code></pre><p>Create <code>transactions/static/transactions/styles.css</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Arial, <span style="color:#66d9ef">sans-serif</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">line-height</span>: <span style="color:#ae81ff">1.6</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f5f5f5</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">container</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">1200</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">auto</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#66d9ef">white</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>: <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> rgba(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0.1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#333</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">center</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">summary-container</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">flex</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">justify-content</span>: <span style="color:#66d9ef">space-between</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">summary-box</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">flex</span>: <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">center</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">income</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#d4edda</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#155724</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">expenses</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f8d7da</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#721c24</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">balance</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#cce5ff</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#004085</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">summary-box</span> <span style="color:#f92672">h3</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">summary-box</span> <span style="color:#f92672">p</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">24</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">bold</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">chart-container</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">400</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">recent-transactions</span> <span style="color:#f92672">h2</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">15</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">table</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-collapse</span>: <span style="color:#66d9ef">collapse</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">th</span><span style="color:#f92672">,</span> <span style="color:#f92672">td</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">12</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">15</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">left</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-bottom</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#ddd</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">th</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f2f2f2</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">tr</span>.<span style="color:#a6e22e">income</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: rgba(<span style="color:#ae81ff">212</span>, <span style="color:#ae81ff">237</span>, <span style="color:#ae81ff">218</span>, <span style="color:#ae81ff">0.2</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">tr</span>.<span style="color:#a6e22e">expense</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: rgba(<span style="color:#ae81ff">248</span>, <span style="color:#ae81ff">215</span>, <span style="color:#ae81ff">218</span>, <span style="color:#ae81ff">0.2</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">tr</span>:<span style="color:#a6e22e">hover</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#f5f5f5</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="running-the-django-application">Running the Django Application</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>python manage<span style="color:#f92672">.</span>py runserver
</span></span></code></pre></div><p>Access the admin interface at <code>http://127.0.0.1:8000/admin/</code> and add some sample data. Then view your dashboard at <code>http://127.0.0.1:8000/</code>.</p>
<h2 id="option-c-web-scraping---extracting-financial-data">Option C: Web Scraping - Extracting Financial Data</h2>
<p>Let&rsquo;s create a simple web scraper to extract stock price data.</p>
<h3 id="installing-required-libraries">Installing Required Libraries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pip install requests beautifulsoup4 pandas matplotlib
</span></span></code></pre></div><h3 id="creating-a-stock-price-scraper">Creating a Stock Price Scraper</h3>
<p>Create a file named <code>stock_scraper.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> bs4 <span style="color:#f92672">import</span> BeautifulSoup
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_stock_data</span>(ticker):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Scrape basic stock information for the given ticker.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;https://finance.yahoo.com/quote/</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;User-Agent&#34;</span>: <span style="color:#e6db74">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url, headers<span style="color:#f92672">=</span>headers)
</span></span><span style="display:flex;"><span>        response<span style="color:#f92672">.</span>raise_for_status()  <span style="color:#75715e"># Raise exception for 4XX/5XX responses</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        soup <span style="color:#f92672">=</span> BeautifulSoup(response<span style="color:#f92672">.</span>text, <span style="color:#e6db74">&#39;html.parser&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract the company name</span>
</span></span><span style="display:flex;"><span>        company_name <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;h1&#39;</span>, class_<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;D(ib)&#39;</span>)<span style="color:#f92672">.</span>text<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract current price</span>
</span></span><span style="display:flex;"><span>        current_price <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;fin-streamer&#39;</span>, {<span style="color:#e6db74">&#39;data-field&#39;</span>: <span style="color:#e6db74">&#39;regularMarketPrice&#39;</span>})<span style="color:#f92672">.</span>text
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract previous close</span>
</span></span><span style="display:flex;"><span>        prev_close_label <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;td&#39;</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Previous Close&#39;</span>)
</span></span><span style="display:flex;"><span>        prev_close <span style="color:#f92672">=</span> prev_close_label<span style="color:#f92672">.</span>find_next_sibling(<span style="color:#e6db74">&#39;td&#39;</span>)<span style="color:#f92672">.</span>text <span style="color:#66d9ef">if</span> prev_close_label <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;N/A&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract open price</span>
</span></span><span style="display:flex;"><span>        open_label <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;td&#39;</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Open&#39;</span>)
</span></span><span style="display:flex;"><span>        open_price <span style="color:#f92672">=</span> open_label<span style="color:#f92672">.</span>find_next_sibling(<span style="color:#e6db74">&#39;td&#39;</span>)<span style="color:#f92672">.</span>text <span style="color:#66d9ef">if</span> open_label <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;N/A&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract day range</span>
</span></span><span style="display:flex;"><span>        day_range_label <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;td&#39;</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Day&#39;s Range&#34;</span>)
</span></span><span style="display:flex;"><span>        day_range <span style="color:#f92672">=</span> day_range_label<span style="color:#f92672">.</span>find_next_sibling(<span style="color:#e6db74">&#39;td&#39;</span>)<span style="color:#f92672">.</span>text <span style="color:#66d9ef">if</span> day_range_label <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;N/A&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract 52 week range</span>
</span></span><span style="display:flex;"><span>        week_range_label <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;td&#39;</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;52 Week Range&#39;</span>)
</span></span><span style="display:flex;"><span>        week_range <span style="color:#f92672">=</span> week_range_label<span style="color:#f92672">.</span>find_next_sibling(<span style="color:#e6db74">&#39;td&#39;</span>)<span style="color:#f92672">.</span>text <span style="color:#66d9ef">if</span> week_range_label <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;N/A&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract volume</span>
</span></span><span style="display:flex;"><span>        volume_label <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;td&#39;</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Volume&#39;</span>)
</span></span><span style="display:flex;"><span>        volume <span style="color:#f92672">=</span> volume_label<span style="color:#f92672">.</span>find_next_sibling(<span style="color:#e6db74">&#39;td&#39;</span>)<span style="color:#f92672">.</span>text <span style="color:#66d9ef">if</span> volume_label <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;N/A&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract market cap</span>
</span></span><span style="display:flex;"><span>        market_cap_label <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;td&#39;</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Market Cap&#39;</span>)
</span></span><span style="display:flex;"><span>        market_cap <span style="color:#f92672">=</span> market_cap_label<span style="color:#f92672">.</span>find_next_sibling(<span style="color:#e6db74">&#39;td&#39;</span>)<span style="color:#f92672">.</span>text <span style="color:#66d9ef">if</span> market_cap_label <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;N/A&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract P/E ratio</span>
</span></span><span style="display:flex;"><span>        pe_ratio_label <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;td&#39;</span>, text<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;PE Ratio (TTM)&#39;</span>)
</span></span><span style="display:flex;"><span>        pe_ratio <span style="color:#f92672">=</span> pe_ratio_label<span style="color:#f92672">.</span>find_next_sibling(<span style="color:#e6db74">&#39;td&#39;</span>)<span style="color:#f92672">.</span>text <span style="color:#66d9ef">if</span> pe_ratio_label <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;N/A&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a dictionary with all the data</span>
</span></span><span style="display:flex;"><span>        stock_data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Company&#39;</span>: company_name,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Ticker&#39;</span>: ticker,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Current Price&#39;</span>: current_price,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Previous Close&#39;</span>: prev_close,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Open&#39;</span>: open_price,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Day Range&#39;</span>: day_range,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;52 Week Range&#39;</span>: week_range,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Volume&#39;</span>: volume,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Market Cap&#39;</span>: market_cap,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;PE Ratio (TTM)&#39;</span>: pe_ratio,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Last Updated&#39;</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %H:%M:%S&#39;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> stock_data
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error fetching data for </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>e<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_historical_data</span>(ticker, period<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;1mo&#39;</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Scrape historical price data for charting.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;https://finance.yahoo.com/quote/</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">/history&#34;</span>
</span></span><span style="display:flex;"><span>    headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;User-Agent&#34;</span>: <span style="color:#e6db74">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># For a proper application, you would use Yahoo Finance API or another service</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This is a simplified example for demonstration purposes</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Instead of actually scraping (which is complex for the history page),</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># we&#39;ll use pandas_datareader which is more reliable for historical data</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> pandas_datareader.data <span style="color:#66d9ef">as</span> web
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        start_date <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Timestamp<span style="color:#f92672">.</span>now() <span style="color:#f92672">-</span> pd<span style="color:#f92672">.</span>DateOffset(months<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> period <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;3mo&#39;</span>:
</span></span><span style="display:flex;"><span>            start_date <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Timestamp<span style="color:#f92672">.</span>now() <span style="color:#f92672">-</span> pd<span style="color:#f92672">.</span>DateOffset(months<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> period <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;6mo&#39;</span>:
</span></span><span style="display:flex;"><span>            start_date <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Timestamp<span style="color:#f92672">.</span>now() <span style="color:#f92672">-</span> pd<span style="color:#f92672">.</span>DateOffset(months<span style="color:#f92672">=</span><span style="color:#ae81ff">6</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> period <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1y&#39;</span>:
</span></span><span style="display:flex;"><span>            start_date <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Timestamp<span style="color:#f92672">.</span>now() <span style="color:#f92672">-</span> pd<span style="color:#f92672">.</span>DateOffset(years<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        end_date <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Timestamp<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Get data from Yahoo Finance</span>
</span></span><span style="display:flex;"><span>        df <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>DataReader(ticker, <span style="color:#e6db74">&#39;yahoo&#39;</span>, start_date, end_date)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error fetching historical data for </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>e<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">plot_stock_price</span>(ticker, period<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;1mo&#39;</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Plot the historical stock price.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> get_historical_data(ticker, period)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> df <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>plot(df<span style="color:#f92672">.</span>index, df[<span style="color:#e6db74">&#39;Close&#39;</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> Close Price&#39;</span>)
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> Stock Price - Last </span><span style="color:#e6db74">{</span>period<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Date&#39;</span>)
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Price ($)&#39;</span>)
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Save the figure</span>
</span></span><span style="display:flex;"><span>    file_name <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span><span style="color:#e6db74">{</span>period<span style="color:#e6db74">}</span><span style="color:#e6db74">_price_chart.png&#34;</span>
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>savefig(file_name)
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> file_name
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Main function to demonstrate the stock scraper.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># List of stock tickers to analyze</span>
</span></span><span style="display:flex;"><span>    tickers <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;AAPL&#39;</span>, <span style="color:#e6db74">&#39;MSFT&#39;</span>, <span style="color:#e6db74">&#39;GOOGL&#39;</span>, <span style="color:#e6db74">&#39;AMZN&#39;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create a DataFrame to store all stock data</span>
</span></span><span style="display:flex;"><span>    all_data <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ticker <span style="color:#f92672">in</span> tickers:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Fetching data for </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">...&#34;</span>)
</span></span><span style="display:flex;"><span>        stock_data <span style="color:#f92672">=</span> get_stock_data(ticker)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> stock_data:
</span></span><span style="display:flex;"><span>            all_data<span style="color:#f92672">.</span>append(stock_data)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Generate and save a price chart</span>
</span></span><span style="display:flex;"><span>            chart_file <span style="color:#f92672">=</span> plot_stock_price(ticker, <span style="color:#e6db74">&#39;3mo&#39;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> chart_file:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Chart saved as </span><span style="color:#e6db74">{</span>chart_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Convert to DataFrame for easier analysis and display</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> all_data:
</span></span><span style="display:flex;"><span>        df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(all_data)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Stock Data Summary:&#34;</span>)
</span></span><span style="display:flex;"><span>        print(df)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Save to CSV</span>
</span></span><span style="display:flex;"><span>        df<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#39;stock_data_summary.csv&#39;</span>, index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Data saved to stock_data_summary.csv&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><h3 id="running-the-web-scraper">Running the Web Scraper</h3>
<p>Execute the script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pip install pandas<span style="color:#f92672">-</span>datareader  <span style="color:#75715e"># Additional dependency for the example</span>
</span></span><span style="display:flex;"><span>python stock_scraper<span style="color:#f92672">.</span>py
</span></span></code></pre></div><p>This script will:</p>
<ol>
<li>Fetch current stock data for Apple, Microsoft, Google, and Amazon</li>
<li>Generate price charts for each stock</li>
<li>Save all data to a CSV file</li>
</ol>
<h2 id="deploying-your-web-application">Deploying Your Web Application</h2>
<p>Once you&rsquo;ve built your web application, you&rsquo;ll want to deploy it so others can access it.</p>
<h3 id="deploying-to-render-free-alternative-to-heroku">Deploying to Render (Free Alternative to Heroku)</h3>
<p>Render is a good free alternative since Heroku no longer offers a free tier.</p>
<h4 id="for-flask-applications">For Flask Applications:</h4>
<ol>
<li>Create a <code>requirements.txt</code> file:</li>
</ol>
<pre tabindex="0"><code>flask==2.0.1
gunicorn==20.1.0
</code></pre><ol start="2">
<li>Create a <code>Procfile</code>:</li>
</ol>
<pre tabindex="0"><code>web: gunicorn app:app
</code></pre><ol start="3">
<li>Create a new project on GitHub with your app code</li>
<li>Sign up for a Render account at render.com</li>
<li>Create a new Web Service</li>
<li>Connect your GitHub repository</li>
<li>Configure settings:
<ul>
<li>Environment: Python 3</li>
<li>Build Command: <code>pip install -r requirements.txt</code></li>
<li>Start Command: <code>gunicorn app:app</code></li>
</ul>
</li>
<li>Click &ldquo;Create Web Service&rdquo;</li>
</ol>
<h4 id="for-django-applications">For Django Applications:</h4>
<ol>
<li>Update <code>settings.py</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add your Render domain to allowed hosts</span>
</span></span><span style="display:flex;"><span>ALLOWED_HOSTS <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;localhost&#39;</span>, <span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, <span style="color:#e6db74">&#39;your-app-name.onrender.com&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Static files settings</span>
</span></span><span style="display:flex;"><span>STATIC_URL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/static/&#39;</span>
</span></span><span style="display:flex;"><span>STATIC_ROOT <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(BASE_DIR, <span style="color:#e6db74">&#39;staticfiles&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Configure database (use SQLite for simplicity)</span>
</span></span><span style="display:flex;"><span>DATABASES <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;default&#39;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;ENGINE&#39;</span>: <span style="color:#e6db74">&#39;django.db.backends.sqlite3&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;NAME&#39;</span>: os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(BASE_DIR, <span style="color:#e6db74">&#39;db.sqlite3&#39;</span>),
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ol start="2">
<li>Create a <code>requirements.txt</code> file:</li>
</ol>
<pre tabindex="0"><code>django==4.0.0
gunicorn==20.1.0
whitenoise==5.3.0
</code></pre><ol start="3">
<li>Create a <code>Procfile</code>:</li>
</ol>
<pre tabindex="0"><code>web: gunicorn financial_tracker.wsgi
</code></pre><ol start="4">
<li>Follow the same steps as Flask to deploy on Render</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>In this post, we&rsquo;ve covered three different approaches to web development with Python:</p>
<ol>
<li><strong>Flask</strong> - A lightweight framework perfect for simple financial dashboards and internal tools</li>
<li><strong>Django</strong> - A full-featured framework ideal for complex financial applications with user authentication, database models, and admin interfaces</li>
<li><strong>Web Scraping</strong> - A technique to extract financial data from websites for analysis and visualization</li>
</ol>
<p>As a finance professional, I&rsquo;ve found that these web development skills can significantly enhance your workflow, whether it&rsquo;s creating simple dashboards for expense tracking, building full-featured financial applications, or scraping financial data for analysis.</p>
<p>In the next post, we&rsquo;ll explore building desktop GUI applications with Tkinter, which can be useful for creating financial calculators and other tools that don&rsquo;t require a web interface.</p>
<p>Let me know in the comments which approach you&rsquo;re most interested in exploring further, or if you have any questions about implementing these techniques for your specific financial use case.</p>
<p><em>Note: Remember that web scraping should be done responsibly. Always check a website&rsquo;s robots.txt file and terms of service before scraping, and ensure you&rsquo;re not overloading their servers with requests.</em></p>
]]></content:encoded></item><item><title>Part 14: Introduction to Object-Oriented Programming (OOP) in Python</title><link>https://michaelbrunger.com/introduction-object-oriented-programming-python/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/introduction-object-oriented-programming-python/</guid><description>Understand the fundamentals of OOP in Python including classes, objects, methods, and attributes. Learn about encapsulation, inheritance, and polymorphism through practical examples.</description><content:encoded><![CDATA[<h1 id="introduction-to-object-oriented-programming-oop-in-python-a-finance-perspective">Introduction to Object-Oriented Programming (OOP) in Python: A Finance Perspective</h1>
<p>As a finance professional learning Python, I&rsquo;ve discovered that Object-Oriented Programming (OOP) is one of those concepts that initially seems abstract but becomes incredibly powerful once you understand it. In this post, I&rsquo;ll break down what OOP is, why it matters, and how we can use it to model financial concepts in our code.</p>
<h2 id="what-is-object-oriented-programming">What is Object-Oriented Programming?</h2>
<p>In the simplest terms, OOP is a programming paradigm that organizes code around &ldquo;objects&rdquo; rather than functions and logic. An object bundles related data (attributes) and behaviors (methods) together.</p>
<p>Think of it this way: in finance, we deal with various entities like accounts, investments, transactions, and financial instruments. Each has specific properties and actions associated with them. OOP gives us a way to represent these real-world entities in our code.</p>
<h2 id="key-concepts-in-oop">Key Concepts in OOP</h2>
<h3 id="1-classes-vs-objects">1. Classes vs. Objects</h3>
<p><strong>Classes</strong> are like blueprints or templates that define the structure and behavior of a particular type of object. <strong>Objects</strong> are specific instances created from these classes.</p>
<p>In finance terms:</p>
<ul>
<li>A <strong>class</strong> might be <code>BankAccount</code>, which describes what all bank accounts have in common</li>
<li>An <strong>object</strong> would be a specific account, like <code>my_checking_account</code></li>
</ul>
<p>Let&rsquo;s create our first class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A simple bank account class&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, account_number, holder_name, balance<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Initialize a new bank account&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>account_number <span style="color:#f92672">=</span> account_number
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>holder_name <span style="color:#f92672">=</span> holder_name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>balance <span style="color:#f92672">=</span> balance
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>transactions <span style="color:#f92672">=</span> []
</span></span></code></pre></div><h3 id="2-the-__init__-method-and-self">2. The <code>__init__</code> Method and <code>self</code></h3>
<p>The <code>__init__</code> method (short for &ldquo;initialize&rdquo;) is a special method that runs automatically whenever we create a new object from a class. It&rsquo;s sometimes called a constructor.</p>
<p><code>self</code> is a reference to the specific instance of the class that&rsquo;s being created or operated on. It&rsquo;s how the object keeps track of its own data.</p>
<p>Let&rsquo;s create some bank account objects:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Creating instances of the BankAccount class</span>
</span></span><span style="display:flex;"><span>checking <span style="color:#f92672">=</span> BankAccount(<span style="color:#e6db74">&#34;CHK123456&#34;</span>, <span style="color:#e6db74">&#34;John Doe&#34;</span>, <span style="color:#ae81ff">1000.00</span>)
</span></span><span style="display:flex;"><span>savings <span style="color:#f92672">=</span> BankAccount(<span style="color:#e6db74">&#34;SAV789012&#34;</span>, <span style="color:#e6db74">&#34;John Doe&#34;</span>, <span style="color:#ae81ff">5000.00</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accessing attributes</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Account Holder: </span><span style="color:#e6db74">{</span>checking<span style="color:#f92672">.</span>holder_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Checking Balance: $</span><span style="color:#e6db74">{</span>checking<span style="color:#f92672">.</span>balance<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Savings Balance: $</span><span style="color:#e6db74">{</span>savings<span style="color:#f92672">.</span>balance<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Account Holder: John Doe
Checking Balance: $1000.00
Savings Balance: $5000.00
</code></pre><h3 id="3-methods-adding-behavior-to-our-objects">3. Methods: Adding Behavior to Our Objects</h3>
<p>Methods are functions that belong to a class. They define what actions objects of that class can perform.</p>
<p>Let&rsquo;s add some methods to our <code>BankAccount</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A simple bank account class&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, account_number, holder_name, balance<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Initialize a new bank account&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>account_number <span style="color:#f92672">=</span> account_number
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>holder_name <span style="color:#f92672">=</span> holder_name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>balance <span style="color:#f92672">=</span> balance
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>transactions <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Record opening deposit if initial balance was provided</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> balance <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>transactions<span style="color:#f92672">.</span>append((<span style="color:#e6db74">&#34;DEPOSIT&#34;</span>, balance, <span style="color:#e6db74">&#34;Initial deposit&#34;</span>))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">deposit</span>(self, amount, description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Deposit&#34;</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Add funds to the account&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Deposit amount must be positive&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>balance <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>transactions<span style="color:#f92672">.</span>append((<span style="color:#e6db74">&#34;DEPOSIT&#34;</span>, amount, description))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>balance
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">withdraw</span>(self, amount, description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Withdrawal&#34;</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Remove funds from the account if sufficient balance exists&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Withdrawal amount must be positive&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&gt;</span> self<span style="color:#f92672">.</span>balance:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Insufficient funds&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>balance <span style="color:#f92672">-=</span> amount
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>transactions<span style="color:#f92672">.</span>append((<span style="color:#e6db74">&#34;WITHDRAWAL&#34;</span>, amount, description))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>balance
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_balance</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Return the current balance&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>balance
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_statement</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Print a simple account statement&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Account Statement for </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>account_number<span style="color:#e6db74">}</span><span style="color:#e6db74"> (</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>holder_name<span style="color:#e6db74">}</span><span style="color:#e6db74">)&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Current Balance: $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>balance<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Transaction History:&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Type       | Amount     | Description&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> trans_type, amount, description <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>transactions:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>trans_type<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> | $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;9.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">{</span>description<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>Now let&rsquo;s use our enhanced <code>BankAccount</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a new account</span>
</span></span><span style="display:flex;"><span>account <span style="color:#f92672">=</span> BankAccount(<span style="color:#e6db74">&#34;CHK123456&#34;</span>, <span style="color:#e6db74">&#34;John Doe&#34;</span>, <span style="color:#ae81ff">1000.00</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Perform some transactions</span>
</span></span><span style="display:flex;"><span>account<span style="color:#f92672">.</span>deposit(<span style="color:#ae81ff">500</span>, <span style="color:#e6db74">&#34;Paycheck&#34;</span>)
</span></span><span style="display:flex;"><span>account<span style="color:#f92672">.</span>withdraw(<span style="color:#ae81ff">200</span>, <span style="color:#e6db74">&#34;Grocery shopping&#34;</span>)
</span></span><span style="display:flex;"><span>account<span style="color:#f92672">.</span>deposit(<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;Tax refund&#34;</span>)
</span></span><span style="display:flex;"><span>account<span style="color:#f92672">.</span>withdraw(<span style="color:#ae81ff">800</span>, <span style="color:#e6db74">&#34;Rent payment&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print a statement</span>
</span></span><span style="display:flex;"><span>account<span style="color:#f92672">.</span>print_statement()
</span></span></code></pre></div><p>This would output:</p>
<pre tabindex="0"><code>Account Statement for CHK123456 (John Doe)
Current Balance: $1500.00

Transaction History:
Type       | Amount     | Description
--------------------------------------------------
DEPOSIT    | $1000.00   | Initial deposit
DEPOSIT    | $500.00    | Paycheck
WITHDRAWAL | $200.00    | Grocery shopping
DEPOSIT    | $1000.00   | Tax refund
WITHDRAWAL | $800.00    | Rent payment
</code></pre><h2 id="the-four-pillars-of-oop">The Four Pillars of OOP</h2>
<h3 id="1-encapsulation">1. Encapsulation</h3>
<p>Encapsulation refers to bundling data and methods that operate on that data within a single unit (the class) and restricting direct access to some of an object&rsquo;s components. It helps protect the integrity of the data.</p>
<p>In Python, we use naming conventions to indicate that certain attributes or methods should be treated as private (although Python doesn&rsquo;t strictly enforce this):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BankAccount</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, account_number, holder_name, balance<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>account_number <span style="color:#f92672">=</span> account_number
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>holder_name <span style="color:#f92672">=</span> holder_name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_balance <span style="color:#f92672">=</span> balance  <span style="color:#75715e"># Prefixed with underscore to indicate it&#39;s &#34;protected&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>__transaction_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span>  <span style="color:#75715e"># Double underscore for &#34;private&#34; attributes</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>transactions <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> balance <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>__record_transaction(<span style="color:#e6db74">&#34;DEPOSIT&#34;</span>, balance, <span style="color:#e6db74">&#34;Initial deposit&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__record_transaction</span>(self, trans_type, amount, description):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Private method to record transactions with IDs&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>transactions<span style="color:#f92672">.</span>append((self<span style="color:#f92672">.</span>__transaction_id, trans_type, amount, description))
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>__transaction_id <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">deposit</span>(self, amount, description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Deposit&#34;</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Deposit amount must be positive&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_balance <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>__record_transaction(<span style="color:#e6db74">&#34;DEPOSIT&#34;</span>, amount, description)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>_balance
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Other methods...</span>
</span></span></code></pre></div><p>With encapsulation:</p>
<ul>
<li>We&rsquo;ve made <code>_balance</code> protected (indicated by single underscore)</li>
<li>We&rsquo;ve made <code>__transaction_id</code> and <code>__record_transaction</code> private (indicated by double underscore)</li>
<li>We still provide public methods to interact with these protected attributes safely</li>
</ul>
<h3 id="2-inheritance">2. Inheritance</h3>
<p>Inheritance allows a class to inherit attributes and methods from another class. The original class is called the parent or base class, and the new class is the child or derived class.</p>
<p>Let&rsquo;s create specialized account types that inherit from our <code>BankAccount</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SavingsAccount</span>(BankAccount):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A bank account that earns interest&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, account_number, holder_name, balance<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, interest_rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Call the parent class&#39;s __init__ method</span>
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(account_number, holder_name, balance)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>interest_rate <span style="color:#f92672">=</span> interest_rate
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">apply_interest</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Apply interest to the account balance&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        interest <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_balance <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>interest_rate
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>deposit(interest, <span style="color:#e6db74">&#34;Interest payment&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>_balance
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CheckingAccount</span>(BankAccount):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A bank account for frequent transactions with overdraft protection&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, account_number, holder_name, balance<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, overdraft_limit<span style="color:#f92672">=</span><span style="color:#ae81ff">100.0</span>):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(account_number, holder_name, balance)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>overdraft_limit <span style="color:#f92672">=</span> overdraft_limit
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">withdraw</span>(self, amount, description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Withdrawal&#34;</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Override withdraw to implement overdraft protection&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Withdrawal amount must be positive&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&gt;</span> (self<span style="color:#f92672">.</span>_balance <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>overdraft_limit):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Amount exceeds balance plus overdraft limit of $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>overdraft_limit<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_balance <span style="color:#f92672">-=</span> amount
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_record_transaction(<span style="color:#e6db74">&#34;WITHDRAWAL&#34;</span>, amount, description)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>_balance <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_record_transaction(<span style="color:#e6db74">&#34;FEE&#34;</span>, <span style="color:#ae81ff">15</span>, <span style="color:#e6db74">&#34;Overdraft fee&#34;</span>)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_balance <span style="color:#f92672">-=</span> <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>_balance
</span></span></code></pre></div><p>Now we can use these specialized account types:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a savings account</span>
</span></span><span style="display:flex;"><span>savings <span style="color:#f92672">=</span> SavingsAccount(<span style="color:#e6db74">&#34;SAV12345&#34;</span>, <span style="color:#e6db74">&#34;John Doe&#34;</span>, <span style="color:#ae81ff">5000.00</span>, <span style="color:#ae81ff">0.02</span>)  <span style="color:#75715e"># 2% interest</span>
</span></span><span style="display:flex;"><span>savings<span style="color:#f92672">.</span>deposit(<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;Bonus&#34;</span>)
</span></span><span style="display:flex;"><span>savings<span style="color:#f92672">.</span>apply_interest()  <span style="color:#75715e"># Apply interest</span>
</span></span><span style="display:flex;"><span>savings<span style="color:#f92672">.</span>print_statement()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a checking account with overdraft protection</span>
</span></span><span style="display:flex;"><span>checking <span style="color:#f92672">=</span> CheckingAccount(<span style="color:#e6db74">&#34;CHK67890&#34;</span>, <span style="color:#e6db74">&#34;John Doe&#34;</span>, <span style="color:#ae81ff">500.00</span>, <span style="color:#ae81ff">200.00</span>)  <span style="color:#75715e"># $200 overdraft limit</span>
</span></span><span style="display:flex;"><span>checking<span style="color:#f92672">.</span>withdraw(<span style="color:#ae81ff">600</span>, <span style="color:#e6db74">&#34;Emergency expense&#34;</span>)  <span style="color:#75715e"># This will use the overdraft</span>
</span></span><span style="display:flex;"><span>checking<span style="color:#f92672">.</span>print_statement()
</span></span></code></pre></div><h3 id="3-polymorphism">3. Polymorphism</h3>
<p>Polymorphism allows objects of different classes to be treated as objects of a common base class. The most common use is when a parent class reference is used to refer to a child class object.</p>
<p>Let&rsquo;s see polymorphism in action with our bank accounts:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">process_month_end</span>(account):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Process month-end activities for any type of account&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Processing month-end for </span><span style="color:#e6db74">{</span>account<span style="color:#f92672">.</span>account_number<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Apply specific actions based on account type</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> isinstance(account, SavingsAccount):
</span></span><span style="display:flex;"><span>        account<span style="color:#f92672">.</span>apply_interest()
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Applied interest to savings account&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> isinstance(account, CheckingAccount):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> account<span style="color:#f92672">.</span>get_balance() <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Low balance warning issued&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Common actions for all account types</span>
</span></span><span style="display:flex;"><span>    account<span style="color:#f92672">.</span>print_statement()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create different account types</span>
</span></span><span style="display:flex;"><span>accounts <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    BankAccount(<span style="color:#e6db74">&#34;BNK-001&#34;</span>, <span style="color:#e6db74">&#34;Alice Smith&#34;</span>, <span style="color:#ae81ff">1500</span>),
</span></span><span style="display:flex;"><span>    SavingsAccount(<span style="color:#e6db74">&#34;SAV-002&#34;</span>, <span style="color:#e6db74">&#34;Bob Johnson&#34;</span>, <span style="color:#ae81ff">5000</span>, <span style="color:#ae81ff">0.025</span>),
</span></span><span style="display:flex;"><span>    CheckingAccount(<span style="color:#e6db74">&#34;CHK-003&#34;</span>, <span style="color:#e6db74">&#34;Carol Williams&#34;</span>, <span style="color:#ae81ff">750</span>, <span style="color:#ae81ff">300</span>)
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Process all accounts the same way, but with type-specific behaviors</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> account <span style="color:#f92672">in</span> accounts:
</span></span><span style="display:flex;"><span>    process_month_end(account)
</span></span></code></pre></div><p>This demonstrates polymorphismâ€”we&rsquo;re treating different account types through a common interface, but each responds according to its specific implementation.</p>
<h3 id="4-abstraction">4. Abstraction</h3>
<p>Abstraction means hiding complex implementation details and showing only the necessary features of an object. Python supports abstraction through abstract base classes (ABCs).</p>
<p>Let&rsquo;s create an abstract base class for financial instruments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> abc <span style="color:#f92672">import</span> ABC, abstractmethod
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FinancialInstrument</span>(ABC):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Abstract base class for financial instruments&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, symbol, name, current_price):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>symbol <span style="color:#f92672">=</span> symbol
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>current_price <span style="color:#f92672">=</span> current_price
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@abstractmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_value</span>(self, quantity):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Calculate the value of holding a certain quantity&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@abstractmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">risk_level</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Return the risk level of this instrument&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_price</span>(self, new_price):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Update the current price&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>current_price <span style="color:#f92672">=</span> new_price
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Stock</span>(FinancialInstrument):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A stock/equity financial instrument&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, symbol, name, current_price, beta<span style="color:#f92672">=</span><span style="color:#ae81ff">1.0</span>):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(symbol, name, current_price)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>beta <span style="color:#f92672">=</span> beta  <span style="color:#75715e"># Beta measures volatility</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_value</span>(self, quantity):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>current_price <span style="color:#f92672">*</span> quantity
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">risk_level</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>beta <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.8</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Low&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>beta <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1.2</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Medium&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;High&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bond</span>(FinancialInstrument):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A bond financial instrument&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, symbol, name, current_price, yield_rate, maturity_date):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(symbol, name, current_price)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>yield_rate <span style="color:#f92672">=</span> yield_rate
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>maturity_date <span style="color:#f92672">=</span> maturity_date
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_value</span>(self, quantity):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>current_price <span style="color:#f92672">*</span> quantity
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">risk_level</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Simple risk assessment based on yield</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>yield_rate <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.03</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Low&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>yield_rate <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.06</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Medium&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;High&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_income</span>(self, face_value, quantity):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Calculate annual income from the bond&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> face_value <span style="color:#f92672">*</span> quantity <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>yield_rate
</span></span></code></pre></div><p>Note that we can&rsquo;t create an instance of <code>FinancialInstrument</code> directly because it&rsquo;s abstract. We must create one of its concrete subclasses.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Try to create an abstract class instance - this would fail</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># instrument = FinancialInstrument(&#34;ABST&#34;, &#34;Abstract Instrument&#34;, 100)  # This will raise an error</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create concrete implementations</span>
</span></span><span style="display:flex;"><span>apple_stock <span style="color:#f92672">=</span> Stock(<span style="color:#e6db74">&#34;AAPL&#34;</span>, <span style="color:#e6db74">&#34;Apple Inc.&#34;</span>, <span style="color:#ae81ff">175.50</span>, <span style="color:#ae81ff">1.2</span>)
</span></span><span style="display:flex;"><span>govt_bond <span style="color:#f92672">=</span> Bond(<span style="color:#e6db74">&#34;GOVT10&#34;</span>, <span style="color:#e6db74">&#34;10-Year Treasury&#34;</span>, <span style="color:#ae81ff">98.75</span>, <span style="color:#ae81ff">0.035</span>, <span style="color:#e6db74">&#34;2033-05-15&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Use polymorphism</span>
</span></span><span style="display:flex;"><span>instruments <span style="color:#f92672">=</span> [apple_stock, govt_bond]
</span></span><span style="display:flex;"><span>portfolio_value <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> instrument <span style="color:#f92672">in</span> instruments:
</span></span><span style="display:flex;"><span>    quantity <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>  <span style="color:#75715e"># Assume we own 10 of each</span>
</span></span><span style="display:flex;"><span>    value <span style="color:#f92672">=</span> instrument<span style="color:#f92672">.</span>calculate_value(quantity)
</span></span><span style="display:flex;"><span>    portfolio_value <span style="color:#f92672">+=</span> value
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>instrument<span style="color:#f92672">.</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74"> (</span><span style="color:#e6db74">{</span>instrument<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">):&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;  Risk Level: </span><span style="color:#e6db74">{</span>instrument<span style="color:#f92672">.</span>risk_level()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;  Value of 10 units: $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Total portfolio value: $</span><span style="color:#e6db74">{</span>portfolio_value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h2 id="practical-financial-application-portfolio-management">Practical Financial Application: Portfolio Management</h2>
<p>Let&rsquo;s build a simple portfolio management system that demonstrates these OOP concepts together:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Asset</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Base class for any asset that can be held in a portfolio&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, symbol, name):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>symbol <span style="color:#f92672">=</span> symbol
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@abstractmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">current_value</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Return the current value of this asset&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __str__(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cash</span>(Asset):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Cash holdings in a portfolio&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, amount, currency<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;USD&#34;</span>):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(currency, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Cash (</span><span style="color:#e6db74">{</span>currency<span style="color:#e6db74">}</span><span style="color:#e6db74">)&#34;</span>)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>amount <span style="color:#f92672">=</span> amount
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">current_value</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>amount
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Stock</span>(Asset):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Stock/equity asset&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, symbol, name, shares, price_per_share):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(symbol, name)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>shares <span style="color:#f92672">=</span> shares
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>price <span style="color:#f92672">=</span> price_per_share
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">current_value</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>shares <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>price
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_price</span>(self, new_price):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>price <span style="color:#f92672">=</span> new_price
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bond</span>(Asset):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Bond asset&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, symbol, name, face_value, quantity, market_price, yield_rate):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(symbol, name)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>face_value <span style="color:#f92672">=</span> face_value
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>quantity <span style="color:#f92672">=</span> quantity
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>market_price <span style="color:#f92672">=</span> market_price
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>yield_rate <span style="color:#f92672">=</span> yield_rate
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">current_value</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>market_price <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>quantity
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">annual_income</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>face_value <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>quantity <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>yield_rate
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Portfolio</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A collection of financial assets&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name, owner):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>owner <span style="color:#f92672">=</span> owner
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>assets <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_asset</span>(self, asset):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Add an asset to the portfolio&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>assets<span style="color:#f92672">.</span>append(asset)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">remove_asset</span>(self, symbol):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Remove an asset from the portfolio by symbol&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>assets <span style="color:#f92672">=</span> [asset <span style="color:#66d9ef">for</span> asset <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>assets <span style="color:#66d9ef">if</span> asset<span style="color:#f92672">.</span>symbol <span style="color:#f92672">!=</span> symbol]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">total_value</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Calculate the total value of all assets&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> sum(asset<span style="color:#f92672">.</span>current_value() <span style="color:#66d9ef">for</span> asset <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>assets)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">asset_allocation</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Calculate the percentage allocation of each asset class&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>total_value()
</span></span><span style="display:flex;"><span>        allocation <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> asset <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>assets:
</span></span><span style="display:flex;"><span>            asset_type <span style="color:#f92672">=</span> type(asset)<span style="color:#f92672">.</span>__name__
</span></span><span style="display:flex;"><span>            asset_value <span style="color:#f92672">=</span> asset<span style="color:#f92672">.</span>current_value()
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> asset_type <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> allocation:
</span></span><span style="display:flex;"><span>                allocation[asset_type] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            allocation[asset_type] <span style="color:#f92672">+=</span> asset_value
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Convert to percentages</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> asset_type <span style="color:#f92672">in</span> allocation:
</span></span><span style="display:flex;"><span>            allocation[asset_type] <span style="color:#f92672">=</span> (allocation[asset_type] <span style="color:#f92672">/</span> total) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> allocation
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_summary</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Print a summary of the portfolio&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">=== </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74"> Portfolio Summary ===&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Owner: </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>owner<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Value: $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>total_value()<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Assets:&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Symbol&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Type&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Name&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;30</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Value&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">65</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> asset <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>assets:
</span></span><span style="display:flex;"><span>            asset_type <span style="color:#f92672">=</span> type(asset)<span style="color:#f92672">.</span>__name__
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>asset<span style="color:#f92672">.</span>symbol<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>asset_type<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>asset<span style="color:#f92672">.</span>name<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;30</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>asset<span style="color:#f92672">.</span>current_value()<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Asset Allocation:&#34;</span>)
</span></span><span style="display:flex;"><span>        allocation <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>asset_allocation()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> asset_type, percentage <span style="color:#f92672">in</span> allocation<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>asset_type<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>percentage<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span></code></pre></div><p>Now let&rsquo;s use our portfolio management system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a retirement portfolio</span>
</span></span><span style="display:flex;"><span>retirement <span style="color:#f92672">=</span> Portfolio(<span style="color:#e6db74">&#34;Retirement&#34;</span>, <span style="color:#e6db74">&#34;John Doe&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add assets</span>
</span></span><span style="display:flex;"><span>retirement<span style="color:#f92672">.</span>add_asset(Cash(<span style="color:#ae81ff">15000</span>))
</span></span><span style="display:flex;"><span>retirement<span style="color:#f92672">.</span>add_asset(Stock(<span style="color:#e6db74">&#34;AAPL&#34;</span>, <span style="color:#e6db74">&#34;Apple Inc.&#34;</span>, <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">175.50</span>))
</span></span><span style="display:flex;"><span>retirement<span style="color:#f92672">.</span>add_asset(Stock(<span style="color:#e6db74">&#34;MSFT&#34;</span>, <span style="color:#e6db74">&#34;Microsoft Corporation&#34;</span>, <span style="color:#ae81ff">25</span>, <span style="color:#ae81ff">330.75</span>))
</span></span><span style="display:flex;"><span>retirement<span style="color:#f92672">.</span>add_asset(Bond(<span style="color:#e6db74">&#34;T-BOND&#34;</span>, <span style="color:#e6db74">&#34;Treasury Bond&#34;</span>, <span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">980</span>, <span style="color:#ae81ff">0.035</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print the portfolio summary</span>
</span></span><span style="display:flex;"><span>retirement<span style="color:#f92672">.</span>print_summary()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Update a stock price and see the impact</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> asset <span style="color:#f92672">in</span> retirement<span style="color:#f92672">.</span>assets:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> isinstance(asset, Stock) <span style="color:#f92672">and</span> asset<span style="color:#f92672">.</span>symbol <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;AAPL&#34;</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Updating </span><span style="color:#e6db74">{</span>asset<span style="color:#f92672">.</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74"> price from $</span><span style="color:#e6db74">{</span>asset<span style="color:#f92672">.</span>price<span style="color:#e6db74">}</span><span style="color:#e6db74"> to $190.25&#34;</span>)
</span></span><span style="display:flex;"><span>        asset<span style="color:#f92672">.</span>update_price(<span style="color:#ae81ff">190.25</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print the updated portfolio</span>
</span></span><span style="display:flex;"><span>retirement<span style="color:#f92672">.</span>print_summary()
</span></span></code></pre></div><h2 id="why-oop-matters-organizing-and-reusing-code">Why OOP Matters: Organizing and Reusing Code</h2>
<p>OOP offers several advantages that become increasingly important as your projects grow:</p>
<ol>
<li>
<p><strong>Organization</strong>: OOP helps structure your code around real-world entities, making it easier to understand and maintain.</p>
</li>
<li>
<p><strong>Reusability</strong>: Inherit and extend classes rather than rewriting code from scratch.</p>
</li>
<li>
<p><strong>Modularity</strong>: Each class handles a specific entity, making it easier to update, test, and debug.</p>
</li>
<li>
<p><strong>Encapsulation</strong>: Hide implementation details and protect data integrity.</p>
</li>
<li>
<p><strong>Real-world modeling</strong>: Financial concepts translate naturally to OOPâ€”assets, accounts, transactions, and portfolios all become classes.</p>
</li>
</ol>
<h2 id="common-oop-pitfalls-to-avoid">Common OOP Pitfalls to Avoid</h2>
<ol>
<li>
<p><strong>Overengineering</strong>: Don&rsquo;t create complex class hierarchies if simpler solutions work. Start with basic classes and refine as needed.</p>
</li>
<li>
<p><strong>Inheritance Overuse</strong>: Not everything needs inheritance. Consider composition (having one class contain instances of another) when appropriate.</p>
</li>
<li>
<p><strong>Forgetting <code>self</code></strong>: Always include <code>self</code> as the first parameter in instance methods.</p>
</li>
<li>
<p><strong>Misusing Private Attributes</strong>: Don&rsquo;t circumvent the leading underscore conventionâ€”it&rsquo;s there for a reason.</p>
</li>
</ol>
<h2 id="practical-exercise-build-a-loan-calculator-class">Practical Exercise: Build a Loan Calculator Class</h2>
<p>As a finance professional, understanding loan calculations is essential. Let&rsquo;s create a <code>Loan</code> class that encapsulates different loan calculations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Loan</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;A class representing a loan with various calculation methods&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, principal, annual_interest_rate, years, compounding_periods<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>principal <span style="color:#f92672">=</span> principal
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>annual_rate <span style="color:#f92672">=</span> annual_interest_rate
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>years <span style="color:#f92672">=</span> years
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>compounding_periods <span style="color:#f92672">=</span> compounding_periods
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">monthly_payment</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Calculate the fixed monthly payment&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Convert annual rate to monthly rate</span>
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>annual_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Use the formula: PMT = P * (r * (1+r)^n) / ((1+r)^n - 1)</span>
</span></span><span style="display:flex;"><span>        numerator <span style="color:#f92672">=</span> r <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> r) <span style="color:#f92672">**</span> n
</span></span><span style="display:flex;"><span>        denominator <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> r) <span style="color:#f92672">**</span> n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> denominator <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>principal <span style="color:#f92672">/</span> n  <span style="color:#75715e"># Zero interest edge case</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>principal <span style="color:#f92672">*</span> (numerator <span style="color:#f92672">/</span> denominator)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">total_payment</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Calculate the total amount paid over the loan term&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>monthly_payment() <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">total_interest</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Calculate the total interest paid over the loan term&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>total_payment() <span style="color:#f92672">-</span> self<span style="color:#f92672">.</span>principal
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">amortization_schedule</span>(self, show_every_period<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Generate an amortization schedule&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        schedule <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        remaining_balance <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>principal
</span></span><span style="display:flex;"><span>        monthly_rate <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>annual_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>        payment <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>monthly_payment()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> period <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, self<span style="color:#f92672">.</span>years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>            interest_payment <span style="color:#f92672">=</span> remaining_balance <span style="color:#f92672">*</span> monthly_rate
</span></span><span style="display:flex;"><span>            principal_payment <span style="color:#f92672">=</span> payment <span style="color:#f92672">-</span> interest_payment
</span></span><span style="display:flex;"><span>            remaining_balance <span style="color:#f92672">-=</span> principal_payment
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> show_every_period <span style="color:#f92672">or</span> period <span style="color:#f92672">%</span> <span style="color:#ae81ff">12</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> period <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                schedule<span style="color:#f92672">.</span>append({
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;period&#39;</span>: period,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;payment&#39;</span>: payment,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;principal&#39;</span>: principal_payment,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;interest&#39;</span>: interest_payment,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;remaining&#39;</span>: max(<span style="color:#ae81ff">0</span>, remaining_balance)  <span style="color:#75715e"># Avoid negative zero</span>
</span></span><span style="display:flex;"><span>                })
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> schedule
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_loan_summary</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Print a summary of the loan details&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">=== Loan Summary ===&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Principal: $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>principal<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Annual Interest Rate: </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>annual_rate<span style="color:#e6db74">:</span><span style="color:#e6db74">.2%</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Term: </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>years<span style="color:#e6db74">}</span><span style="color:#e6db74"> years&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly Payment: $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>monthly_payment()<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Payments: $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>total_payment()<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Interest: $</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>total_interest()<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_amortization_table</span>(self, periods_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Print an amortization table&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        schedule <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>amortization_schedule(show_every_period<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">=== Amortization Schedule ===&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Period&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Payment&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Principal&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Interest&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Remaining&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">70</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> entry <span style="color:#f92672">in</span> schedule:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>entry[<span style="color:#e6db74">&#39;period&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>entry[<span style="color:#e6db74">&#39;payment&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;14.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>entry[<span style="color:#e6db74">&#39;principal&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;14.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>entry[<span style="color:#e6db74">&#39;interest&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;14.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>entry[<span style="color:#e6db74">&#39;remaining&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;14.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example use:</span>
</span></span><span style="display:flex;"><span>home_loan <span style="color:#f92672">=</span> Loan(<span style="color:#ae81ff">350000</span>, <span style="color:#ae81ff">0.045</span>, <span style="color:#ae81ff">30</span>)  <span style="color:#75715e"># $350,000 at 4.5% for 30 years</span>
</span></span><span style="display:flex;"><span>home_loan<span style="color:#f92672">.</span>print_loan_summary()
</span></span><span style="display:flex;"><span>home_loan<span style="color:#f92672">.</span>print_amortization_table()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>car_loan <span style="color:#f92672">=</span> Loan(<span style="color:#ae81ff">30000</span>, <span style="color:#ae81ff">0.039</span>, <span style="color:#ae81ff">5</span>)  <span style="color:#75715e"># $30,000 at 3.9% for 5 years</span>
</span></span><span style="display:flex;"><span>car_loan<span style="color:#f92672">.</span>print_loan_summary()
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Object-Oriented Programming provides a powerful way to structure your Python code, especially when modeling real-world financial entities and processes. By organizing your code into classes with attributes and methods, you create reusable, maintainable components that can grow with your applications.</p>
<p>In this post, we covered:</p>
<ul>
<li>The basics of classes and objects</li>
<li>Method creation and the role of <code>self</code></li>
<li>The four pillars of OOP: encapsulation, inheritance, polymorphism, and abstraction</li>
<li>Practical financial applications using OOP principles</li>
</ul>
<p>As your Python skills progress, you&rsquo;ll find OOP concepts becoming increasingly valuable, especially for financial modeling, analysis, and application development.</p>
<h2 id="next-steps">Next Steps</h2>
<ul>
<li>Practice creating your own financial classes (e.g., Investment, FinancialReport)</li>
<li>Explore more complex inheritance relationships</li>
<li>Learn about dataclasses (Python 3.7+) for even cleaner class definitions</li>
<li>Look into property decorators for more controlled attribute access</li>
</ul>
]]></content:encoded></item><item><title>Part 13: Data Visualisation Basics in Python</title><link>https://michaelbrunger.com/python-data-visualisation-basics/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-data-visualisation-basics/</guid><description>Create effective data visualisations using Matplotlib and Seaborn. Learn to make various plot types, customise their appearance, and save your figures for reports and presentations.</description><content:encoded><![CDATA[<h1 id="data-visualization-basics-in-python">Data Visualization Basics in Python</h1>
<p>Welcome to the thirteenth post in our Python learning series! In this article, we&rsquo;ll explore how to create effective data visualizations in Python - an essential skill for analyzing and communicating financial data.</p>
<p>If you&rsquo;ve been following along, you&rsquo;ve already learned how to work with data using NumPy and pandas. Now it&rsquo;s time to bring that data to life through visualization. Whether you&rsquo;re analyzing budget trends, tracking investment performance, or presenting financial reports, the right visualization can transform raw numbers into actionable insights.</p>
<h2 id="why-data-visualization-matters-in-finance">Why Data Visualization Matters in Finance</h2>
<p>As a finance professional, I&rsquo;ve found that visualizations can:</p>
<ul>
<li>Quickly identify trends that might be missed in spreadsheets</li>
<li>Effectively communicate financial performance to stakeholders</li>
<li>Spot outliers or anomalies in financial data</li>
<li>Compare actual results against forecasts more intuitively</li>
<li>Support data-driven decision making</li>
</ul>
<p>Let&rsquo;s dive into the tools and techniques we&rsquo;ll need to create these visualizations.</p>
<h2 id="setting-up-your-environment">Setting Up Your Environment</h2>
<p>First, make sure you have the necessary libraries installed. If you&rsquo;re using Anaconda, you likely already have these. If not, install them using pip:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pip install matplotlib seaborn pandas numpy
</span></span></code></pre></div><p>Let&rsquo;s import the libraries we&rsquo;ll need:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set the style for our plots</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#39;seaborn-v0_8-whitegrid&#39;</span>)  <span style="color:#75715e"># Clean, professional look</span>
</span></span></code></pre></div><h2 id="matplotlib-basics-your-visualization-foundation">Matplotlib Basics: Your Visualization Foundation</h2>
<p>Matplotlib is the cornerstone of Python visualization. While it can be a bit verbose, it gives you complete control over your plots.</p>
<h3 id="creating-a-simple-line-plot">Creating a Simple Line Plot</h3>
<p>Let&rsquo;s start with a simple line chart showing monthly revenue:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Sample financial data</span>
</span></span><span style="display:flex;"><span>months <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Jan&#39;</span>, <span style="color:#e6db74">&#39;Feb&#39;</span>, <span style="color:#e6db74">&#39;Mar&#39;</span>, <span style="color:#e6db74">&#39;Apr&#39;</span>, <span style="color:#e6db74">&#39;May&#39;</span>, <span style="color:#e6db74">&#39;Jun&#39;</span>]
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> [<span style="color:#ae81ff">45000</span>, <span style="color:#ae81ff">48000</span>, <span style="color:#ae81ff">47500</span>, <span style="color:#ae81ff">52000</span>, <span style="color:#ae81ff">56000</span>, <span style="color:#ae81ff">58000</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a simple line plot</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))  <span style="color:#75715e"># Set figure size (width, height in inches)</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(months, revenue, marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;o&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#004D99&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Monthly Revenue (2025)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Revenue ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>This code creates a line chart showing monthly revenue. Let&rsquo;s break down what each part does:</p>
<ul>
<li><code>plt.figure(figsize=(10, 6))</code>: Sets the size of our chart (width by height in inches)</li>
<li><code>plt.plot()</code>: Creates the actual line plot with data points</li>
<li><code>marker='o'</code>: Adds circular markers at each data point</li>
<li><code>linewidth=2</code>: Makes the line thicker for better visibility</li>
<li><code>color='#004D99'</code>: Sets a professional blue color using hex code</li>
<li>The remaining functions add title, labels, and grid lines</li>
</ul>
<h3 id="bar-charts-for-comparison">Bar Charts for Comparison</h3>
<p>Bar charts are excellent for comparing categorical data, like department expenses:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>departments <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Finance&#39;</span>, <span style="color:#e6db74">&#39;Marketing&#39;</span>, <span style="color:#e6db74">&#39;Operations&#39;</span>, <span style="color:#e6db74">&#39;IT&#39;</span>, <span style="color:#e6db74">&#39;HR&#39;</span>]
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">65000</span>, <span style="color:#ae81ff">72000</span>, <span style="color:#ae81ff">89000</span>, <span style="color:#ae81ff">56000</span>, <span style="color:#ae81ff">48000</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>bars <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>bar(departments, expenses, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#2D7BB6&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add value labels on top of each bar</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> bar <span style="color:#f92672">in</span> bars:
</span></span><span style="display:flex;"><span>    height <span style="color:#f92672">=</span> bar<span style="color:#f92672">.</span>get_height()
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>text(bar<span style="color:#f92672">.</span>get_x() <span style="color:#f92672">+</span> bar<span style="color:#f92672">.</span>get_width()<span style="color:#f92672">/</span><span style="color:#ae81ff">2.</span>, height <span style="color:#f92672">+</span> <span style="color:#ae81ff">1000</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;$</span><span style="color:#e6db74">{</span>height<span style="color:#e6db74">:</span><span style="color:#e6db74">,</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>, ha<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;center&#39;</span>, va<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bottom&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Q1 Department Expenses&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Department&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Expenses ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylim(<span style="color:#ae81ff">0</span>, max(expenses) <span style="color:#f92672">*</span> <span style="color:#ae81ff">1.15</span>)  <span style="color:#75715e"># Add some headroom for the labels</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>This code adds a nice touch by displaying the actual values above each bar, making it easy to see the exact numbers while still getting the visual comparison.</p>
<h3 id="pie-charts-for-part-to-whole-relationships">Pie Charts for Part-to-Whole Relationships</h3>
<p>Pie charts can be effective for showing how parts make up a whole, such as budget allocation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>categories <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Salaries&#39;</span>, <span style="color:#e6db74">&#39;Marketing&#39;</span>, <span style="color:#e6db74">&#39;R&amp;D&#39;</span>, <span style="color:#e6db74">&#39;Operations&#39;</span>, <span style="color:#e6db74">&#39;Other&#39;</span>]
</span></span><span style="display:flex;"><span>budget_allocation <span style="color:#f92672">=</span> [<span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">8</span>]  <span style="color:#75715e"># percentages</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>pie(budget_allocation, labels<span style="color:#f92672">=</span>categories, autopct<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%1.1f%%</span><span style="color:#e6db74">&#39;</span>,
</span></span><span style="display:flex;"><span>        startangle<span style="color:#f92672">=</span><span style="color:#ae81ff">90</span>, shadow<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, explode<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
</span></span><span style="display:flex;"><span>        colors<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;#4878D0&#39;</span>, <span style="color:#e6db74">&#39;#EE854A&#39;</span>, <span style="color:#e6db74">&#39;#6ACC64&#39;</span>, <span style="color:#e6db74">&#39;#D65F5F&#39;</span>, <span style="color:#e6db74">&#39;#956CB4&#39;</span>])
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Annual Budget Allocation&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axis(<span style="color:#e6db74">&#39;equal&#39;</span>)  <span style="color:#75715e"># Equal aspect ratio ensures the pie chart is circular</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>The <code>explode</code> parameter slightly separates the &lsquo;Salaries&rsquo; slice to emphasize it as the largest expense.</p>
<h3 id="histograms-for-distribution-analysis">Histograms for Distribution Analysis</h3>
<p>Histograms help visualize the distribution of continuous data. This is useful for analyzing things like daily stock returns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Generate some random daily returns data (normally distributed)</span>
</span></span><span style="display:flex;"><span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">42</span>)  <span style="color:#75715e"># For reproducibility</span>
</span></span><span style="display:flex;"><span>daily_returns <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.02</span>, <span style="color:#ae81ff">250</span>)  <span style="color:#75715e"># Mean, std dev, number of trading days</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>hist(daily_returns, bins<span style="color:#f92672">=</span><span style="color:#ae81ff">25</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#2D7BB6&#39;</span>, edgecolor<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;black&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axvline(x<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)  <span style="color:#75715e"># Add line at x=0</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Distribution of Daily Stock Returns&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Daily Return&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Frequency&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>The red vertical line at x=0 helps distinguish between positive and negative returns.</p>
<h3 id="scatter-plots-for-correlation-analysis">Scatter Plots for Correlation Analysis</h3>
<p>Scatter plots are perfect for examining relationships between two variables, like the correlation between marketing spend and revenue:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Generate sample data</span>
</span></span><span style="display:flex;"><span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">42</span>)
</span></span><span style="display:flex;"><span>marketing_spend <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">50000</span>, <span style="color:#ae81ff">15000</span>, <span style="color:#ae81ff">30</span>)  <span style="color:#75715e"># 30 months of data</span>
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.5</span> <span style="color:#f92672">*</span> marketing_spend <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">20000</span>, <span style="color:#ae81ff">40000</span>, <span style="color:#ae81ff">30</span>)  <span style="color:#75715e"># Revenue with noise</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>scatter(marketing_spend, revenue, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#2D7BB6&#39;</span>, edgecolor<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;black&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add a trend line</span>
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>polyfit(marketing_spend, revenue, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>poly1d(z)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(marketing_spend, p(marketing_spend), <span style="color:#e6db74">&#34;r--&#34;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Correlation: Marketing Spend vs. Revenue&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Marketing Spend ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Revenue ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>The trend line helps visualize the overall relationship between the variables.</p>
<h2 id="customizing-matplotlib-plots">Customizing Matplotlib Plots</h2>
<p>Now let&rsquo;s look at some additional customization options that can make your financial visualizations more professional and effective.</p>
<h3 id="creating-subplots">Creating Subplots</h3>
<p>Often you&rsquo;ll want to show multiple related charts together. Subplots are perfect for this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Generate some financial data</span>
</span></span><span style="display:flex;"><span>months <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Jan&#39;</span>, <span style="color:#e6db74">&#39;Feb&#39;</span>, <span style="color:#e6db74">&#39;Mar&#39;</span>, <span style="color:#e6db74">&#39;Apr&#39;</span>, <span style="color:#e6db74">&#39;May&#39;</span>, <span style="color:#e6db74">&#39;Jun&#39;</span>]
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> [<span style="color:#ae81ff">45000</span>, <span style="color:#ae81ff">48000</span>, <span style="color:#ae81ff">47500</span>, <span style="color:#ae81ff">52000</span>, <span style="color:#ae81ff">56000</span>, <span style="color:#ae81ff">58000</span>]
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">38000</span>, <span style="color:#ae81ff">42000</span>, <span style="color:#ae81ff">40000</span>, <span style="color:#ae81ff">43000</span>, <span style="color:#ae81ff">45000</span>, <span style="color:#ae81ff">47000</span>]
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> [r <span style="color:#f92672">-</span> e <span style="color:#66d9ef">for</span> r, e <span style="color:#f92672">in</span> zip(revenue, expenses)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create subplots</span>
</span></span><span style="display:flex;"><span>fig, (ax1, ax2) <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># First subplot: Revenue and Expenses</span>
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>plot(months, revenue, <span style="color:#e6db74">&#39;o-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#2D7BB6&#39;</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>plot(months, expenses, <span style="color:#e6db74">&#39;s-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Expenses&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#EE854A&#39;</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#39;Revenue vs. Expenses (H1 2025)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Amount ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Second subplot: Profit</span>
</span></span><span style="display:flex;"><span>bars <span style="color:#f92672">=</span> ax2<span style="color:#f92672">.</span>bar(months, profit, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#6ACC64&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add value labels on top of each bar</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> bar <span style="color:#f92672">in</span> bars:
</span></span><span style="display:flex;"><span>    height <span style="color:#f92672">=</span> bar<span style="color:#f92672">.</span>get_height()
</span></span><span style="display:flex;"><span>    ax2<span style="color:#f92672">.</span>text(bar<span style="color:#f92672">.</span>get_x() <span style="color:#f92672">+</span> bar<span style="color:#f92672">.</span>get_width()<span style="color:#f92672">/</span><span style="color:#ae81ff">2.</span>, height <span style="color:#f92672">+</span> <span style="color:#ae81ff">500</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;$</span><span style="color:#e6db74">{</span>height<span style="color:#e6db74">:</span><span style="color:#e6db74">,</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>, ha<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;center&#39;</span>, va<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bottom&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#39;Monthly Profit (H1 2025)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Profit ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>This code creates two charts stacked vertically: a line chart comparing revenue and expenses, and a bar chart showing the resulting profit.</p>
<h3 id="adding-annotations">Adding Annotations</h3>
<p>Annotations can add important context to your charts:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>quarters <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Q1 2024&#39;</span>, <span style="color:#e6db74">&#39;Q2 2024&#39;</span>, <span style="color:#e6db74">&#39;Q3 2024&#39;</span>, <span style="color:#e6db74">&#39;Q4 2024&#39;</span>, <span style="color:#e6db74">&#39;Q1 2025&#39;</span>]
</span></span><span style="display:flex;"><span>stock_price <span style="color:#f92672">=</span> [<span style="color:#ae81ff">45.50</span>, <span style="color:#ae81ff">48.75</span>, <span style="color:#ae81ff">52.30</span>, <span style="color:#ae81ff">54.10</span>, <span style="color:#ae81ff">62.80</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>plot(quarters, stock_price, <span style="color:#e6db74">&#39;o-&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#2D7BB6&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add annotation for significant event</span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>annotate(<span style="color:#e6db74">&#39;New Product Launch&#39;</span>, 
</span></span><span style="display:flex;"><span>            xy<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">54.10</span>),  <span style="color:#75715e"># Position to point at</span>
</span></span><span style="display:flex;"><span>            xytext<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">58</span>),  <span style="color:#75715e"># Text position</span>
</span></span><span style="display:flex;"><span>            arrowprops<span style="color:#f92672">=</span>dict(facecolor<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;black&#39;</span>, shrink<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">1.5</span>),
</span></span><span style="display:flex;"><span>            fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add annotation for earnings report</span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>annotate(<span style="color:#e6db74">&#39;Earnings Beat</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Estimates by 15%&#39;</span>, 
</span></span><span style="display:flex;"><span>            xy<span style="color:#f92672">=</span>(<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">62.80</span>),  <span style="color:#75715e"># Position to point at</span>
</span></span><span style="display:flex;"><span>            xytext<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3.5</span>, <span style="color:#ae81ff">67</span>),  <span style="color:#75715e"># Text position</span>
</span></span><span style="display:flex;"><span>            arrowprops<span style="color:#f92672">=</span>dict(facecolor<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;black&#39;</span>, shrink<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">1.5</span>),
</span></span><span style="display:flex;"><span>            fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#39;Quarterly Stock Price&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Price ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><h3 id="saving-your-plots">Saving Your Plots</h3>
<p>Save your visualizations for reports or presentations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(months, revenue, marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;o&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#004D99&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Monthly Revenue (2025)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Revenue ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Save in different formats</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;monthly_revenue.png&#39;</span>, dpi<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>)  <span style="color:#75715e"># High-resolution PNG</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;monthly_revenue.pdf&#39;</span>)  <span style="color:#75715e"># PDF for publications</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;monthly_revenue.svg&#39;</span>)  <span style="color:#75715e"># Scalable vector graphic</span>
</span></span></code></pre></div><h2 id="advanced-visualization-with-seaborn">Advanced Visualization with Seaborn</h2>
<p>Seaborn builds on matplotlib and provides a higher-level interface for creating attractive statistical graphics.</p>
<h3 id="heatmaps-for-correlation-matrices">Heatmaps for Correlation Matrices</h3>
<p>Heatmaps are excellent for visualizing correlation matrices of financial instruments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Generate correlated returns for 5 assets</span>
</span></span><span style="display:flex;"><span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">42</span>)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span>  <span style="color:#75715e"># Number of days</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create correlated returns for 5 assets</span>
</span></span><span style="display:flex;"><span>corr_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">0.7</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.3</span>, <span style="color:#ae81ff">0.1</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0.7</span>, <span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">0.4</span>, <span style="color:#ae81ff">0.2</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">0.7</span>, <span style="color:#ae81ff">0.5</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0.3</span>, <span style="color:#ae81ff">0.4</span>, <span style="color:#ae81ff">0.7</span>, <span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">0.6</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">1.0</span>]
</span></span><span style="display:flex;"><span>])
</span></span><span style="display:flex;"><span>asset_names <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;S&amp;P 500&#39;</span>, <span style="color:#e6db74">&#39;NASDAQ&#39;</span>, <span style="color:#e6db74">&#39;DJIA&#39;</span>, <span style="color:#e6db74">&#39;Treasury Bonds&#39;</span>, <span style="color:#e6db74">&#39;Gold&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>heatmap(corr_matrix, annot<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, cmap<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;coolwarm&#39;</span>, 
</span></span><span style="display:flex;"><span>            xticklabels<span style="color:#f92672">=</span>asset_names, yticklabels<span style="color:#f92672">=</span>asset_names,
</span></span><span style="display:flex;"><span>            linewidths<span style="color:#f92672">=</span><span style="color:#ae81ff">0.5</span>, vmin<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>, vmax<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Asset Correlation Matrix&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>This creates a heatmap showing the correlation between different assets, with values annotated directly on the cells.</p>
<h3 id="box-plots-for-distribution-comparison">Box Plots for Distribution Comparison</h3>
<p>Box plots are useful for comparing distributions, like monthly expenses across departments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create sample data</span>
</span></span><span style="display:flex;"><span>departments <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Finance&#39;</span>, <span style="color:#e6db74">&#39;Marketing&#39;</span>, <span style="color:#e6db74">&#39;Operations&#39;</span>, <span style="color:#e6db74">&#39;IT&#39;</span>, <span style="color:#e6db74">&#39;HR&#39;</span>]
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Department&#39;</span>: np<span style="color:#f92672">.</span>repeat(departments, <span style="color:#ae81ff">20</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Monthly_Expense&#39;</span>: [
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">5000</span>, <span style="color:#ae81ff">800</span>, <span style="color:#ae81ff">20</span>),   <span style="color:#75715e"># Finance</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">8500</span>, <span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">20</span>),  <span style="color:#75715e"># Marketing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">7200</span>, <span style="color:#ae81ff">1500</span>, <span style="color:#ae81ff">20</span>),  <span style="color:#75715e"># Operations</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">6800</span>, <span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">20</span>),  <span style="color:#75715e"># IT</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">4500</span>, <span style="color:#ae81ff">600</span>, <span style="color:#ae81ff">20</span>)    <span style="color:#75715e"># HR</span>
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>boxplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Department&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Monthly_Expense&#39;</span>, data<span style="color:#f92672">=</span>df, palette<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;muted&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Monthly Expense Distribution by Department&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Department&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Monthly Expense ($)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>Box plots show the median, quartiles, and outliers, giving you a complete picture of each distribution.</p>
<h3 id="pair-plots-for-multi-variable-analysis">Pair Plots for Multi-variable Analysis</h3>
<p>When analyzing multiple variables, pair plots can show all possible scatter plots at once:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Generate sample financial metrics for companies</span>
</span></span><span style="display:flex;"><span>np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">42</span>)
</span></span><span style="display:flex;"><span>n_companies <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">300</span>, n_companies)
</span></span><span style="display:flex;"><span>profit_margin <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0.15</span>, <span style="color:#ae81ff">0.05</span>, n_companies)
</span></span><span style="display:flex;"><span>debt_to_equity <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.2</span>, n_companies)
</span></span><span style="display:flex;"><span>pe_ratio <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">5</span>, n_companies)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Revenue&#39;</span>: revenue,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Profit_Margin&#39;</span>: profit_margin,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Debt_to_Equity&#39;</span>: debt_to_equity,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;PE_Ratio&#39;</span>: pe_ratio
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create pair plot</span>
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>pairplot(df, height<span style="color:#f92672">=</span><span style="color:#ae81ff">2.5</span>, corner<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>suptitle(<span style="color:#e6db74">&#39;Relationships Between Financial Metrics&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">1.02</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>This creates scatter plots for every combination of variables, helping you spot relationships between multiple financial metrics at once.</p>
<h3 id="combined-line-and-bar-chart">Combined Line and Bar Chart</h3>
<p>For financial reports, you often want to combine different chart types, like showing monthly profit as bars with a revenue trend line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>months <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Jan&#39;</span>, <span style="color:#e6db74">&#39;Feb&#39;</span>, <span style="color:#e6db74">&#39;Mar&#39;</span>, <span style="color:#e6db74">&#39;Apr&#39;</span>, <span style="color:#e6db74">&#39;May&#39;</span>, <span style="color:#e6db74">&#39;Jun&#39;</span>]
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> [<span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">310</span>, <span style="color:#ae81ff">290</span>, <span style="color:#ae81ff">340</span>, <span style="color:#ae81ff">390</span>, <span style="color:#ae81ff">420</span>]  <span style="color:#75715e"># in thousands</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> [<span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">85</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">115</span>]  <span style="color:#75715e"># in thousands</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fig, ax1 <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Bar chart for profit</span>
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>bar(months, profit, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#6ACC64&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Profit&#39;</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Profit ($ thousands)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>tick_params(axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;y&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create second y-axis for revenue</span>
</span></span><span style="display:flex;"><span>ax2 <span style="color:#f92672">=</span> ax1<span style="color:#f92672">.</span>twinx()
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>plot(months, revenue, <span style="color:#e6db74">&#39;o-&#39;</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#2D7BB6&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue&#39;</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Revenue ($ thousands)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>tick_params(axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;y&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add legends</span>
</span></span><span style="display:flex;"><span>lines1, labels1 <span style="color:#f92672">=</span> ax1<span style="color:#f92672">.</span>get_legend_handles_labels()
</span></span><span style="display:flex;"><span>lines2, labels2 <span style="color:#f92672">=</span> ax2<span style="color:#f92672">.</span>get_legend_handles_labels()
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>legend(lines1 <span style="color:#f92672">+</span> lines2, labels1 <span style="color:#f92672">+</span> labels2, loc<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;upper left&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Monthly Revenue and Profit (H1 2025)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>This creates a dual-axis chart with bars for profit and a line for revenue, making it easy to see the relationship between the two.</p>
<h2 id="best-practices-for-financial-visualizations">Best Practices for Financial Visualizations</h2>
<p>Based on my experience in finance, here are some best practices to make your visualizations more effective:</p>
<ol>
<li>
<p><strong>Choose the right chart type</strong> for your data and the story you want to tell:</p>
<ul>
<li>Line charts for trends over time</li>
<li>Bar charts for comparing categories</li>
<li>Pie charts for part-to-whole relationships (use sparingly)</li>
<li>Scatter plots for correlations</li>
<li>Box plots for distributions</li>
</ul>
</li>
<li>
<p><strong>Keep it simple and focused</strong> - make sure your visualization answers a specific question or highlights a key insight.</p>
</li>
<li>
<p><strong>Use consistent colors</strong> that represent your data appropriately (red for negative, green for positive in financial contexts).</p>
</li>
<li>
<p><strong>Label everything clearly</strong> - titles, axes, legends, and data points where appropriate.</p>
</li>
<li>
<p><strong>Consider your audience</strong> - executives might want high-level trends, while analysts need more detailed visualizations.</p>
</li>
<li>
<p><strong>Use appropriate scales</strong> - avoid truncating axes in ways that might exaggerate changes.</p>
</li>
<li>
<p><strong>Add context with annotations</strong> - highlight key events or outliers to tell the complete story.</p>
</li>
</ol>
<h2 id="practical-exercise-financial-dashboard">Practical Exercise: Financial Dashboard</h2>
<p>Let&rsquo;s put everything together to create a simple financial dashboard with multiple charts:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create sample data</span>
</span></span><span style="display:flex;"><span>months <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Jan&#39;</span>, <span style="color:#e6db74">&#39;Feb&#39;</span>, <span style="color:#e6db74">&#39;Mar&#39;</span>, <span style="color:#e6db74">&#39;Apr&#39;</span>, <span style="color:#e6db74">&#39;May&#39;</span>, <span style="color:#e6db74">&#39;Jun&#39;</span>]
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> [<span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">310</span>, <span style="color:#ae81ff">290</span>, <span style="color:#ae81ff">340</span>, <span style="color:#ae81ff">390</span>, <span style="color:#ae81ff">420</span>]  <span style="color:#75715e"># in thousands</span>
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">240</span>, <span style="color:#ae81ff">225</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">290</span>, <span style="color:#ae81ff">305</span>]  <span style="color:#75715e"># in thousands</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> [r <span style="color:#f92672">-</span> e <span style="color:#66d9ef">for</span> r, e <span style="color:#f92672">in</span> zip(revenue, expenses)]  <span style="color:#75715e"># in thousands</span>
</span></span><span style="display:flex;"><span>profit_margin <span style="color:#f92672">=</span> [p<span style="color:#f92672">/</span>r <span style="color:#66d9ef">for</span> p, r <span style="color:#f92672">in</span> zip(profit, revenue)]
</span></span><span style="display:flex;"><span>expense_breakdown <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Salaries&#39;</span>: [<span style="color:#ae81ff">120</span>, <span style="color:#ae81ff">125</span>, <span style="color:#ae81ff">130</span>, <span style="color:#ae81ff">132</span>, <span style="color:#ae81ff">135</span>, <span style="color:#ae81ff">140</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Marketing&#39;</span>: [<span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">58</span>, <span style="color:#ae81ff">82</span>, <span style="color:#ae81ff">85</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Operations&#39;</span>: [<span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">55</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Other&#39;</span>: [<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">25</span>]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a 2x2 grid of subplots</span>
</span></span><span style="display:flex;"><span>fig, axs <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">12</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot 1: Revenue and Expenses line chart (top left)</span>
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>plot(months, revenue, <span style="color:#e6db74">&#39;o-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#2D7BB6&#39;</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>plot(months, expenses, <span style="color:#e6db74">&#39;s-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Expenses&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#EE854A&#39;</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#39;Revenue vs. Expenses&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Amount ($ thousands)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot 2: Profit bar chart (top right)</span>
</span></span><span style="display:flex;"><span>bars <span style="color:#f92672">=</span> axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>bar(months, profit, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#6ACC64&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> bar <span style="color:#f92672">in</span> bars:
</span></span><span style="display:flex;"><span>    height <span style="color:#f92672">=</span> bar<span style="color:#f92672">.</span>get_height()
</span></span><span style="display:flex;"><span>    axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>text(bar<span style="color:#f92672">.</span>get_x() <span style="color:#f92672">+</span> bar<span style="color:#f92672">.</span>get_width()<span style="color:#f92672">/</span><span style="color:#ae81ff">2.</span>, height <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;$</span><span style="color:#e6db74">{</span>height<span style="color:#e6db74">:</span><span style="color:#e6db74">,</span><span style="color:#e6db74">}</span><span style="color:#e6db74">k&#39;</span>, ha<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;center&#39;</span>, va<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bottom&#39;</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#39;Monthly Profit&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Profit ($ thousands)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot 3: Expense breakdown stacked bar chart (bottom left)</span>
</span></span><span style="display:flex;"><span>bottom <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros(<span style="color:#ae81ff">6</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> category, values <span style="color:#f92672">in</span> expense_breakdown<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>    axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>bar(months, values, bottom<span style="color:#f92672">=</span>bottom, label<span style="color:#f92672">=</span>category)
</span></span><span style="display:flex;"><span>    bottom <span style="color:#f92672">+=</span> values
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#39;Expense Breakdown&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Expenses ($ thousands)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot 4: Profit margin line chart (bottom right)</span>
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>plot(months, [m<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span> <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> profit_margin], <span style="color:#e6db74">&#39;D-&#39;</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#956CB4&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i, m <span style="color:#f92672">in</span> enumerate(profit_margin):
</span></span><span style="display:flex;"><span>    axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>text(i, m<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.5</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{</span>m<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.1f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#39;</span>, ha<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;center&#39;</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#39;Profit Margin&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Margin (%)&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>axs[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>suptitle(<span style="color:#e6db74">&#39;H1 2025 Financial Performance Dashboard&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">18</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">1.02</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>subplots_adjust(top<span style="color:#f92672">=</span><span style="color:#ae81ff">0.9</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;financial_dashboard.png&#39;</span>, dpi<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>, bbox_inches<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;tight&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>This code creates a comprehensive financial dashboard with four different visualizations that provide a complete picture of the financial performance.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Data visualization is a powerful tool in your financial analysis toolkit. With matplotlib and seaborn, you can create everything from simple charts to complex dashboards that help you and your stakeholders understand financial data more effectively.</p>
<p>In this post, we&rsquo;ve covered:</p>
<ul>
<li>Creating basic charts (line, bar, pie, histogram, scatter)</li>
<li>Customizing your plots with titles, labels, and annotations</li>
<li>Using advanced features like subplots and dual axes</li>
<li>Applying seaborn for statistical visualizations</li>
<li>Building a financial dashboard</li>
</ul>
<p>As you continue your Python journey, I encourage you to experiment with these visualization techniques on your own financial data. Try recreating some of the charts you currently use in Excel or other tools, and see how Python can enhance your financial analysis workflow.</p>
<p>In the next post, we&rsquo;ll explore object-oriented programming (OOP) in Python, which will help you organize your code more effectively for larger projects.</p>
<p>Until then, happy visualizing!</p>
]]></content:encoded></item><item><title>Part 12: Data Analysis with pandas</title><link>https://michaelbrunger.com/data-analysis-with-pandas/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/data-analysis-with-pandas/</guid><description>Master data analysis in Python using pandas. Learn to work with Series and DataFrame objects, import data from various sources, and perform essential data manipulation operations.</description><content:encoded><![CDATA[<h1 id="data-analysis-with-pandas-for-finance-and-accounting">Data Analysis with pandas for Finance and Accounting</h1>
<p>Welcome to post #12 in our Python journey! In the previous post, we explored NumPy and its powerful numerical capabilities. Now we&rsquo;re taking a step up to pandas, which builds on NumPy&rsquo;s foundation to provide specialized tools for working with tabular and time series dataâ€”exactly the kind of data we deal with daily in finance and accounting.</p>
<p>As a finance professional, I&rsquo;ve found pandas to be one of the most valuable tools in my Python toolkit. It&rsquo;s transformed how I handle everything from financial statements to transaction records. Let&rsquo;s dive in!</p>
<h2 id="why-pandas-for-finance">Why pandas for Finance?</h2>
<p>pandas is specifically designed for data analysis and manipulation, with particular strengths in:</p>
<ul>
<li>Working with tabular data (like spreadsheets, CSV files, and SQL tables)</li>
<li>Handling time series (perfect for financial data)</li>
<li>Cleaning messy data (a constant challenge in real-world accounting)</li>
<li>Joining and merging datasets (combining data from multiple sources)</li>
<li>Advanced grouping and aggregation (similar to pivot tables in Excel)</li>
</ul>
<p>If you&rsquo;ve spent hours manipulating data in Excel, pandas will feel both familiar yet incredibly more powerfulâ€”think Excel on steroids with the automation capabilities of Python.</p>
<h2 id="installing-pandas">Installing pandas</h2>
<p>Let&rsquo;s start by installing pandas:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pip install pandas
</span></span></code></pre></div><p>If you&rsquo;re using Anaconda, pandas is already included in the distribution.</p>
<p>Let&rsquo;s verify the installation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>print(pd<span style="color:#f92672">.</span>__version__)
</span></span></code></pre></div><p>You should see the version number displayed (like <code>2.0.3</code> or similar). By convention, pandas is imported with the alias <code>pd</code> to make your code more readable.</p>
<h2 id="the-core-pandas-data-structures">The Core pandas Data Structures</h2>
<p>pandas provides two primary data structures:</p>
<ol>
<li><strong>Series</strong>: A one-dimensional labeled array (like a column in a spreadsheet)</li>
<li><strong>DataFrame</strong>: A two-dimensional labeled data structure with columns (like a spreadsheet or SQL table)</li>
</ol>
<p>Let&rsquo;s explore both with financial examples.</p>
<h3 id="series-one-dimensional-data">Series: One-Dimensional Data</h3>
<p>A Series is essentially a column of data with labeled indices:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a Series of monthly expenses</span>
</span></span><span style="display:flex;"><span>monthly_expenses <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series([<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">1500</span>, <span style="color:#ae81ff">1100</span>, <span style="color:#ae81ff">1800</span>], 
</span></span><span style="display:flex;"><span>                            index<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Rent&#39;</span>, <span style="color:#e6db74">&#39;Payroll&#39;</span>, <span style="color:#e6db74">&#39;Utilities&#39;</span>, <span style="color:#e6db74">&#39;Inventory&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(monthly_expenses)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Rent         1200</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Payroll      1500</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Utilities    1100</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inventory    1800</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dtype: int64</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Access by label</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly rent: $</span><span style="color:#e6db74">{</span>monthly_expenses[<span style="color:#e6db74">&#39;Rent&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: Monthly rent: $1200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Access by position</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Second highest expense: $</span><span style="color:#e6db74">{</span>monthly_expenses<span style="color:#f92672">.</span>iloc[<span style="color:#ae81ff">1</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: Second highest expense: $1500</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Perform calculations</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total monthly expenses: $</span><span style="color:#e6db74">{</span>monthly_expenses<span style="color:#f92672">.</span>sum()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: Total monthly expenses: $5600</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Average expense: $</span><span style="color:#e6db74">{</span>monthly_expenses<span style="color:#f92672">.</span>mean()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: Average expense: $1400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Filter expenses greater than 1200</span>
</span></span><span style="display:flex;"><span>high_expenses <span style="color:#f92672">=</span> monthly_expenses[monthly_expenses <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1200</span>]
</span></span><span style="display:flex;"><span>print(high_expenses)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Payroll      1500</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inventory    1800</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dtype: int64</span>
</span></span></code></pre></div><p>Series are useful for representing:</p>
<ul>
<li>A single financial metric across multiple companies</li>
<li>Monthly or yearly values for a specific account</li>
<li>Daily stock prices</li>
</ul>
<h3 id="dataframe-two-dimensional-data">DataFrame: Two-Dimensional Data</h3>
<p>DataFrames are where pandas really shines. Think of them as an Excel spreadsheet within Python:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a DataFrame representing a simplified income statement</span>
</span></span><span style="display:flex;"><span>income_statement <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Q1&#39;</span>: [<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">45000</span>, <span style="color:#ae81ff">15000</span>, <span style="color:#ae81ff">40000</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Q2&#39;</span>: [<span style="color:#ae81ff">110000</span>, <span style="color:#ae81ff">47000</span>, <span style="color:#ae81ff">15000</span>, <span style="color:#ae81ff">48000</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Q3&#39;</span>: [<span style="color:#ae81ff">95000</span>, <span style="color:#ae81ff">42000</span>, <span style="color:#ae81ff">16000</span>, <span style="color:#ae81ff">37000</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Q4&#39;</span>: [<span style="color:#ae81ff">125000</span>, <span style="color:#ae81ff">52000</span>, <span style="color:#ae81ff">17000</span>, <span style="color:#ae81ff">56000</span>]
</span></span><span style="display:flex;"><span>}, index<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Revenue&#39;</span>, <span style="color:#e6db74">&#39;COGS&#39;</span>, <span style="color:#e6db74">&#39;Operating Expenses&#39;</span>, <span style="color:#e6db74">&#39;Net Income&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(income_statement)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#                      Q1     Q2     Q3     Q4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Revenue          100000 110000  95000 125000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># COGS              45000  47000  42000  52000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Operating Expenses 15000  15000  16000  17000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Net Income        40000  48000  37000  56000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Or create the same DataFrame with a different orientation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (More commonly used format with rows as observations and columns as variables)</span>
</span></span><span style="display:flex;"><span>income_statement_alt <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Quarter&#39;</span>: [<span style="color:#e6db74">&#39;Q1&#39;</span>, <span style="color:#e6db74">&#39;Q2&#39;</span>, <span style="color:#e6db74">&#39;Q3&#39;</span>, <span style="color:#e6db74">&#39;Q4&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Revenue&#39;</span>: [<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">110000</span>, <span style="color:#ae81ff">95000</span>, <span style="color:#ae81ff">125000</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;COGS&#39;</span>: [<span style="color:#ae81ff">45000</span>, <span style="color:#ae81ff">47000</span>, <span style="color:#ae81ff">42000</span>, <span style="color:#ae81ff">52000</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Operating_Expenses&#39;</span>: [<span style="color:#ae81ff">15000</span>, <span style="color:#ae81ff">15000</span>, <span style="color:#ae81ff">16000</span>, <span style="color:#ae81ff">17000</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Net_Income&#39;</span>: [<span style="color:#ae81ff">40000</span>, <span style="color:#ae81ff">48000</span>, <span style="color:#ae81ff">37000</span>, <span style="color:#ae81ff">56000</span>]
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(income_statement_alt)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   Quarter  Revenue   COGS  Operating_Expenses  Net_Income</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 0      Q1   100000  45000               15000       40000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 1      Q2   110000  47000               15000       48000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2      Q3    95000  42000               16000       37000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3      Q4   125000  52000               17000       56000</span>
</span></span></code></pre></div><p>The orientation you choose often depends on your data and analysis goals. For financial data:</p>
<ul>
<li>Use index for time periods and columns for accounts when tracking few accounts over time</li>
<li>Use rows for time periods and columns for accounts when tracking many accounts</li>
</ul>
<h2 id="reading-data-from-external-sources">Reading Data from External Sources</h2>
<p>In real-world finance, data often comes from external files. pandas excels at importing from various sources:</p>
<h3 id="reading-from-csv">Reading from CSV</h3>
<p>CSVs are common for exporting financial data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Read a transaction register CSV file</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># transactions.csv contains: Date,Description,Category,Amount</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Preview the first 5 rows</span>
</span></span><span style="display:flex;"><span>print(transactions<span style="color:#f92672">.</span>head())
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#         Date               Description    Category  Amount</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 0  2023-01-05          Office Supplies    Expense   -89.99</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 1  2023-01-07  Client Payment - ABC Inc     Income  1250.00</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2  2023-01-10                   Payroll    Expense -4500.00</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3  2023-01-15           Software License    Expense  -199.99</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 4  2023-01-18            Bank Interest     Income     2.13</span>
</span></span></code></pre></div><h3 id="reading-from-excel">Reading from Excel</h3>
<p>Excel files are ubiquitous in finance and accounting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Install openpyxl first if you haven&#39;t:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pip install openpyxl</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Read an Excel file, specifying the sheet</span>
</span></span><span style="display:flex;"><span>financial_data <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_excel(<span style="color:#e6db74">&#39;financial_model.xlsx&#39;</span>, sheet_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Income Statement&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Preview the data</span>
</span></span><span style="display:flex;"><span>print(financial_data<span style="color:#f92672">.</span>head())
</span></span></code></pre></div><h3 id="connecting-to-databases">Connecting to Databases</h3>
<p>For more enterprise-level finance applications:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># pip install sqlalchemy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pip install pymysql (or other database driver)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sqlalchemy <span style="color:#f92672">import</span> create_engine
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Connect to database (example with MySQL)</span>
</span></span><span style="display:flex;"><span>engine <span style="color:#f92672">=</span> create_engine(<span style="color:#e6db74">&#39;mysql+pymysql://username:password@localhost/finance_db&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Read data directly from SQL query</span>
</span></span><span style="display:flex;"><span>sql_query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;SELECT * FROM general_ledger WHERE account_type = &#39;Asset&#39; AND transaction_date &gt; &#39;2023-01-01&#39;&#34;</span>
</span></span><span style="display:flex;"><span>gl_data <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_sql(sql_query, engine)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(gl_data<span style="color:#f92672">.</span>head())
</span></span></code></pre></div><h2 id="inspecting-and-exploring-your-data">Inspecting and Exploring Your Data</h2>
<p>When you receive a new financial dataset, your first step is usually to understand its structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Assuming we&#39;ve loaded our transactions data</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Data shape (rows, columns): </span><span style="color:#e6db74">{</span>transactions<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Column names:&#34;</span>)
</span></span><span style="display:flex;"><span>print(transactions<span style="color:#f92672">.</span>columns<span style="color:#f92672">.</span>tolist())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Data types:&#34;</span>)
</span></span><span style="display:flex;"><span>print(transactions<span style="color:#f92672">.</span>dtypes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Summary statistics:&#34;</span>)
</span></span><span style="display:flex;"><span>print(transactions<span style="color:#f92672">.</span>describe())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Missing values:&#34;</span>)
</span></span><span style="display:flex;"><span>print(transactions<span style="color:#f92672">.</span>isnull()<span style="color:#f92672">.</span>sum())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check for duplicates</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Duplicate rows: </span><span style="color:#e6db74">{</span>transactions<span style="color:#f92672">.</span>duplicated()<span style="color:#f92672">.</span>sum()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h2 id="data-selection-and-filtering">Data Selection and Filtering</h2>
<p>pandas offers powerful ways to select and filter data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Select specific columns</span>
</span></span><span style="display:flex;"><span>amounts_and_categories <span style="color:#f92672">=</span> transactions[[<span style="color:#e6db74">&#39;Category&#39;</span>, <span style="color:#e6db74">&#39;Amount&#39;</span>]]
</span></span><span style="display:flex;"><span>print(amounts_and_categories<span style="color:#f92672">.</span>head())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Filter rows based on conditions</span>
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> transactions[transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>income <span style="color:#f92672">=</span> transactions[transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total expenses: $</span><span style="color:#e6db74">{</span>expenses[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total income: $</span><span style="color:#e6db74">{</span>income[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Filter with multiple conditions</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find large office expenses</span>
</span></span><span style="display:flex;"><span>large_office_expenses <span style="color:#f92672">=</span> transactions[
</span></span><span style="display:flex;"><span>    (transactions[<span style="color:#e6db74">&#39;Category&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Expense&#39;</span>) <span style="color:#f92672">&amp;</span> 
</span></span><span style="display:flex;"><span>    (transactions[<span style="color:#e6db74">&#39;Description&#39;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>contains(<span style="color:#e6db74">&#39;Office&#39;</span>)) <span style="color:#f92672">&amp;</span> 
</span></span><span style="display:flex;"><span>    (transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>print(large_office_expenses)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Select data from a specific date range</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># First, ensure Date is a datetime type</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Date&#39;</span>] <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>to_datetime(transactions[<span style="color:#e6db74">&#39;Date&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Filter for Q1 data</span>
</span></span><span style="display:flex;"><span>q1_data <span style="color:#f92672">=</span> transactions[(transactions[<span style="color:#e6db74">&#39;Date&#39;</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;2023-01-01&#39;</span>) <span style="color:#f92672">&amp;</span> 
</span></span><span style="display:flex;"><span>                       (transactions[<span style="color:#e6db74">&#39;Date&#39;</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;2023-03-31&#39;</span>)]
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Q1 transaction count: </span><span style="color:#e6db74">{</span>len(q1_data)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h2 id="handling-missing-data">Handling Missing Data</h2>
<p>Missing data is a common challenge in financial datasets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Check for missing values</span>
</span></span><span style="display:flex;"><span>print(transactions<span style="color:#f92672">.</span>isnull()<span style="color:#f92672">.</span>sum())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fill missing values in Amount column with 0</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fill missing categories with &#39;Uncategorized&#39;</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Category&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Category&#39;</span>]<span style="color:#f92672">.</span>fillna(<span style="color:#e6db74">&#39;Uncategorized&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Drop rows with any remaining missing values</span>
</span></span><span style="display:flex;"><span>transactions_clean <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternative: Only drop rows where specific columns are missing</span>
</span></span><span style="display:flex;"><span>transactions_essential <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>dropna(subset<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Date&#39;</span>, <span style="color:#e6db74">&#39;Amount&#39;</span>])
</span></span></code></pre></div><h2 id="data-transformation-and-feature-engineering">Data Transformation and Feature Engineering</h2>
<p>Often, you&rsquo;ll need to create new calculated fields for financial analysis:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Add a Month column for easier grouping</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Month&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Date&#39;</span>]<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add an Absolute Amount column for analysis</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Abs_Amount&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>abs()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Categorize transactions by size</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">categorize_amount</span>(amount):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> abs(amount) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Small&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> abs(amount) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1000</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Medium&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Large&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Size_Category&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>apply(categorize_amount)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a new column indicating if it&#39;s end of quarter</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Is_Quarter_End&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Date&#39;</span>]<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>is_quarter_end
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add a calculated running balance</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;Date&#39;</span>)
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Running_Balance&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>cumsum()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(transactions<span style="color:#f92672">.</span>head())
</span></span></code></pre></div><h2 id="grouping-and-aggregation-the-heart-of-financial-analysis">Grouping and Aggregation: The Heart of Financial Analysis</h2>
<p>Grouping operations are similar to Excel&rsquo;s pivot tables and are perfect for financial reporting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Group by Category and calculate sum, count, and average</span>
</span></span><span style="display:flex;"><span>category_summary <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Category&#39;</span>)<span style="color:#f92672">.</span>agg({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Amount&#39;</span>: [<span style="color:#e6db74">&#39;sum&#39;</span>, <span style="color:#e6db74">&#39;count&#39;</span>, <span style="color:#e6db74">&#39;mean&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Description&#39;</span>: <span style="color:#e6db74">&#39;count&#39;</span>  <span style="color:#75715e"># count of transactions</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(category_summary)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Group by Month and Category to see spending trends</span>
</span></span><span style="display:flex;"><span>monthly_by_category <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;Month&#39;</span>, <span style="color:#e6db74">&#39;Category&#39;</span>])[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>unstack()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(monthly_by_category)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate monthly totals</span>
</span></span><span style="display:flex;"><span>monthly_totals <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Month&#39;</span>)[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>print(monthly_totals)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find the month with the highest expenses</span>
</span></span><span style="display:flex;"><span>monthly_expenses <span style="color:#f92672">=</span> transactions[transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Month&#39;</span>)[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>highest_expense_month <span style="color:#f92672">=</span> monthly_expenses<span style="color:#f92672">.</span>idxmin()  <span style="color:#75715e"># min because expenses are negative</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Month with highest expenses: </span><span style="color:#e6db74">{</span>highest_expense_month<span style="color:#e6db74">}</span><span style="color:#e6db74">, Amount: $</span><span style="color:#e6db74">{</span>monthly_expenses<span style="color:#f92672">.</span>min()<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h2 id="advanced-financial-calculations">Advanced Financial Calculations</h2>
<p>Let&rsquo;s implement some practical financial calculations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Monthly Profit and Loss Statement</span>
</span></span><span style="display:flex;"><span>monthly_pl <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>pivot_table(
</span></span><span style="display:flex;"><span>    index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>    columns<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Category&#39;</span>,
</span></span><span style="display:flex;"><span>    values<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Amount&#39;</span>,
</span></span><span style="display:flex;"><span>    aggfunc<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;sum&#39;</span>
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add a Profit column</span>
</span></span><span style="display:flex;"><span>monthly_pl[<span style="color:#e6db74">&#39;Profit&#39;</span>] <span style="color:#f92672">=</span> monthly_pl[<span style="color:#e6db74">&#39;Income&#39;</span>] <span style="color:#f92672">+</span> monthly_pl[<span style="color:#e6db74">&#39;Expense&#39;</span>]  <span style="color:#75715e"># Adding because expenses are negative</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(monthly_pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate running cash balance by date</span>
</span></span><span style="display:flex;"><span>daily_net <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Date&#39;</span>)[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>daily_net[<span style="color:#e6db74">&#39;Running_Balance&#39;</span>] <span style="color:#f92672">=</span> daily_net[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>cumsum()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(daily_net<span style="color:#f92672">.</span>head())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate 30-day moving average of daily transaction amounts</span>
</span></span><span style="display:flex;"><span>transactions_by_date <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Date&#39;</span>)[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>moving_avg_30d <span style="color:#f92672">=</span> transactions_by_date<span style="color:#f92672">.</span>rolling(window<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(moving_avg_30d<span style="color:#f92672">.</span>tail())
</span></span></code></pre></div><h2 id="merging-and-joining-datasets">Merging and Joining Datasets</h2>
<p>In finance, we often need to combine data from multiple sources:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a sample budget DataFrame</span>
</span></span><span style="display:flex;"><span>budget <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Category&#39;</span>: [<span style="color:#e6db74">&#39;Rent&#39;</span>, <span style="color:#e6db74">&#39;Utilities&#39;</span>, <span style="color:#e6db74">&#39;Payroll&#39;</span>, <span style="color:#e6db74">&#39;Marketing&#39;</span>, <span style="color:#e6db74">&#39;Software&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Budgeted_Amount&#39;</span>: [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">5000</span>, <span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">500</span>]
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Group actual expenses by category</span>
</span></span><span style="display:flex;"><span>actual_expenses <span style="color:#f92672">=</span> transactions[transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Category&#39;</span>)[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>abs()<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>actual_expenses<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Category&#39;</span>, <span style="color:#e6db74">&#39;Actual_Amount&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merge the budget with actual expenses</span>
</span></span><span style="display:flex;"><span>budget_vs_actual <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>merge(budget, actual_expenses, on<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Category&#39;</span>, how<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;outer&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate variance (negative means over budget)</span>
</span></span><span style="display:flex;"><span>budget_vs_actual[<span style="color:#e6db74">&#39;Variance&#39;</span>] <span style="color:#f92672">=</span> budget_vs_actual[<span style="color:#e6db74">&#39;Budgeted_Amount&#39;</span>] <span style="color:#f92672">-</span> budget_vs_actual[<span style="color:#e6db74">&#39;Actual_Amount&#39;</span>]
</span></span><span style="display:flex;"><span>budget_vs_actual[<span style="color:#e6db74">&#39;Variance_Percent&#39;</span>] <span style="color:#f92672">=</span> (budget_vs_actual[<span style="color:#e6db74">&#39;Variance&#39;</span>] <span style="color:#f92672">/</span> budget_vs_actual[<span style="color:#e6db74">&#39;Budgeted_Amount&#39;</span>]) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(budget_vs_actual)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find categories that are over budget</span>
</span></span><span style="display:flex;"><span>over_budget <span style="color:#f92672">=</span> budget_vs_actual[budget_vs_actual[<span style="color:#e6db74">&#39;Variance&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Categories over budget:&#34;</span>)
</span></span><span style="display:flex;"><span>print(over_budget)
</span></span></code></pre></div><h2 id="time-series-analysis-perfect-for-financial-data">Time Series Analysis: Perfect for Financial Data</h2>
<p>pandas has exceptional support for time series data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Convert Date to datetime if not already</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Date&#39;</span>] <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>to_datetime(transactions[<span style="color:#e6db74">&#39;Date&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set Date as index for time series analysis</span>
</span></span><span style="display:flex;"><span>ts_data <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>set_index(<span style="color:#e6db74">&#39;Date&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Resample to get monthly totals</span>
</span></span><span style="display:flex;"><span>monthly_data <span style="color:#f92672">=</span> ts_data[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#39;M&#39;</span>)<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>print(monthly_data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compute rolling average (e.g., 3-month rolling revenue)</span>
</span></span><span style="display:flex;"><span>income_only <span style="color:#f92672">=</span> ts_data[ts_data[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>rolling_3m_revenue <span style="color:#f92672">=</span> income_only[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#39;M&#39;</span>)<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>rolling(window<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>print(rolling_3m_revenue)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate percent change period-over-period</span>
</span></span><span style="display:flex;"><span>monthly_growth <span style="color:#f92672">=</span> monthly_data<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly growth rates (%):</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>monthly_growth<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Seasonal decomposition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> statsmodels.tsa.seasonal <span style="color:#f92672">import</span> seasonal_decompose
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Need 2+ years of data for proper decomposition, but here&#39;s the concept:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Assuming we have enough data:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># decomposition = seasonal_decompose(monthly_data, model=&#39;additive&#39;, period=12)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># fig = decomposition.plot()</span>
</span></span></code></pre></div><h2 id="handling-excel-like-functionality-with-pandas">Handling Excel-Like Functionality with pandas</h2>
<p>If you&rsquo;re transitioning from Excel, pandas offers similar functionality with more power:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># VLOOKUP equivalent</span>
</span></span><span style="display:flex;"><span>product_info <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Product_ID&#39;</span>: [<span style="color:#e6db74">&#39;A001&#39;</span>, <span style="color:#e6db74">&#39;B002&#39;</span>, <span style="color:#e6db74">&#39;C003&#39;</span>, <span style="color:#e6db74">&#39;D004&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Product_Name&#39;</span>: [<span style="color:#e6db74">&#39;Laptop&#39;</span>, <span style="color:#e6db74">&#39;Monitor&#39;</span>, <span style="color:#e6db74">&#39;Keyboard&#39;</span>, <span style="color:#e6db74">&#39;Mouse&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Unit_Cost&#39;</span>: [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">80</span>, <span style="color:#ae81ff">25</span>]
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sales <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Date&#39;</span>: [<span style="color:#e6db74">&#39;2023-01-15&#39;</span>, <span style="color:#e6db74">&#39;2023-01-20&#39;</span>, <span style="color:#e6db74">&#39;2023-01-22&#39;</span>, <span style="color:#e6db74">&#39;2023-01-25&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Product_ID&#39;</span>: [<span style="color:#e6db74">&#39;A001&#39;</span>, <span style="color:#e6db74">&#39;C003&#39;</span>, <span style="color:#e6db74">&#39;A001&#39;</span>, <span style="color:#e6db74">&#39;B002&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Quantity&#39;</span>: [<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merge sales with product info (like VLOOKUP)</span>
</span></span><span style="display:flex;"><span>sales_with_info <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>merge(sales, product_info, on<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Product_ID&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate total sales amount</span>
</span></span><span style="display:flex;"><span>sales_with_info[<span style="color:#e6db74">&#39;Total_Cost&#39;</span>] <span style="color:#f92672">=</span> sales_with_info[<span style="color:#e6db74">&#39;Quantity&#39;</span>] <span style="color:#f92672">*</span> sales_with_info[<span style="color:#e6db74">&#39;Unit_Cost&#39;</span>]
</span></span><span style="display:flex;"><span>print(sales_with_info)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pivot tables</span>
</span></span><span style="display:flex;"><span>pivot_sales <span style="color:#f92672">=</span> sales_with_info<span style="color:#f92672">.</span>pivot_table(
</span></span><span style="display:flex;"><span>    index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Product_Name&#39;</span>,
</span></span><span style="display:flex;"><span>    values<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Quantity&#39;</span>, <span style="color:#e6db74">&#39;Total_Cost&#39;</span>],
</span></span><span style="display:flex;"><span>    aggfunc<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;Quantity&#39;</span>: <span style="color:#e6db74">&#39;sum&#39;</span>, <span style="color:#e6db74">&#39;Total_Cost&#39;</span>: <span style="color:#e6db74">&#39;sum&#39;</span>}
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(pivot_sales)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sort by total cost (descending)</span>
</span></span><span style="display:flex;"><span>print(pivot_sales<span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;Total_Cost&#39;</span>, ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>))
</span></span></code></pre></div><h2 id="exporting-and-saving-your-analysis">Exporting and Saving Your Analysis</h2>
<p>Once your analysis is complete, you&rsquo;ll often need to export the results:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Export as CSV</span>
</span></span><span style="display:flex;"><span>budget_vs_actual<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#39;budget_analysis.csv&#39;</span>, index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export to Excel</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> pd<span style="color:#f92672">.</span>ExcelWriter(<span style="color:#e6db74">&#39;financial_analysis.xlsx&#39;</span>) <span style="color:#66d9ef">as</span> writer:
</span></span><span style="display:flex;"><span>    budget_vs_actual<span style="color:#f92672">.</span>to_excel(writer, sheet_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Budget Analysis&#39;</span>, index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>    pivot_sales<span style="color:#f92672">.</span>to_excel(writer, sheet_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Sales by Product&#39;</span>)
</span></span><span style="display:flex;"><span>    monthly_pl<span style="color:#f92672">.</span>to_excel(writer, sheet_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Monthly P&amp;L&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export specific results to JSON (useful for web applications)</span>
</span></span><span style="display:flex;"><span>over_budget<span style="color:#f92672">.</span>to_json(<span style="color:#e6db74">&#39;over_budget_alert.json&#39;</span>, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;records&#39;</span>)
</span></span></code></pre></div><h2 id="case-study-comprehensive-financial-analysis">Case Study: Comprehensive Financial Analysis</h2>
<p>Let&rsquo;s pull everything together in a finance-focused case study:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 1. Load and prepare data</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>)
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Date&#39;</span>] <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>to_datetime(transactions[<span style="color:#e6db74">&#39;Date&#39;</span>])
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Month&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Date&#39;</span>]<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m&#39;</span>)
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Quarter&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Date&#39;</span>]<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>to_period(<span style="color:#e6db74">&#39;Q&#39;</span>)<span style="color:#f92672">.</span>astype(str)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2. Clean data</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Category&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Category&#39;</span>]<span style="color:#f92672">.</span>fillna(<span style="color:#e6db74">&#39;Uncategorized&#39;</span>)
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3. Create income and expense dataframes</span>
</span></span><span style="display:flex;"><span>income <span style="color:#f92672">=</span> transactions[transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> transactions[transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>expenses[<span style="color:#e6db74">&#39;Abs_Amount&#39;</span>] <span style="color:#f92672">=</span> expenses[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>abs()  <span style="color:#75715e"># Make expenses positive for easier calculations</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 4. Quarterly Financial Reports</span>
</span></span><span style="display:flex;"><span>quarterly_summary <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Total_Income&#39;</span>: income<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Quarter&#39;</span>)[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum(),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Total_Expenses&#39;</span>: expenses<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Quarter&#39;</span>)[<span style="color:#e6db74">&#39;Abs_Amount&#39;</span>]<span style="color:#f92672">.</span>sum(),
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>quarterly_summary[<span style="color:#e6db74">&#39;Net_Profit&#39;</span>] <span style="color:#f92672">=</span> quarterly_summary[<span style="color:#e6db74">&#39;Total_Income&#39;</span>] <span style="color:#f92672">-</span> quarterly_summary[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>]
</span></span><span style="display:flex;"><span>quarterly_summary[<span style="color:#e6db74">&#39;Profit_Margin&#39;</span>] <span style="color:#f92672">=</span> quarterly_summary[<span style="color:#e6db74">&#39;Net_Profit&#39;</span>] <span style="color:#f92672">/</span> quarterly_summary[<span style="color:#e6db74">&#39;Total_Income&#39;</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Quarterly Financial Summary:&#34;</span>)
</span></span><span style="display:flex;"><span>print(quarterly_summary)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 5. Top 5 expense categories</span>
</span></span><span style="display:flex;"><span>top_expenses <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Category&#39;</span>)[<span style="color:#e6db74">&#39;Abs_Amount&#39;</span>]<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>sort_values(ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)<span style="color:#f92672">.</span>head(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Top 5 Expense Categories:&#34;</span>)
</span></span><span style="display:flex;"><span>print(top_expenses)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 6. Monthly trend analysis</span>
</span></span><span style="display:flex;"><span>monthly_net <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Income&#39;</span>: income<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Month&#39;</span>)[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum(),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Expenses&#39;</span>: expenses<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Month&#39;</span>)[<span style="color:#e6db74">&#39;Abs_Amount&#39;</span>]<span style="color:#f92672">.</span>sum() <span style="color:#f92672">*</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>  <span style="color:#75715e"># Make expenses negative again</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>monthly_net[<span style="color:#e6db74">&#39;Net&#39;</span>] <span style="color:#f92672">=</span> monthly_net[<span style="color:#e6db74">&#39;Income&#39;</span>] <span style="color:#f92672">+</span> monthly_net[<span style="color:#e6db74">&#39;Expenses&#39;</span>]  <span style="color:#75715e"># Net will be positive or negative</span>
</span></span><span style="display:flex;"><span>monthly_net[<span style="color:#e6db74">&#39;3M_Rolling_Avg&#39;</span>] <span style="color:#f92672">=</span> monthly_net[<span style="color:#e6db74">&#39;Net&#39;</span>]<span style="color:#f92672">.</span>rolling(window<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Monthly Trend Analysis:&#34;</span>)
</span></span><span style="display:flex;"><span>print(monthly_net)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 7. Cash flow analysis</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> transactions<span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;Date&#39;</span>)
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Running_Balance&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>cumsum()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find any days where cash balance went negative</span>
</span></span><span style="display:flex;"><span>cash_issues <span style="color:#f92672">=</span> transactions[transactions[<span style="color:#e6db74">&#39;Running_Balance&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> cash_issues<span style="color:#f92672">.</span>empty:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Cash Flow Alert - Negative Balance Detected:&#34;</span>)
</span></span><span style="display:flex;"><span>    print(cash_issues[[<span style="color:#e6db74">&#39;Date&#39;</span>, <span style="color:#e6db74">&#39;Running_Balance&#39;</span>]]<span style="color:#f92672">.</span>head())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 8. Year-over-year comparison (assuming we have multiple years of data)</span>
</span></span><span style="display:flex;"><span>transactions[<span style="color:#e6db74">&#39;Year&#39;</span>] <span style="color:#f92672">=</span> transactions[<span style="color:#e6db74">&#39;Date&#39;</span>]<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>year
</span></span><span style="display:flex;"><span>yoy_income <span style="color:#f92672">=</span> income<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;Year&#39;</span>, <span style="color:#e6db74">&#39;Quarter&#39;</span>])[<span style="color:#e6db74">&#39;Amount&#39;</span>]<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>unstack()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Year-over-Year Quarterly Income:&#34;</span>)
</span></span><span style="display:flex;"><span>print(yoy_income)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 9. Export key insights to Excel</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> pd<span style="color:#f92672">.</span>ExcelWriter(<span style="color:#e6db74">&#39;financial_insights.xlsx&#39;</span>) <span style="color:#66d9ef">as</span> writer:
</span></span><span style="display:flex;"><span>    quarterly_summary<span style="color:#f92672">.</span>to_excel(writer, sheet_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Quarterly Summary&#39;</span>)
</span></span><span style="display:flex;"><span>    top_expenses<span style="color:#f92672">.</span>to_excel(writer, sheet_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Top Expenses&#39;</span>)
</span></span><span style="display:flex;"><span>    monthly_net<span style="color:#f92672">.</span>to_excel(writer, sheet_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Monthly Trends&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Financial analysis complete! Results exported to &#39;financial_insights.xlsx&#39;&#34;</span>)
</span></span></code></pre></div><h2 id="key-takeaways-from-pandas-for-finance-professionals">Key Takeaways from pandas for Finance Professionals</h2>
<p>For finance and accounting professionals, pandas offers several key advantages:</p>
<ol>
<li><strong>Automation</strong>: Automate repetitive data tasks that would take hours in Excel</li>
<li><strong>Scale</strong>: Handle much larger datasets than Excel can manage</li>
<li><strong>Reproducibility</strong>: Document your analysis as code for future reference or audit</li>
<li><strong>Flexibility</strong>: Customize your analysis beyond what Excel templates allow</li>
<li><strong>Integration</strong>: Connect directly to databases, APIs, and other data sources</li>
<li><strong>Analysis Power</strong>: Perform complex statistical operations with minimal code</li>
</ol>
<h2 id="next-steps">Next Steps</h2>
<p>Now that you understand the basics of pandas for financial data analysis, you&rsquo;re ready to move on to data visualization in our next post. We&rsquo;ll explore how to transform these financial insights into compelling visualizations using Matplotlib and Seaborn!</p>
<h2 id="exercise-financial-data-analysis">Exercise: Financial Data Analysis</h2>
<p>Before you go, try this exercise to practice your pandas skills:</p>
<p>You have a CSV file of transactions with columns for Date, Description, Category, and Amount. Using pandas:</p>
<ol>
<li>Calculate the monthly income, expenses, and net profit</li>
<li>Find the top 3 expense categories by total amount</li>
<li>Create a month-over-month percentage change analysis of your net profit</li>
<li>Identify any expense categories that show an increasing trend over time</li>
</ol>
<p>Good luck, and feel free to share your solutions in the comments!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my financial analysis toolkit. Follow along as we discover together how Python can transform our work in finance and accounting!</em></p>
]]></content:encoded></item><item><title>Part 11: NumPy Fundamentals for Numerical Data</title><link>https://michaelbrunger.com/numpy-fundamentals-numerical-data/</link><pubDate>Thu, 10 Jul 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/numpy-fundamentals-numerical-data/</guid><description>Get started with NumPy for numerical computing in Python. Learn about ndarrays, vectorized operations, broadcasting, and see how NumPy outperforms pure Python for numerical tasks.</description><content:encoded><![CDATA[<h1 id="numpy-fundamentals-for-numerical-data-with-finance-applications">NumPy Fundamentals for Numerical Data (with Finance Applications)</h1>
<p>Welcome to post #11 in our Python learning journey! If you&rsquo;ve been following along, you&rsquo;re starting to build a solid foundation in Python. Now it&rsquo;s time to explore NumPy, the powerhouse library that makes Python a serious contender for numerical computing and data analysis.</p>
<p>As a finance professional myself, I&rsquo;ve found NumPy particularly useful for financial calculations, portfolio analysis, and working with large datasets. Let&rsquo;s dive in and see how this library can level up your Python skills.</p>
<h2 id="what-is-numpy-and-why-should-you-care">What is NumPy and Why Should You Care?</h2>
<p>NumPy (Numerical Python) is a fundamental library that provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays efficiently.</p>
<p>Why is this important, especially for finance work?</p>
<ul>
<li><strong>Performance</strong>: NumPy operations are executed in optimized C code, making them much faster than equivalent Python loops</li>
<li><strong>Memory efficiency</strong>: NumPy arrays use less memory than Python lists for numerical data</li>
<li><strong>Mathematical operations</strong>: Built-in functions for statistical analysis, linear algebra, and other operations common in finance</li>
<li><strong>Foundation for other tools</strong>: Libraries like pandas, matplotlib, and scikit-learn are built on NumPy</li>
</ul>
<p>Simply put, if you&rsquo;re doing any kind of numerical analysis in Pythonâ€”whether that&rsquo;s calculating portfolio returns, analyzing balance sheets, or running financial simulationsâ€”NumPy will make your life easier.</p>
<h2 id="installing-numpy">Installing NumPy</h2>
<p>Before we get started, let&rsquo;s make sure NumPy is installed in your environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pip install numpy
</span></span></code></pre></div><p>If you&rsquo;re using Anaconda (which we covered in post #10), NumPy is already included!</p>
<p>To confirm the installation worked, open a Python shell and try:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span>print(np<span style="color:#f92672">.</span>__version__)
</span></span></code></pre></div><p>You should see the version number printed (like <code>1.24.3</code> or similar). The convention is to import NumPy with the alias <code>np</code> to save typing.</p>
<h2 id="the-numpy-ndarray-python-lists-on-steroids">The NumPy ndarray: Python Lists on Steroids</h2>
<p>The core of NumPy is the <code>ndarray</code> (n-dimensional array) object. Think of it as a more powerful version of Python lists, specifically designed for numerical data.</p>
<h3 id="creating-arrays">Creating Arrays</h3>
<p>Let&rsquo;s start by creating some simple arrays:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an array from a Python list</span>
</span></span><span style="display:flex;"><span>revenue_data <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">10500</span>, <span style="color:#ae81ff">15200</span>, <span style="color:#ae81ff">12100</span>, <span style="color:#ae81ff">18900</span>])
</span></span><span style="display:flex;"><span>print(revenue_data)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: [10500 15200 12100 18900]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an array of zeros (useful as a placeholder)</span>
</span></span><span style="display:flex;"><span>empty_balance_sheet <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>))  <span style="color:#75715e"># 3 rows, 4 columns</span>
</span></span><span style="display:flex;"><span>print(empty_balance_sheet)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># [[0. 0. 0. 0.]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [0. 0. 0. 0.]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [0. 0. 0. 0.]]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an array of ones</span>
</span></span><span style="display:flex;"><span>unit_values <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>ones(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>print(unit_values)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: [1. 1. 1. 1. 1.]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an array with a range of values (like Python&#39;s range)</span>
</span></span><span style="display:flex;"><span>quarters <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>)  <span style="color:#75715e"># 1 to 4</span>
</span></span><span style="display:flex;"><span>print(quarters)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: [1 2 3 4]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create evenly spaced values (useful for time series)</span>
</span></span><span style="display:flex;"><span>interest_rates <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">2.5</span>, <span style="color:#ae81ff">3.5</span>, <span style="color:#ae81ff">5</span>)  <span style="color:#75715e"># 5 values from 2.5 to 3.5</span>
</span></span><span style="display:flex;"><span>print(interest_rates)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: [2.5  2.75 3.   3.25 3.5 ]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a 2D array (matrix) for financial data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Rows: Q1, Q2, Q3, Q4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Columns: Revenue, Expenses, Profit</span>
</span></span><span style="display:flex;"><span>financial_data <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">10500</span>, <span style="color:#ae81ff">8200</span>, <span style="color:#ae81ff">2300</span>],   <span style="color:#75715e"># Q1</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">15200</span>, <span style="color:#ae81ff">9500</span>, <span style="color:#ae81ff">5700</span>],   <span style="color:#75715e"># Q2</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">12100</span>, <span style="color:#ae81ff">7800</span>, <span style="color:#ae81ff">4300</span>],   <span style="color:#75715e"># Q3</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">18900</span>, <span style="color:#ae81ff">10200</span>, <span style="color:#ae81ff">8700</span>]   <span style="color:#75715e"># Q4</span>
</span></span><span style="display:flex;"><span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(financial_data)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># [[10500  8200  2300]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [15200  9500  5700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [12100  7800  4300]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [18900 10200  8700]]</span>
</span></span></code></pre></div><h3 id="array-attributes">Array Attributes</h3>
<p>NumPy arrays come with useful attributes that tell you about their shape and contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using the financial_data from above</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Shape (dimensions) of the array</span>
</span></span><span style="display:flex;"><span>print(financial_data<span style="color:#f92672">.</span>shape)  <span style="color:#75715e"># Output: (4, 3)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Number of dimensions</span>
</span></span><span style="display:flex;"><span>print(financial_data<span style="color:#f92672">.</span>ndim)   <span style="color:#75715e"># Output: 2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Total number of elements</span>
</span></span><span style="display:flex;"><span>print(financial_data<span style="color:#f92672">.</span>size)   <span style="color:#75715e"># Output: 12</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Data type of the elements</span>
</span></span><span style="display:flex;"><span>print(financial_data<span style="color:#f92672">.</span>dtype)  <span style="color:#75715e"># Output: int64</span>
</span></span></code></pre></div><p>The <code>shape</code> attribute is particularly usefulâ€”it tells us we have 4 rows (quarters) and 3 columns (financial metrics).</p>
<h2 id="indexing-and-slicing-accessing-your-data">Indexing and Slicing: Accessing Your Data</h2>
<p>Getting to specific elements in your arrays is similar to Python lists, but with more power.</p>
<h3 id="basic-indexing">Basic Indexing</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using our financial_data array from above</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get Q1 revenue (first row, first column)</span>
</span></span><span style="display:flex;"><span>q1_revenue <span style="color:#f92672">=</span> financial_data[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(q1_revenue)  <span style="color:#75715e"># Output: 10500</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get Q3 profit (third row, third column)</span>
</span></span><span style="display:flex;"><span>q3_profit <span style="color:#f92672">=</span> financial_data[<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>print(q3_profit)   <span style="color:#75715e"># Output: 4300</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all expenses (second column)</span>
</span></span><span style="display:flex;"><span>all_expenses <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>print(all_expenses)  <span style="color:#75715e"># Output: [8200 9500 7800 10200]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get data for Q2 and Q3 (second and third rows)</span>
</span></span><span style="display:flex;"><span>mid_year_data <span style="color:#f92672">=</span> financial_data[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">3</span>, :]
</span></span><span style="display:flex;"><span>print(mid_year_data)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># [[15200  9500  5700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [12100  7800  4300]]</span>
</span></span></code></pre></div><h3 id="fancy-indexing">Fancy Indexing</h3>
<p>NumPy also lets you select elements that meet certain conditionsâ€”incredibly useful for financial analysis:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Find quarters where revenue exceeded 12000</span>
</span></span><span style="display:flex;"><span>high_revenue_mask <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">0</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">12000</span>
</span></span><span style="display:flex;"><span>print(high_revenue_mask)  <span style="color:#75715e"># Output: [False  True  True  True]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the financial data for those high-revenue quarters</span>
</span></span><span style="display:flex;"><span>high_revenue_quarters <span style="color:#f92672">=</span> financial_data[high_revenue_mask]
</span></span><span style="display:flex;"><span>print(high_revenue_quarters)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># [[15200  9500  5700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [12100  7800  4300]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [18900 10200  8700]]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find quarters where profit margin (profit/revenue) exceeded 30%</span>
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>profit_margin <span style="color:#f92672">=</span> profit <span style="color:#f92672">/</span> revenue
</span></span><span style="display:flex;"><span>print(profit_margin)  <span style="color:#75715e"># Output: [0.21904762 0.375      0.35537191 0.46031746]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>high_margin_quarters <span style="color:#f92672">=</span> financial_data[profit_margin <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0.3</span>]
</span></span><span style="display:flex;"><span>print(high_margin_quarters)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># [[15200  9500  5700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [12100  7800  4300]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [18900 10200  8700]]</span>
</span></span></code></pre></div><p>This ability to filter data based on conditions is one of NumPy&rsquo;s most powerful features for financial analysis.</p>
<h2 id="vectorized-operations-numpys-superpower">Vectorized Operations: NumPy&rsquo;s Superpower</h2>
<p>In traditional Python, if you want to perform calculations across arrays, you&rsquo;d need to write loops. NumPy eliminates this need with vectorized operationsâ€”allowing you to express calculations directly on entire arrays.</p>
<h3 id="element-wise-operations">Element-wise Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Revenue growth calculation for quarters</span>
</span></span><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>revenue_prev <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>roll(revenue, <span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># Shift values to calculate previous quarter</span>
</span></span><span style="display:flex;"><span>revenue_prev[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> revenue[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># Set first value (no previous quarter)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>revenue_growth <span style="color:#f92672">=</span> (revenue <span style="color:#f92672">-</span> revenue_prev) <span style="color:#f92672">/</span> revenue_prev <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>print(revenue_growth)  <span style="color:#75715e"># Output: [  0.          44.76190476 -20.39473684  56.19834711]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Apply 10% discount to all revenue figures</span>
</span></span><span style="display:flex;"><span>discounted_revenue <span style="color:#f92672">=</span> revenue <span style="color:#f92672">*</span> <span style="color:#ae81ff">0.9</span>
</span></span><span style="display:flex;"><span>print(discounted_revenue)  <span style="color:#75715e"># Output: [ 9450. 13680. 10890. 17010.]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add a 5% bonus to all profit figures</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>bonus_adjusted_profit <span style="color:#f92672">=</span> profit <span style="color:#f92672">*</span> <span style="color:#ae81ff">1.05</span>
</span></span><span style="display:flex;"><span>print(bonus_adjusted_profit)  <span style="color:#75715e"># Output: [2415.  5985.  4515.  9135.]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate profit margin for each quarter</span>
</span></span><span style="display:flex;"><span>profit_margin <span style="color:#f92672">=</span> profit <span style="color:#f92672">/</span> revenue <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>  <span style="color:#75715e"># as percentage</span>
</span></span><span style="display:flex;"><span>print(profit_margin)  <span style="color:#75715e"># Output: [21.9047619  37.5        35.53719008 46.03174603]</span>
</span></span></code></pre></div><h3 id="broadcasting">Broadcasting</h3>
<p>One of NumPy&rsquo;s most powerful features is broadcasting, which allows operations between arrays of different shapes. This is especially useful in finance for scenarios like applying different tax rates or calculating weighted averages.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Applying different tax rates to quarterly profits</span>
</span></span><span style="display:flex;"><span>tax_rates <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">0.21</span>, <span style="color:#ae81ff">0.22</span>, <span style="color:#ae81ff">0.21</span>, <span style="color:#ae81ff">0.20</span>])  <span style="color:#75715e"># Different rates each quarter</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>taxes_paid <span style="color:#f92672">=</span> profit <span style="color:#f92672">*</span> tax_rates
</span></span><span style="display:flex;"><span>after_tax_profit <span style="color:#f92672">=</span> profit <span style="color:#f92672">-</span> taxes_paid
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(taxes_paid)  <span style="color:#75715e"># Output: [ 483.  1254.  903.  1740.]</span>
</span></span><span style="display:flex;"><span>print(after_tax_profit)  <span style="color:#75715e"># Output: [1817.  4446.  3397.  6960.]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating a weighted average of financial metrics</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Giving more weight to recent quarters</span>
</span></span><span style="display:flex;"><span>weights <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.3</span>, <span style="color:#ae81ff">0.4</span>])  <span style="color:#75715e"># Weights sum to 1</span>
</span></span><span style="display:flex;"><span>weighted_revenue <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>sum(revenue <span style="color:#f92672">*</span> weights)
</span></span><span style="display:flex;"><span>print(weighted_revenue)  <span style="color:#75715e"># Output: 14970.0</span>
</span></span></code></pre></div><h2 id="statistical-methods-financial-analysis-made-easy">Statistical Methods: Financial Analysis Made Easy</h2>
<p>NumPy provides built-in methods for common statistical operations, which are invaluable for financial analysis:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>revenue <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> financial_data[:, <span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Basic statistics</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Average Quarterly Revenue: </span><span style="color:#e6db74">{</span>np<span style="color:#f92672">.</span>mean(revenue)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: 14175.0</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Annual Revenue: </span><span style="color:#e6db74">{</span>np<span style="color:#f92672">.</span>sum(revenue)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: 56700</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Lowest Quarterly Profit: </span><span style="color:#e6db74">{</span>np<span style="color:#f92672">.</span>min(profit)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: 2300</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Highest Quarterly Expenses: </span><span style="color:#e6db74">{</span>np<span style="color:#f92672">.</span>max(expenses)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: 10200</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Revenue Variance: </span><span style="color:#e6db74">{</span>np<span style="color:#f92672">.</span>var(revenue)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: 12577500.0</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Profit Standard Deviation: </span><span style="color:#e6db74">{</span>np<span style="color:#f92672">.</span>std(profit)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: 2326.53...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding best and worst performing quarters</span>
</span></span><span style="display:flex;"><span>best_quarter_idx <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>argmax(profit)
</span></span><span style="display:flex;"><span>worst_quarter_idx <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>argmin(profit)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Best Quarter: Q</span><span style="color:#e6db74">{</span>best_quarter_idx <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> with $</span><span style="color:#e6db74">{</span>profit[best_quarter_idx]<span style="color:#e6db74">}</span><span style="color:#e6db74"> profit&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: Best Quarter: Q4 with $8700 profit</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Worst Quarter: Q</span><span style="color:#e6db74">{</span>worst_quarter_idx <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> with $</span><span style="color:#e6db74">{</span>profit[worst_quarter_idx]<span style="color:#e6db74">}</span><span style="color:#e6db74"> profit&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: Worst Quarter: Q1 with $2300 profit</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Cumulative sums (running totals) - useful for YTD calculations</span>
</span></span><span style="display:flex;"><span>ytd_revenue <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>cumsum(revenue)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Revenue YTD: </span><span style="color:#e6db74">{</span>ytd_revenue<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Output: [10500 25700 37800 56700]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Moving averages (e.g., 2-quarter moving average)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">moving_average</span>(a, window_size):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> np<span style="color:#f92672">.</span>convolve(a, np<span style="color:#f92672">.</span>ones(window_size)<span style="color:#f92672">/</span>window_size, mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;valid&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>revenue_2q_avg <span style="color:#f92672">=</span> moving_average(revenue, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;2-Quarter Moving Average Revenue: </span><span style="color:#e6db74">{</span>revenue_2q_avg<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: [12850. 13650. 15500.]</span>
</span></span></code></pre></div><h2 id="performance-comparison-why-numpy-is-faster">Performance Comparison: Why NumPy is Faster</h2>
<p>To really appreciate NumPy, let&rsquo;s compare it with pure Python for a common financial calculation: computing the cumulative returns from a series of daily returns.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate sample daily returns (+/- 2%)</span>
</span></span><span style="display:flex;"><span>daily_returns_list <span style="color:#f92672">=</span> [random<span style="color:#f92672">.</span>uniform(<span style="color:#f92672">-</span><span style="color:#ae81ff">0.02</span>, <span style="color:#ae81ff">0.02</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10000</span>)]
</span></span><span style="display:flex;"><span>daily_returns_np <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(daily_returns_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pure Python approach</span>
</span></span><span style="display:flex;"><span>start_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>cumulative_return <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> daily_return <span style="color:#f92672">in</span> daily_returns_list:
</span></span><span style="display:flex;"><span>    cumulative_return <span style="color:#f92672">*=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> daily_return)
</span></span><span style="display:flex;"><span>final_value_python <span style="color:#f92672">=</span> cumulative_return
</span></span><span style="display:flex;"><span>python_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time() <span style="color:#f92672">-</span> start_time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># NumPy approach</span>
</span></span><span style="display:flex;"><span>start_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>final_value_numpy <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>prod(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> daily_returns_np)
</span></span><span style="display:flex;"><span>numpy_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time() <span style="color:#f92672">-</span> start_time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Pure Python result: </span><span style="color:#e6db74">{</span>final_value_python<span style="color:#e6db74">}</span><span style="color:#e6db74">, time: </span><span style="color:#e6db74">{</span>python_time<span style="color:#e6db74">:</span><span style="color:#e6db74">.6f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> seconds&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;NumPy result: </span><span style="color:#e6db74">{</span>final_value_numpy<span style="color:#e6db74">}</span><span style="color:#e6db74">, time: </span><span style="color:#e6db74">{</span>numpy_time<span style="color:#e6db74">:</span><span style="color:#e6db74">.6f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> seconds&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;NumPy is </span><span style="color:#e6db74">{</span>python_time<span style="color:#f92672">/</span>numpy_time<span style="color:#e6db74">:</span><span style="color:#e6db74">.1f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">x faster&#34;</span>)
</span></span></code></pre></div><p>On my machine, the NumPy version typically runs about 100x faster! This performance advantage becomes even more significant as your datasets grow, which is why NumPy is essential for serious financial analysis.</p>
<h2 id="finance-case-study-portfolio-analysis">Finance Case Study: Portfolio Analysis</h2>
<p>Let&rsquo;s put everything together in a simple portfolio analysis example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Portfolio stocks data (price at end of each quarter)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Rows: Quarters, Columns: Stocks (AAPL, MSFT, GOOGL, AMZN)</span>
</span></span><span style="display:flex;"><span>stock_prices <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">150.10</span>, <span style="color:#ae81ff">225.75</span>, <span style="color:#ae81ff">2720.30</span>, <span style="color:#ae81ff">3110.50</span>],  <span style="color:#75715e"># Q1 prices</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">168.30</span>, <span style="color:#ae81ff">265.90</span>, <span style="color:#ae81ff">2781.25</span>, <span style="color:#ae81ff">3450.75</span>],  <span style="color:#75715e"># Q2 prices</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">155.80</span>, <span style="color:#ae81ff">285.40</span>, <span style="color:#ae81ff">2950.60</span>, <span style="color:#ae81ff">3320.20</span>],  <span style="color:#75715e"># Q3 prices</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">182.40</span>, <span style="color:#ae81ff">305.65</span>, <span style="color:#ae81ff">3050.40</span>, <span style="color:#ae81ff">3680.35</span>]   <span style="color:#75715e"># Q4 prices</span>
</span></span><span style="display:flex;"><span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Initial portfolio allocation (number of shares)</span>
</span></span><span style="display:flex;"><span>holdings <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate portfolio value each quarter</span>
</span></span><span style="display:flex;"><span>portfolio_values <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>sum(stock_prices <span style="color:#f92672">*</span> holdings, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Portfolio value by quarter: </span><span style="color:#e6db74">{</span>portfolio_values<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: [9807.8  11207.15 11612.4  12687.05]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate quarterly returns</span>
</span></span><span style="display:flex;"><span>portfolio_returns <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>diff(portfolio_values) <span style="color:#f92672">/</span> portfolio_values[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Quarterly returns (%): </span><span style="color:#e6db74">{</span>portfolio_returns<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: [14.26731123  3.61594237  9.25456674]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate annualized return (geometric mean)</span>
</span></span><span style="display:flex;"><span>annual_return <span style="color:#f92672">=</span> (portfolio_values[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">/</span> portfolio_values[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">**</span> (<span style="color:#ae81ff">4</span><span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Annualized return: </span><span style="color:#e6db74">{</span>annual_return<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: Annualized return: 29.36%</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate volatility (standard deviation of returns)</span>
</span></span><span style="display:flex;"><span>volatility <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>std(portfolio_returns)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Return volatility: </span><span style="color:#e6db74">{</span>volatility<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: Return volatility: 5.33%</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate Sharpe ratio (assuming risk-free rate of 2%)</span>
</span></span><span style="display:flex;"><span>risk_free_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>  <span style="color:#75715e"># 2% annual</span>
</span></span><span style="display:flex;"><span>sharpe_ratio <span style="color:#f92672">=</span> (annual_return<span style="color:#f92672">*</span><span style="color:#ae81ff">100</span> <span style="color:#f92672">-</span> risk_free_rate) <span style="color:#f92672">/</span> volatility
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Sharpe ratio: </span><span style="color:#e6db74">{</span>sharpe_ratio<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output: Sharpe ratio: 5.13</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Analyze correlation between stocks</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate returns for each stock</span>
</span></span><span style="display:flex;"><span>stock_returns <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>diff(stock_prices, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>) <span style="color:#f92672">/</span> stock_prices[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate correlation matrix</span>
</span></span><span style="display:flex;"><span>corr_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>corrcoef(stock_returns<span style="color:#f92672">.</span>T)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Stock correlation matrix:&#34;</span>)
</span></span><span style="display:flex;"><span>print(corr_matrix)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># [[ 1.         -0.71294839 -0.99819453  0.77866361]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [-0.71294839  1.          0.75844502 -0.17973701]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [-0.99819453  0.75844502  1.         -0.80727807]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  [ 0.77866361 -0.17973701 -0.80727807  1.        ]]</span>
</span></span></code></pre></div><p>This example shows how NumPy makes it straightforward to perform complex financial analyses with just a few lines of code!</p>
<h2 id="key-takeaways">Key Takeaways</h2>
<p>NumPy transforms Python from a general-purpose language into a powerful numerical computing tool. For finance professionals, it offers:</p>
<ol>
<li><strong>Speed and efficiency</strong> for working with large datasets</li>
<li><strong>Intuitive syntax</strong> for numerical operations that maps well to financial calculations</li>
<li><strong>Built-in statistical functions</strong> that eliminate the need for custom implementations</li>
<li><strong>Vectorized operations</strong> that make mathematical formulas easier to express</li>
<li><strong>The foundation</strong> for more advanced financial analysis libraries like pandas</li>
</ol>
<h2 id="next-steps">Next Steps</h2>
<p>Now that you have a solid understanding of NumPy basics, you&rsquo;re ready to move on to pandas, which builds on NumPy to provide even more powerful data analysis capabilities specifically designed for tabular data like financial statements, price histories, and transaction records.</p>
<p>In our next post, we&rsquo;ll explore how pandas can make your financial data analysis workflow even more efficient and insightful.</p>
<h2 id="exercise-calculate-financial-metrics">Exercise: Calculate Financial Metrics</h2>
<p>Before you go, try this exercise to practice your NumPy skills:</p>
<p>Create an array with monthly sales data for a year, then:</p>
<ol>
<li>Calculate the average monthly sales</li>
<li>Find the highest and lowest sales months</li>
<li>Calculate the quarter-by-quarter growth rate</li>
<li>Determine if any month had sales 20% above the yearly average</li>
</ol>
<p>Good luck, and feel free to share your solutions in the comments!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my financial analysis toolkit. Follow along as we discover together how Python can transform our work in finance and accounting!</em></p>
]]></content:encoded></item><item><title>Part 10: The Python Ecosystem &amp; Interactive Data Workflows</title><link>https://michaelbrunger.com/python-ecosystem-interactive-data/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-ecosystem-interactive-data/</guid><description>Compare package managers (pip vs. conda), explore Anaconda Navigator, and learn to use Jupyter Notebooks for interactive data analysis and visualization.</description><content:encoded><![CDATA[<h1 id="the-python-ecosystem--interactive-data-workflows">The Python Ecosystem &amp; Interactive Data Workflows</h1>
<p>As a finance professional diving deeper into Python, I&rsquo;ve found that understanding the broader ecosystem of tools is just as important as learning the language itself. In this post, we&rsquo;ll explore the different ways to manage Python packages and environments, and dive into interactive data workflows that can transform how you work with financial data.</p>
<h2 id="package-vs-environment-managers-pip-conda-and-anaconda">Package vs. Environment Managers: pip, conda, and Anaconda</h2>
<p>When I first started with Python, I was confused by the different tools available for installing packages and managing environments. Let&rsquo;s clarify these concepts.</p>
<h3 id="pip-the-standard-package-manager">pip: The Standard Package Manager</h3>
<p><code>pip</code> is Python&rsquo;s default package manager - it&rsquo;s what we&rsquo;ve been using in previous posts. It comes bundled with Python and is straightforward for basic needs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Install a package with pip</span>
</span></span><span style="display:flex;"><span>pip install pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a specific version</span>
</span></span><span style="display:flex;"><span>pip install pandas<span style="color:#f92672">==</span>1.4.2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Upgrade a package</span>
</span></span><span style="display:flex;"><span>pip install --upgrade pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List installed packages</span>
</span></span><span style="display:flex;"><span>pip list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate a requirements file</span>
</span></span><span style="display:flex;"><span>pip freeze &gt; requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install from requirements file</span>
</span></span><span style="display:flex;"><span>pip install -r requirements.txt
</span></span></code></pre></div><p><strong>Pros of pip:</strong></p>
<ul>
<li>Simple and lightweight</li>
<li>Built-in with Python</li>
<li>Works with virtual environments (venv)</li>
<li>Perfect for most Python projects</li>
</ul>
<p><strong>Cons of pip:</strong></p>
<ul>
<li>Doesn&rsquo;t manage non-Python dependencies well</li>
<li>Can&rsquo;t create standalone environments (relies on venv)</li>
<li>Not ideal for complex data science setups with conflicting dependencies</li>
</ul>
<h3 id="conda-the-environment-and-package-manager">conda: The Environment and Package Manager</h3>
<p><code>conda</code> is both a package manager and an environment manager. Unlike pip, conda isn&rsquo;t specific to Python - it can manage packages for any language.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a new environment</span>
</span></span><span style="display:flex;"><span>conda create --name finance_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Activate the environment</span>
</span></span><span style="display:flex;"><span>conda activate finance_env
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a package</span>
</span></span><span style="display:flex;"><span>conda install pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install a package from a specific channel</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge plotly
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List installed packages</span>
</span></span><span style="display:flex;"><span>conda list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export environment</span>
</span></span><span style="display:flex;"><span>conda env export &gt; environment.yml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create environment from file</span>
</span></span><span style="display:flex;"><span>conda env create -f environment.yml
</span></span></code></pre></div><p><strong>Pros of conda:</strong></p>
<ul>
<li>Manages both Python and non-Python dependencies</li>
<li>Creates isolated environments</li>
<li>Better dependency resolution than pip</li>
<li>Great for data science packages with complex dependencies</li>
<li>Cross-platform compatibility</li>
</ul>
<p><strong>Cons of conda:</strong></p>
<ul>
<li>More complex than pip</li>
<li>Can be slower for simple installations</li>
<li>Larger footprint on your system</li>
</ul>
<h3 id="anaconda-the-all-in-one-distribution">Anaconda: The All-in-One Distribution</h3>
<p>Anaconda is a distribution of Python that comes bundled with conda and a collection of 250+ pre-installed data science packages. Think of it as the &ldquo;deluxe edition&rdquo; of Python.</p>
<p><strong>Pros of Anaconda:</strong></p>
<ul>
<li>Everything installed in one go</li>
<li>Includes widely-used data science packages</li>
<li>Comes with Anaconda Navigator (GUI)</li>
<li>Includes many finance-relevant packages pre-installed</li>
<li>Great for beginners who want everything set up</li>
</ul>
<p><strong>Cons of Anaconda:</strong></p>
<ul>
<li>Very large download (several GB)</li>
<li>Takes up a lot of disk space</li>
<li>Includes many packages you might never use</li>
<li>Can be overkill for simple projects</li>
</ul>
<h3 id="miniconda-the-lightweight-alternative">Miniconda: The Lightweight Alternative</h3>
<p>If you like conda but don&rsquo;t want all the extra packages, Miniconda gives you just Python and conda. You can then install only what you need.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Install specific packages as needed</span>
</span></span><span style="display:flex;"><span>conda create --name finance_env python<span style="color:#f92672">=</span>3.10 pandas numpy matplotlib
</span></span></code></pre></div><h3 id="when-to-choose-each-option">When to Choose Each Option</h3>
<p>Here&rsquo;s a simple decision matrix I use:</p>
<ul>
<li>
<p><strong>Use pip + venv when:</strong></p>
<ul>
<li>You&rsquo;re building a standard Python application</li>
<li>Your project has simple dependencies</li>
<li>You&rsquo;re developing a package for others to use</li>
<li>You&rsquo;re following my previous posts where we used venv</li>
<li>You want to keep things lightweight</li>
</ul>
</li>
<li>
<p><strong>Use conda when:</strong></p>
<ul>
<li>You need complex scientific packages (NumPy, SciPy, etc.)</li>
<li>You work with packages that have non-Python dependencies</li>
<li>You switch between different projects with conflicting dependencies</li>
<li>You need consistent environments across different operating systems</li>
</ul>
</li>
<li>
<p><strong>Use Anaconda when:</strong></p>
<ul>
<li>You&rsquo;re just getting started with data science</li>
<li>You want a hassle-free setup with all major packages included</li>
<li>You prefer using a GUI (Anaconda Navigator)</li>
<li>Disk space isn&rsquo;t a concern</li>
<li>You&rsquo;re setting up a training environment</li>
</ul>
</li>
</ul>
<p>For my financial analysis work, I primarily use conda environments because many financial modeling packages have complex dependencies, and I often need to switch between different project environments.</p>
<h2 id="installing-and-exploring-anaconda-navigator">Installing and Exploring Anaconda Navigator</h2>
<p>Let&rsquo;s explore Anaconda Navigator, which provides a graphical interface to manage environments and packages.</p>
<h3 id="installation">Installation</h3>
<ol>
<li>Download Anaconda from <a href="https://www.anaconda.com/products/distribution">the official site</a></li>
<li>Run the installer:
<ul>
<li>Windows: Double-click the <code>.exe</code> file and follow the wizard</li>
<li>macOS: Double-click the <code>.pkg</code> file and follow the prompts</li>
<li>Linux: Run <code>bash Anaconda-latest-Linux-x86_64.sh</code> in terminal</li>
</ul>
</li>
</ol>
<p>During installation:</p>
<ul>
<li>Install for &ldquo;Just Me&rdquo; (recommended)</li>
<li>Accept the default location (or choose another)</li>
<li><strong>Important choice</strong>: Whether to add Anaconda to your PATH environment variable
<ul>
<li>I recommend selecting &ldquo;Yes&rdquo; for convenience, though the installer suggests &ldquo;No&rdquo;</li>
</ul>
</li>
</ul>
<h3 id="launching-anaconda-navigator">Launching Anaconda Navigator</h3>
<ul>
<li>Windows: Start menu â†’ Anaconda3 â†’ Anaconda Navigator</li>
<li>macOS: Launchpad â†’ Anaconda Navigator</li>
<li>Linux: Terminal â†’ <code>anaconda-navigator</code></li>
</ul>
<h3 id="navigator-interface-overview">Navigator Interface Overview</h3>
<p>When you open Navigator, you&rsquo;ll see a dashboard with various applications and tools:</p>
<p><img alt="Anaconda Navigator Interface" loading="lazy" src="https://via.placeholder.com/800x450"></p>
<p>The main sections include:</p>
<ol>
<li><strong>Home</strong>: Launch applications like Jupyter Notebook, JupyterLab, etc.</li>
<li><strong>Environments</strong>: Create and manage conda environments</li>
<li><strong>Learning</strong>: Educational resources (tutorials, documentation)</li>
<li><strong>Community</strong>: Forums, bug reports, feature requests</li>
</ol>
<h3 id="creating-an-environment-for-financial-analysis">Creating an Environment for Financial Analysis</h3>
<p>Let&rsquo;s create a dedicated environment for financial analysis:</p>
<ol>
<li>Click on &ldquo;Environments&rdquo; in the left sidebar</li>
<li>Click the &ldquo;Create&rdquo; button at the bottom</li>
<li>Name it &ldquo;finance&rdquo; and select Python 3.9</li>
<li>Click &ldquo;Create&rdquo;</li>
<li>With your new environment selected, switch to &ldquo;Installed&rdquo; packages</li>
<li>Use the search box to find and install essential financial packages:
<ul>
<li>pandas</li>
<li>numpy</li>
<li>matplotlib</li>
<li>pandas-datareader</li>
<li>yfinance</li>
<li>scipy</li>
<li>statsmodels</li>
<li>scikit-learn</li>
</ul>
</li>
</ol>
<p>After selecting the packages, click &ldquo;Apply&rdquo; to install them in your environment.</p>
<h3 id="using-navigator-to-launch-applications">Using Navigator to Launch Applications</h3>
<p>Now that we have our environment set up:</p>
<ol>
<li>Go back to the &ldquo;Home&rdquo; tab</li>
<li>Make sure your &ldquo;finance&rdquo; environment is selected in the dropdown</li>
<li>Click &ldquo;Launch&rdquo; under Jupyter Notebook</li>
</ol>
<p>This will start Jupyter Notebook with access to all the packages we installed in our finance environment.</p>
<h2 id="jupyter-notebooks-interactive-financial-data-analysis">Jupyter Notebooks: Interactive Financial Data Analysis</h2>
<p>Jupyter Notebooks are interactive documents that combine code, outputs, visualizations, and explanatory text. They&rsquo;re perfect for financial analysis where you want to document your thought process alongside your calculations.</p>
<h3 id="installing-jupyter">Installing Jupyter</h3>
<p>If you&rsquo;re using Anaconda, Jupyter is already installed. Otherwise, you can install it with pip:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Using pip in a virtual environment</span>
</span></span><span style="display:flex;"><span>pip install notebook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using conda</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge notebook
</span></span></code></pre></div><h3 id="launching-jupyter-notebook">Launching Jupyter Notebook</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># From the command line</span>
</span></span><span style="display:flex;"><span>jupyter notebook
</span></span></code></pre></div><p>This will open a browser window showing the Jupyter dashboard.</p>
<h3 id="notebook-anatomy">Notebook Anatomy</h3>
<p>A Jupyter Notebook (<code>.ipynb</code> file) consists of cells, which can be:</p>
<ol>
<li><strong>Code cells</strong>: Contain executable Python code</li>
<li><strong>Markdown cells</strong>: Contain formatted text, equations, and explanations</li>
<li><strong>Raw cells</strong>: Contain unformatted text</li>
</ol>
<p>Let&rsquo;s create a simple notebook to analyze stock returns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># In a code cell</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> yfinance <span style="color:#66d9ef">as</span> yf
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set the output to display inline</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make the plots look nicer</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#39;fivethirtyeight&#39;</span>)
</span></span></code></pre></div><p>In a new code cell, let&rsquo;s download some financial data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Define a list of tech stocks</span>
</span></span><span style="display:flex;"><span>tech_stocks <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;AAPL&#39;</span>, <span style="color:#e6db74">&#39;MSFT&#39;</span>, <span style="color:#e6db74">&#39;GOOG&#39;</span>, <span style="color:#e6db74">&#39;AMZN&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set date range for analysis</span>
</span></span><span style="display:flex;"><span>start_date <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;2020-01-01&#39;</span>
</span></span><span style="display:flex;"><span>end_date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Download the data</span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> yf<span style="color:#f92672">.</span>download(tech_stocks, start<span style="color:#f92672">=</span>start_date, end<span style="color:#f92672">=</span>end_date)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Display the first few rows of Adjusted Close prices</span>
</span></span><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>Now let&rsquo;s add a Markdown cell to explain what we&rsquo;re doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span><span style="color:#75715e">## Tech Stock Performance Analysis
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>This analysis examines the performance of major tech stocks since 2020, including:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Apple (AAPL)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Microsoft (MSFT)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Google (GOOG)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">-</span> Amazon (AMZN)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>We&#39;ll calculate returns and volatility to assess risk-adjusted performance.
</span></span></code></pre></div><p>Next, let&rsquo;s calculate returns and create a visualization:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate daily returns</span>
</span></span><span style="display:flex;"><span>returns <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Adj Close&#39;</span>]<span style="color:#f92672">.</span>pct_change()<span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot the cumulative returns</span>
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> returns)<span style="color:#f92672">.</span>cumprod()<span style="color:#f92672">.</span>plot(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Cumulative Returns of Tech Stocks (2020-Present)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Cumulative Return&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axhline(y<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.3</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>We can also calculate risk metrics:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate annualized volatility (standard deviation of returns * sqrt(252 trading days))</span>
</span></span><span style="display:flex;"><span>volatility <span style="color:#f92672">=</span> returns<span style="color:#f92672">.</span>std() <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>sqrt(<span style="color:#ae81ff">252</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate annualized returns</span>
</span></span><span style="display:flex;"><span>ann_returns <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> returns<span style="color:#f92672">.</span>mean())<span style="color:#f92672">**</span><span style="color:#ae81ff">252</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a risk-return DataFrame</span>
</span></span><span style="display:flex;"><span>risk_return <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Annualized Return&#39;</span>: ann_returns,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Annualized Volatility&#39;</span>: volatility,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Sharpe Ratio&#39;</span>: ann_returns <span style="color:#f92672">/</span> volatility  <span style="color:#75715e"># Simplified Sharpe ratio (assuming 0% risk-free rate)</span>
</span></span><span style="display:flex;"><span>})<span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;Sharpe Ratio&#39;</span>, ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>risk_return
</span></span></code></pre></div><h3 id="notebook-features-that-enhance-financial-analysis">Notebook Features That Enhance Financial Analysis</h3>
<h4 id="magic-commands">Magic Commands</h4>
<p>Jupyter notebooks support &ldquo;magic commands&rdquo; that enhance functionality:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Display all variables in memory</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>who
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Time the execution of a cell</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> [i<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1000000</span>)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run external shell commands</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!</span>pip list <span style="color:#f92672">|</span> grep pandas
</span></span></code></pre></div><h4 id="rich-display-for-financial-data">Rich Display for Financial Data</h4>
<p>Jupyter can display HTML, charts, tables, and even interactive visualizations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Interactive stock chart using Plotly</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.express <span style="color:#66d9ef">as</span> px
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fig <span style="color:#f92672">=</span> px<span style="color:#f92672">.</span>line(
</span></span><span style="display:flex;"><span>    returns<span style="color:#f92672">.</span>reset_index(), 
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Date&#39;</span>, 
</span></span><span style="display:flex;"><span>    y<span style="color:#f92672">=</span>tech_stocks,
</span></span><span style="display:flex;"><span>    title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Daily Returns of Tech Stocks&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>fig<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><h4 id="widgets-for-interactive-financial-models">Widgets for Interactive Financial Models</h4>
<p>Jupyter supports interactive widgets that let you build dynamic financial models:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> ipywidgets <span style="color:#f92672">import</span> interact, FloatSlider
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_loan_payment</span>(principal<span style="color:#f92672">=</span><span style="color:#ae81ff">100000</span>, interest_rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>, years<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate monthly mortgage payment.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    monthly_rate <span style="color:#f92672">=</span> interest_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    payments <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (monthly_rate <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate)<span style="color:#f92672">**</span>payments) <span style="color:#f92672">/</span> ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate)<span style="color:#f92672">**</span>payments <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly payment: $</span><span style="color:#e6db74">{</span>payment<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>interact(
</span></span><span style="display:flex;"><span>    calculate_loan_payment,
</span></span><span style="display:flex;"><span>    principal<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">50000</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">1000000</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">250000</span>),
</span></span><span style="display:flex;"><span>    interest_rate<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">0.10</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0025</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">0.045</span>),
</span></span><span style="display:flex;"><span>    years<span style="color:#f92672">=</span>FloatSlider(min<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, max<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, value<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h3 id="sharing-and-exporting-notebooks">Sharing and Exporting Notebooks</h3>
<p>Once you&rsquo;ve completed your analysis, you can:</p>
<ol>
<li><strong>Share the <code>.ipynb</code> file</strong> with colleagues who have Jupyter installed</li>
<li><strong>Export to various formats</strong>:
<ul>
<li>HTML (with interactive elements)</li>
<li>PDF (for formal reports)</li>
<li>Python script (.py)</li>
<li>Markdown</li>
<li>Slides (for presentations)</li>
</ul>
</li>
</ol>
<p>To export:</p>
<ul>
<li>File â†’ Download as â†’ Select format</li>
<li>Or from the command line: <code>jupyter nbconvert --to pdf my_notebook.ipynb</code></li>
</ul>
<h3 id="using-notebooks-for-financial-reporting">Using Notebooks for Financial Reporting</h3>
<p>Notebooks are excellent for creating reproducible financial reports:</p>
<ol>
<li>Start with a markdown cell describing the purpose of the analysis</li>
<li>Import data from your financial systems</li>
<li>Perform calculations and create visualizations</li>
<li>Add markdown cells explaining your methodology and findings</li>
<li>Export to PDF or HTML for distribution</li>
</ol>
<p>For example, here&rsquo;s how you might start a monthly financial performance report:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span># Monthly Financial Performance Report
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Period: April 2023
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>This notebook analyzes the company&#39;s financial performance for April 2023 compared to budget and previous periods. It includes:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">1.</span> Revenue analysis by product line
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">2.</span> Cost structure breakdown
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">3.</span> Margin analysis
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">4.</span> Cash flow metrics
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">5.</span> Financial ratios
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Data sources:**</span> GL extract as of May 3, 2023
</span></span></code></pre></div><h2 id="jupyterlab-the-next-generation-notebook-interface">JupyterLab: The Next-Generation Notebook Interface</h2>
<p>While Jupyter Notebook is fantastic, JupyterLab is its more powerful successor with a modern interface.</p>
<h3 id="installing-jupyterlab">Installing JupyterLab</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Using pip</span>
</span></span><span style="display:flex;"><span>pip install jupyterlab
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using conda</span>
</span></span><span style="display:flex;"><span>conda install -c conda-forge jupyterlab
</span></span></code></pre></div><p>If you&rsquo;re using Anaconda, JupyterLab is already installed.</p>
<h3 id="launching-jupyterlab">Launching JupyterLab</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># From the command line</span>
</span></span><span style="display:flex;"><span>jupyter lab
</span></span></code></pre></div><h3 id="jupyterlab-features-for-financial-analysis">JupyterLab Features for Financial Analysis</h3>
<p>JupyterLab enhances the notebook experience with:</p>
<ol>
<li><strong>Multiple panels</strong>: View multiple notebooks, terminals, and files side-by-side</li>
<li><strong>File browser</strong>: Navigate your project files without leaving the interface</li>
<li><strong>Integrated terminal</strong>: Run shell commands directly in JupyterLab</li>
<li><strong>Table of Contents</strong>: Navigate long financial reports easily</li>
<li><strong>Extensions</strong>: Add functionality like Git integration, variable inspectors, etc.</li>
</ol>
<p>This layout is particularly useful for financial analysis where you might want to:</p>
<ul>
<li>Compare multiple financial models side-by-side</li>
<li>Keep reference data open while working on calculations</li>
<li>Run terminal commands to fetch latest financial data</li>
<li>Browse through different financial statements</li>
</ul>
<h2 id="google-colab-cloud-based-notebooks">Google Colab: Cloud-Based Notebooks</h2>
<p>If you want to work on notebooks without installing anything, Google Colab is a free, cloud-based alternative:</p>
<ul>
<li>Runs entirely in the browser</li>
<li>Provides free access to GPUs and TPUs for machine learning</li>
<li>Integrates with Google Drive for storage</li>
<li>Includes many pre-installed data science packages</li>
</ul>
<p>It&rsquo;s perfect for:</p>
<ul>
<li>Working on financial analysis when you&rsquo;re away from your main computer</li>
<li>Sharing interactive financial models with colleagues who don&rsquo;t have Python installed</li>
<li>Experimenting with machine learning for financial predictions</li>
</ul>
<p>Visit <a href="https://colab.research.google.com/">Google Colab</a> to get started.</p>
<h2 id="practical-example-building-an-interactive-financial-dashboard">Practical Example: Building an Interactive Financial Dashboard</h2>
<p>Let&rsquo;s bring everything together with a practical example. Here&rsquo;s an outline for creating an interactive financial dashboard in a Jupyter notebook:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.express <span style="color:#66d9ef">as</span> px
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> plotly.graph_objects <span style="color:#66d9ef">as</span> go
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ipywidgets <span style="color:#f92672">import</span> interact, widgets
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime, timedelta
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sample financial data (in practice, you&#39;d import from your financial systems)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_financial_data</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Generate dates for the past 12 months</span>
</span></span><span style="display:flex;"><span>    end_date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>    start_date <span style="color:#f92672">=</span> end_date <span style="color:#f92672">-</span> timedelta(days<span style="color:#f92672">=</span><span style="color:#ae81ff">365</span>)
</span></span><span style="display:flex;"><span>    dates <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>date_range(start<span style="color:#f92672">=</span>start_date, end<span style="color:#f92672">=</span>end_date, freq<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;M&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create sample department data with some randomness</span>
</span></span><span style="display:flex;"><span>    np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">42</span>)  <span style="color:#75715e"># For reproducibility</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Date&#39;</span>: dates,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Revenue&#39;</span>: <span style="color:#ae81ff">1000000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">50000</span>, len(dates)) <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">200000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;COGS&#39;</span>: <span style="color:#ae81ff">600000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30000</span>, len(dates)) <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Marketing&#39;</span>: <span style="color:#ae81ff">50000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">5000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;R&amp;D&#39;</span>: <span style="color:#ae81ff">75000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7500</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;Admin&#39;</span>: <span style="color:#ae81ff">100000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10000</span>, len(dates)),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;IT&#39;</span>: <span style="color:#ae81ff">40000</span> <span style="color:#f92672">+</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>normal(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">4000</span>, len(dates))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(data)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate derived metrics</span>
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;COGS&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Marketing&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;R&amp;D&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;Admin&#39;</span>] <span style="color:#f92672">+</span> df[<span style="color:#e6db74">&#39;IT&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Gross_Margin&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>] <span style="color:#f92672">/</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>]
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;Operating_Margin&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>] <span style="color:#f92672">/</span> df[<span style="color:#e6db74">&#39;Revenue&#39;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate our sample data</span>
</span></span><span style="display:flex;"><span>financial_data <span style="color:#f92672">=</span> generate_financial_data()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Display first few rows</span>
</span></span><span style="display:flex;"><span>financial_data<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>Now let&rsquo;s create interactive visualizations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a function for our dashboard</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">financial_dashboard</span>(metric):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>:
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Revenue&#39;</span>],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;COGS&#39;</span>] <span style="color:#f92672">+</span> financial_data[<span style="color:#e6db74">&#39;Total_Expenses&#39;</span>],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Total Costs&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue vs. Total Costs&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Amount ($)&#39;</span>,
</span></span><span style="display:flex;"><span>            barmode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;group&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Profit Margins&#39;</span>:
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Scatter(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Gross_Margin&#39;</span>],
</span></span><span style="display:flex;"><span>            mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;lines+markers&#39;</span>,
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Gross Margin&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Scatter(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Date&#39;</span>],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>financial_data[<span style="color:#e6db74">&#39;Operating_Margin&#39;</span>],
</span></span><span style="display:flex;"><span>            mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;lines+markers&#39;</span>,
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Operating Margin&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Profit Margins Over Time&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Margin (%)&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis<span style="color:#f92672">=</span>dict(tickformat<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.0%&#39;</span>)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Expense Breakdown&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a pie chart of the latest month&#39;s expenses</span>
</span></span><span style="display:flex;"><span>        latest <span style="color:#f92672">=</span> financial_data<span style="color:#f92672">.</span>iloc[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        labels <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;COGS&#39;</span>, <span style="color:#e6db74">&#39;Marketing&#39;</span>, <span style="color:#e6db74">&#39;R&amp;D&#39;</span>, <span style="color:#e6db74">&#39;Admin&#39;</span>, <span style="color:#e6db74">&#39;IT&#39;</span>]
</span></span><span style="display:flex;"><span>        values <span style="color:#f92672">=</span> [latest[<span style="color:#e6db74">&#39;COGS&#39;</span>], latest[<span style="color:#e6db74">&#39;Marketing&#39;</span>], latest[<span style="color:#e6db74">&#39;R&amp;D&#39;</span>], latest[<span style="color:#e6db74">&#39;Admin&#39;</span>], latest[<span style="color:#e6db74">&#39;IT&#39;</span>]]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure(data<span style="color:#f92672">=</span>[go<span style="color:#f92672">.</span>Pie(
</span></span><span style="display:flex;"><span>            labels<span style="color:#f92672">=</span>labels,
</span></span><span style="display:flex;"><span>            values<span style="color:#f92672">=</span>values,
</span></span><span style="display:flex;"><span>            hole<span style="color:#f92672">=</span><span style="color:#ae81ff">.3</span>
</span></span><span style="display:flex;"><span>        )])
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(title<span style="color:#f92672">=</span><span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Expense Breakdown (Latest Month: </span><span style="color:#e6db74">{</span>latest[<span style="color:#e6db74">&#34;Date&#34;</span>]<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%b %Y&#34;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> metric <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Trend Analysis&#39;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Month-over-month growth rates</span>
</span></span><span style="display:flex;"><span>        growth_data <span style="color:#f92672">=</span> financial_data<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Revenue_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Revenue&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Gross_Profit_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Gross_Profit&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        growth_data[<span style="color:#e6db74">&#39;Operating_Income_Growth&#39;</span>] <span style="color:#f92672">=</span> financial_data[<span style="color:#e6db74">&#39;Operating_Income&#39;</span>]<span style="color:#f92672">.</span>pct_change() <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        fig <span style="color:#f92672">=</span> go<span style="color:#f92672">.</span>Figure()
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Date&#39;</span>][<span style="color:#ae81ff">1</span>:],  <span style="color:#75715e"># Skip first month (no growth rate)</span>
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Revenue_Growth&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue Growth&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>add_trace(go<span style="color:#f92672">.</span>Bar(
</span></span><span style="display:flex;"><span>            x<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Date&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">=</span>growth_data[<span style="color:#e6db74">&#39;Operating_Income_Growth&#39;</span>][<span style="color:#ae81ff">1</span>:],
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Operating Income Growth&#39;</span>
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>        fig<span style="color:#f92672">.</span>update_layout(
</span></span><span style="display:flex;"><span>            title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month-over-Month Growth Rates&#39;</span>,
</span></span><span style="display:flex;"><span>            xaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month&#39;</span>,
</span></span><span style="display:flex;"><span>            yaxis_title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Growth Rate (%)&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    fig<span style="color:#f92672">.</span>show()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an interactive widget</span>
</span></span><span style="display:flex;"><span>interact(
</span></span><span style="display:flex;"><span>    financial_dashboard,
</span></span><span style="display:flex;"><span>    metric<span style="color:#f92672">=</span>widgets<span style="color:#f92672">.</span>Dropdown(
</span></span><span style="display:flex;"><span>        options<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>, <span style="color:#e6db74">&#39;Profit Margins&#39;</span>, <span style="color:#e6db74">&#39;Expense Breakdown&#39;</span>, <span style="color:#e6db74">&#39;Trend Analysis&#39;</span>],
</span></span><span style="display:flex;"><span>        value<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Revenue vs Expenses&#39;</span>,
</span></span><span style="display:flex;"><span>        description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Metric:&#39;</span>,
</span></span><span style="display:flex;"><span>        style<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;description_width&#39;</span>: <span style="color:#e6db74">&#39;initial&#39;</span>}
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>This interactive dashboard allows you to explore different financial metrics with a dropdown menu. In a real-world scenario, you would connect this to your actual financial data sources.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The Python ecosystem offers a rich set of tools for financial analysis, from package managers to interactive notebooks. Let&rsquo;s recap what we&rsquo;ve covered:</p>
<ol>
<li>
<p><strong>Package and environment management</strong>: pip, conda, and Anaconda each have their place in the Python ecosystem, with conda being particularly valuable for complex financial analysis packages.</p>
</li>
<li>
<p><strong>Anaconda Navigator</strong>: Provides a user-friendly interface for managing environments and launching applications, making it easier to set up environments for different financial analysis tasks.</p>
</li>
<li>
<p><strong>Jupyter Notebooks</strong>: Offer an interactive way to combine code, data, and narrative, perfect for financial reporting and exploratory analysis.</p>
</li>
<li>
<p><strong>JupyterLab</strong>: Enhances the notebook experience with a multi-panel interface ideal for complex financial analysis workflows.</p>
</li>
<li>
<p><strong>Interactive widgets</strong>: Allow you to build dynamic financial models and dashboards without web development knowledge.</p>
</li>
</ol>
<p>As you continue your Python journey, these tools will become essential parts of your financial analysis toolkit. They enable a more interactive, exploratory approach to financial data analysis that traditional spreadsheets simply can&rsquo;t match.</p>
<h2 id="next-steps">Next Steps</h2>
<ul>
<li>Install Anaconda and create a dedicated environment for financial analysis</li>
<li>Convert an existing financial spreadsheet to a Jupyter notebook</li>
<li>Create an interactive dashboard for a key financial metric you track</li>
<li>Explore the extensive ecosystem of financial packages available in Python</li>
</ul>
<p>In the next post, we&rsquo;ll dive deeper into NumPy, the foundation for numerical computing in Python, and see how it can speed up your financial calculations.</p>
]]></content:encoded></item><item><title>Part 9: Command-Line Tools &amp; Automation with Python</title><link>https://michaelbrunger.com/python-command-line-automation/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-command-line-automation/</guid><description>Build command-line interfaces with argparse, create installable CLI tools, automate file operations, control GUI applications, and develop practical automation projects.</description><content:encoded><![CDATA[<h1 id="command-line-tools--automation-in-python">Command-Line Tools &amp; Automation in Python</h1>
<p>As a finance professional learning to code, I&rsquo;ve discovered that some of the most practical Python applications aren&rsquo;t fancy data visualizations or machine learning models, but rather simple automation scripts that save time on repetitive tasks. In this post, I&rsquo;ll walk through how to build command-line tools and automate everyday processes using Python.</p>
<h2 id="building-command-line-scripts-with-argparse">Building Command-Line Scripts with argparse</h2>
<p>When you&rsquo;re working with financial data, you often need flexible tools that can handle different inputs. The <code>argparse</code> module lets you build command-line scripts that accept various arguments and options.</p>
<h3 id="basic-argparse-structure">Basic argparse Structure</h3>
<p>First, let&rsquo;s create a simple script that calculates compound interest:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> argparse
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_compound_interest</span>(principal, rate, time, compounds_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate compound interest.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        principal: Initial investment amount
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        rate: Annual interest rate (decimal)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        time: Time in years
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        compounds_per_year: Number of times interest compounds per year
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Final amount after compound interest
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> principal <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> rate<span style="color:#f92672">/</span>compounds_per_year)<span style="color:#f92672">**</span>(compounds_per_year<span style="color:#f92672">*</span>time)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create argument parser</span>
</span></span><span style="display:flex;"><span>    parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Calculate compound interest&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add arguments</span>
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;principal&#39;</span>, type<span style="color:#f92672">=</span>float, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Initial investment amount&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;rate&#39;</span>, type<span style="color:#f92672">=</span>float, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Annual interest rate (decimal)&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;time&#39;</span>, type<span style="color:#f92672">=</span>float, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Time in years&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--compounds&#39;</span>, type<span style="color:#f92672">=</span>int, default<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, 
</span></span><span style="display:flex;"><span>                        help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Number of times interest compounds per year (default: 1)&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Parse arguments</span>
</span></span><span style="display:flex;"><span>    args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate result</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> calculate_compound_interest(
</span></span><span style="display:flex;"><span>        args<span style="color:#f92672">.</span>principal, 
</span></span><span style="display:flex;"><span>        args<span style="color:#f92672">.</span>rate, 
</span></span><span style="display:flex;"><span>        args<span style="color:#f92672">.</span>time, 
</span></span><span style="display:flex;"><span>        args<span style="color:#f92672">.</span>compounds
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Print result</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Initial principal: $</span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>principal<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Annual rate: </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>rate<span style="color:#e6db74">:</span><span style="color:#e6db74">.2%</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Time: </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>time<span style="color:#e6db74">}</span><span style="color:#e6db74"> years&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Compounds per year: </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>compounds<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Final amount: $</span><span style="color:#e6db74">{</span>result<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Interest earned: $</span><span style="color:#e6db74">{</span>result <span style="color:#f92672">-</span> args<span style="color:#f92672">.</span>principal<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Save this script as <code>compound_interest.py</code> and run it from the command line:</p>
<pre tabindex="0"><code>python compound_interest.py 10000 0.05 5 --compounds 12
</code></pre><p>This would calculate the compound interest on $10,000 at 5% annual interest for 5 years, compounded monthly.</p>
<h3 id="understanding-argparse-components">Understanding argparse Components</h3>
<p>Let&rsquo;s break down what&rsquo;s happening in our script:</p>
<ol>
<li>We create an <code>ArgumentParser</code> object with a description</li>
<li>We add arguments with <code>add_argument()</code>:
<ul>
<li>Positional arguments (<code>principal</code>, <code>rate</code>, <code>time</code>) are required</li>
<li>Optional arguments (like <code>--compounds</code>) start with <code>--</code> and have default values</li>
</ul>
</li>
<li>We parse the command-line arguments with <code>parse_args()</code></li>
<li>We access the values via <code>args.parameter_name</code></li>
</ol>
<h3 id="adding-help-text">Adding Help Text</h3>
<p>One of the best features of <code>argparse</code> is automatic help text generation. Users can run your script with <code>-h</code> or <code>--help</code> to see instructions:</p>
<pre tabindex="0"><code>python compound_interest.py --help
</code></pre><p>Which produces:</p>
<pre tabindex="0"><code>usage: compound_interest.py [-h] [--compounds COMPOUNDS] principal rate time

Calculate compound interest

positional arguments:
  principal             Initial investment amount
  rate                  Annual interest rate (decimal)
  time                  Time in years

optional arguments:
  -h, --help            show this help message and exit
  --compounds COMPOUNDS Number of times interest compounds per year (default: 1)
</code></pre><h3 id="more-argparse-features">More argparse Features</h3>
<p>For financial applications, you might want to add more sophisticated options:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--currency&#39;</span>, default<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;$&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Currency symbol to display&#39;</span>)
</span></span><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--output-file&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Save results to a file&#39;</span>)
</span></span><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--verbose&#39;</span>, <span style="color:#e6db74">&#39;-v&#39;</span>, action<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;store_true&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Display additional information&#39;</span>)
</span></span></code></pre></div><p>The <code>action='store_true'</code> creates a flag that&rsquo;s either True or False depending on whether it&rsquo;s included.</p>
<h2 id="packaging-entry-points-for-installable-commands">Packaging Entry Points for Installable Commands</h2>
<p>If you find yourself using the same script frequently, you can package it so it&rsquo;s available as a system-wide command.</p>
<h3 id="creating-a-package-structure">Creating a Package Structure</h3>
<p>First, organize your files like this:</p>
<pre tabindex="0"><code>finance_tools/
â”œâ”€â”€ finance_tools/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ compound_interest.py
â”‚   â””â”€â”€ other_modules.py
â”œâ”€â”€ README.md
â””â”€â”€ pyproject.toml
</code></pre><h3 id="setting-up-pyprojecttoml">Setting Up pyproject.toml</h3>
<p>Create a <code>pyproject.toml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">build-system</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires</span> = [<span style="color:#e6db74">&#34;setuptools&gt;=42&#34;</span>, <span style="color:#e6db74">&#34;wheel&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build-backend</span> = <span style="color:#e6db74">&#34;setuptools.build_meta&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;finance_tools&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">version</span> = <span style="color:#e6db74">&#34;0.1.0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">description</span> = <span style="color:#e6db74">&#34;Financial calculation tools&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">readme</span> = <span style="color:#e6db74">&#34;README.md&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">authors</span> = [{<span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Your Name&#34;</span>, <span style="color:#a6e22e">email</span> = <span style="color:#e6db74">&#34;your.email@example.com&#34;</span>}]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">license</span> = {<span style="color:#a6e22e">text</span> = <span style="color:#e6db74">&#34;MIT&#34;</span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires-python</span> = <span style="color:#e6db74">&#34;&gt;=3.6&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>.<span style="color:#a6e22e">scripts</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">compound-interest</span> = <span style="color:#e6db74">&#34;finance_tools.compound_interest:main&#34;</span>
</span></span></code></pre></div><p>The <code>[project.scripts]</code> section is what creates the entry point. After installing this package, you&rsquo;ll be able to run <code>compound-interest</code> directly from your command line without typing <code>python</code> first.</p>
<h3 id="installing-your-package">Installing Your Package</h3>
<p>Install your package in development mode:</p>
<pre tabindex="0"><code>pip install -e .
</code></pre><p>Now you can run:</p>
<pre tabindex="0"><code>compound-interest 10000 0.05 5 --compounds 12
</code></pre><h2 id="automating-file-and-folder-tasks">Automating File and Folder Tasks</h2>
<p>As a finance professional, you probably deal with lots of reports, spreadsheets, and data files. Python can help automate file handling tasks.</p>
<h3 id="basic-file-operations-with-os-and-shutil">Basic File Operations with os and shutil</h3>
<p>Here&rsquo;s a script that organizes financial statements by month and type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> shutil
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> argparse
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">organize_financial_statements</span>(source_dir, target_dir):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Organize financial statements into folders by month and type.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Assumes filenames like: &#39;Income_Statement_2023-05-15.xlsx&#39; or &#39;Balance_Sheet_05_15_2023.pdf&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create target directory if it doesn&#39;t exist</span>
</span></span><span style="display:flex;"><span>    os<span style="color:#f92672">.</span>makedirs(target_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Regular expressions for date patterns</span>
</span></span><span style="display:flex;"><span>    patterns <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)-(\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">)-\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">&#39;</span>,  <span style="color:#75715e"># YYYY-MM-DD</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">)_\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">_(\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>,  <span style="color:#75715e"># MM_DD_YYYY</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">)-\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">-(\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>   <span style="color:#75715e"># MM-DD-YYYY</span>
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Document types to look for</span>
</span></span><span style="display:flex;"><span>    doc_types <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Income_Statement&#39;</span>, <span style="color:#e6db74">&#39;Balance_Sheet&#39;</span>, <span style="color:#e6db74">&#39;Cash_Flow&#39;</span>, <span style="color:#e6db74">&#39;Trial_Balance&#39;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process each file in the source directory</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> filename <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir(source_dir):
</span></span><span style="display:flex;"><span>        file_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(source_dir, filename)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Skip directories</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isdir(file_path):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Try to extract date</span>
</span></span><span style="display:flex;"><span>        date_found <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> pattern <span style="color:#f92672">in</span> patterns:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">match</span> <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>search(pattern, filename)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">match</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Extract year and month</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> len(<span style="color:#66d9ef">match</span><span style="color:#f92672">.</span>group(<span style="color:#ae81ff">1</span>)) <span style="color:#f92672">==</span> <span style="color:#ae81ff">4</span>:  <span style="color:#75715e"># If first group is year (YYYY-MM-DD)</span>
</span></span><span style="display:flex;"><span>                    year, month <span style="color:#f92672">=</span> <span style="color:#66d9ef">match</span><span style="color:#f92672">.</span>group(<span style="color:#ae81ff">1</span>), <span style="color:#66d9ef">match</span><span style="color:#f92672">.</span>group(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>:  <span style="color:#75715e"># If first group is month (MM_DD_YYYY)</span>
</span></span><span style="display:flex;"><span>                    month, year <span style="color:#f92672">=</span> <span style="color:#66d9ef">match</span><span style="color:#f92672">.</span>group(<span style="color:#ae81ff">1</span>), <span style="color:#66d9ef">match</span><span style="color:#f92672">.</span>group(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                month_name <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>strptime(month, <span style="color:#e6db74">&#34;%m&#34;</span>)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%B&#34;</span>)
</span></span><span style="display:flex;"><span>                date_found <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> date_found:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># If no date pattern found, put in &#39;Unsorted&#39;</span>
</span></span><span style="display:flex;"><span>            year, month_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Unsorted&#39;</span>, <span style="color:#e6db74">&#39;Unsorted&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Try to match document type</span>
</span></span><span style="display:flex;"><span>        doc_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Other&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> dtype <span style="color:#f92672">in</span> doc_types:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> dtype <span style="color:#f92672">in</span> filename:
</span></span><span style="display:flex;"><span>                doc_type <span style="color:#f92672">=</span> dtype
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create year and month folders if they don&#39;t exist</span>
</span></span><span style="display:flex;"><span>        year_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(target_dir, year)
</span></span><span style="display:flex;"><span>        os<span style="color:#f92672">.</span>makedirs(year_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        month_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(year_dir, month_name)
</span></span><span style="display:flex;"><span>        os<span style="color:#f92672">.</span>makedirs(month_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create document type folder if it doesn&#39;t exist</span>
</span></span><span style="display:flex;"><span>        doc_type_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(month_dir, doc_type)
</span></span><span style="display:flex;"><span>        os<span style="color:#f92672">.</span>makedirs(doc_type_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Copy the file to its destination</span>
</span></span><span style="display:flex;"><span>        dest_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(doc_type_dir, filename)
</span></span><span style="display:flex;"><span>        shutil<span style="color:#f92672">.</span>copy2(file_path, dest_path)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Copied </span><span style="color:#e6db74">{</span>filename<span style="color:#e6db74">}</span><span style="color:#e6db74"> to </span><span style="color:#e6db74">{</span>dest_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Organize financial statements by date and type&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;source_dir&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Directory containing financial statements&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--target-dir&#39;</span>, default<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;./Organized_Statements&#39;</span>,
</span></span><span style="display:flex;"><span>                       help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Target directory for organized files (default: ./Organized_Statements)&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>    organize_financial_statements(args<span style="color:#f92672">.</span>source_dir, args<span style="color:#f92672">.</span>target_dir)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Financial statement organization complete!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>This script:</p>
<ol>
<li>Scans a directory for financial documents</li>
<li>Extracts dates and document types from filenames</li>
<li>Creates an organized folder structure by year, month, and document type</li>
<li>Copies files to the appropriate locations</li>
</ol>
<h3 id="understanding-key-file-operations">Understanding Key File Operations</h3>
<ul>
<li><code>os.path.join()</code>: Combines path components correctly for your operating system</li>
<li><code>os.makedirs()</code>: Creates directories recursively with <code>exist_ok=True</code> to avoid errors</li>
<li><code>os.listdir()</code>: Lists files and directories in a path</li>
<li><code>shutil.copy2()</code>: Copies files while preserving metadata</li>
</ul>
<h3 id="automating-financial-report-backups">Automating Financial Report Backups</h3>
<p>Here&rsquo;s another practical example that creates date-stamped backups of your financial reports:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> shutil
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> argparse
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> zipfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">backup_financial_reports</span>(reports_dir, backup_dir<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Create a date-stamped ZIP backup of financial reports.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set default backup directory if none provided</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> backup_dir <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        backup_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>dirname(reports_dir), <span style="color:#e6db74">&#39;Backups&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create backup directory if it doesn&#39;t exist</span>
</span></span><span style="display:flex;"><span>    os<span style="color:#f92672">.</span>makedirs(backup_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create timestamp for backup filename</span>
</span></span><span style="display:flex;"><span>    timestamp <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y%m</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">_%H%M%S&#39;</span>)
</span></span><span style="display:flex;"><span>    backup_filename <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Financial_Reports_Backup_</span><span style="color:#e6db74">{</span>timestamp<span style="color:#e6db74">}</span><span style="color:#e6db74">.zip&#34;</span>
</span></span><span style="display:flex;"><span>    backup_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(backup_dir, backup_filename)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create ZIP file</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> zipfile<span style="color:#f92672">.</span>ZipFile(backup_path, <span style="color:#e6db74">&#39;w&#39;</span>, zipfile<span style="color:#f92672">.</span>ZIP_DEFLATED) <span style="color:#66d9ef">as</span> zipf:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Walk through all files in the reports directory</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> root, _, files <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>walk(reports_dir):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>                file_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(root, file)
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Calculate path relative to reports_dir for ZIP structure</span>
</span></span><span style="display:flex;"><span>                rel_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>relpath(file_path, reports_dir)
</span></span><span style="display:flex;"><span>                zipf<span style="color:#f92672">.</span>write(file_path, rel_path)
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Added </span><span style="color:#e6db74">{</span>rel_path<span style="color:#e6db74">}</span><span style="color:#e6db74"> to backup&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Backup created at: </span><span style="color:#e6db74">{</span>backup_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total size: </span><span style="color:#e6db74">{</span>os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>getsize(backup_path) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1024</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1024</span>)<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> MB&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> backup_path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Create a backup of financial reports&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;reports_dir&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Directory containing financial reports&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--backup-dir&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Target directory for backups&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>    backup_financial_reports(args<span style="color:#f92672">.</span>reports_dir, args<span style="color:#f92672">.</span>backup_dir)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><h2 id="automating-gui-interactions-with-pyautogui">Automating GUI Interactions with PyAutoGUI</h2>
<p>Sometimes you need to automate interactions with desktop applications that don&rsquo;t have APIs. For example, maybe you need to extract data from an older accounting system that can only export data through its GUI. PyAutoGUI can help automate these interactions.</p>
<h3 id="installing-and-setting-up-pyautogui">Installing and Setting Up PyAutoGUI</h3>
<pre tabindex="0"><code>pip install pyautogui
</code></pre><h3 id="safety-features">Safety Features</h3>
<p>PyAutoGUI has a fail-safe feature - quickly move your mouse to any corner of the screen to abort the script. This is crucial when you&rsquo;re testing automation that controls your mouse!</p>
<h3 id="basic-pyautogui-example">Basic PyAutoGUI Example</h3>
<p>Here&rsquo;s a simple script that could help export a monthly report from a financial application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pyautogui
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> argparse
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Safety delay - gives you time to switch to the target application</span>
</span></span><span style="display:flex;"><span>SAFETY_DELAY <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">export_monthly_report</span>(year, month):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Automate exporting a monthly report from a financial application.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        year: Year for the report
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        month: Month number (1-12) for the report
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Convert month number to name for the filename</span>
</span></span><span style="display:flex;"><span>    month_name <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>strptime(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>month<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34;%m&#34;</span>)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%B&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Preparing to export </span><span style="color:#e6db74">{</span>month_name<span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>year<span style="color:#e6db74">}</span><span style="color:#e6db74"> report...&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Switch to your financial application within </span><span style="color:#e6db74">{</span>SAFETY_DELAY<span style="color:#e6db74">}</span><span style="color:#e6db74"> seconds!&#34;</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(SAFETY_DELAY)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Click on &#39;Reports&#39; menu</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>click(x<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)  <span style="color:#75715e"># Adjust coordinates based on your application</span>
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Click on &#39;Monthly&#39; option</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>click(x<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">50</span>)  <span style="color:#75715e"># Adjust coordinates based on your application</span>
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Fill in date fields</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>typewrite(str(year))
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;tab&#39;</span>)
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>typewrite(str(month)<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;tab&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Click &#39;Generate Report&#39; button</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>click(x<span style="color:#f92672">=</span><span style="color:#ae81ff">200</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>)  <span style="color:#75715e"># Adjust coordinates based on your application</span>
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">3</span>)  <span style="color:#75715e"># Wait for report to generate</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Save the report</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>hotkey(<span style="color:#e6db74">&#39;ctrl&#39;</span>, <span style="color:#e6db74">&#39;s&#39;</span>)  <span style="color:#75715e"># Press Ctrl+S to save</span>
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Type the filename</span>
</span></span><span style="display:flex;"><span>    filename <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Financial_Report_</span><span style="color:#e6db74">{</span>year<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span><span style="color:#e6db74">{</span>month_name<span style="color:#e6db74">}</span><span style="color:#e6db74">.xlsx&#34;</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>typewrite(filename)
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;enter&#39;</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Report exported as </span><span style="color:#e6db74">{</span>filename<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Automate monthly report export&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--year&#39;</span>, type<span style="color:#f92672">=</span>int, default<span style="color:#f92672">=</span>datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>year, 
</span></span><span style="display:flex;"><span>                        help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Year for the report (default: current year)&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--month&#39;</span>, type<span style="color:#f92672">=</span>int, default<span style="color:#f92672">=</span>datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>month <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">or</span> <span style="color:#ae81ff">12</span>,
</span></span><span style="display:flex;"><span>                        help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Month for the report (1-12, default: previous month)&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Validate month</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> args<span style="color:#f92672">.</span>month <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">12</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Error: Month must be between 1 and 12&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    export_monthly_report(args<span style="color:#f92672">.</span>year, args<span style="color:#f92672">.</span>month)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p><strong>Important note</strong>: The coordinates in this script (e.g., <code>pyautogui.click(x=100, y=20)</code>) need to be adjusted for your specific application. Use <code>pyautogui.position()</code> to get the coordinates of your mouse pointer.</p>
<h3 id="pyautogui-key-functions">PyAutoGUI Key Functions</h3>
<ul>
<li><code>pyautogui.click(x, y)</code>: Move mouse to coordinates and click</li>
<li><code>pyautogui.typewrite('text')</code>: Type text</li>
<li><code>pyautogui.press('key')</code>: Press a single key</li>
<li><code>pyautogui.hotkey('ctrl', 's')</code>: Press multiple keys simultaneously</li>
<li><code>pyautogui.screenshot()</code>: Take a screenshot</li>
<li><code>pyautogui.locateOnScreen('image.png')</code>: Find an image on screen</li>
</ul>
<h2 id="putting-it-all-together-sample-financial-automation-project">Putting It All Together: Sample Financial Automation Project</h2>
<p>Let&rsquo;s build a financial quarter-end automation tool that:</p>
<ol>
<li>Creates organized backup of last quarter&rsquo;s data</li>
<li>Generates reports using a GUI application</li>
<li>Organizes the reports into the correct folders</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> argparse
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pyautogui
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> shutil
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> zipfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_last_quarter</span>(reference_date<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate the previous quarter based on a reference date.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> reference_date <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        reference_date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    current_month <span style="color:#f92672">=</span> reference_date<span style="color:#f92672">.</span>month
</span></span><span style="display:flex;"><span>    current_year <span style="color:#f92672">=</span> reference_date<span style="color:#f92672">.</span>year
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate previous quarter end month (3, 6, 9, or 12)</span>
</span></span><span style="display:flex;"><span>    last_quarter_month <span style="color:#f92672">=</span> ((current_month <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> last_quarter_month <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        last_quarter_month <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>        last_quarter_year <span style="color:#f92672">=</span> current_year <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        last_quarter_year <span style="color:#f92672">=</span> current_year
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> last_quarter_year, last_quarter_month
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_backup</span>(data_dir, backup_dir<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Create a date-stamped ZIP backup.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> backup_dir <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        backup_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>dirname(data_dir), <span style="color:#e6db74">&#39;Quarterly_Backups&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    os<span style="color:#f92672">.</span>makedirs(backup_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    timestamp <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y%m</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">_%H%M%S&#39;</span>)
</span></span><span style="display:flex;"><span>    backup_filename <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Financial_Data_Backup_</span><span style="color:#e6db74">{</span>timestamp<span style="color:#e6db74">}</span><span style="color:#e6db74">.zip&#34;</span>
</span></span><span style="display:flex;"><span>    backup_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(backup_dir, backup_filename)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> zipfile<span style="color:#f92672">.</span>ZipFile(backup_path, <span style="color:#e6db74">&#39;w&#39;</span>, zipfile<span style="color:#f92672">.</span>ZIP_DEFLATED) <span style="color:#66d9ef">as</span> zipf:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> root, _, files <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>walk(data_dir):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>                file_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(root, file)
</span></span><span style="display:flex;"><span>                rel_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>relpath(file_path, data_dir)
</span></span><span style="display:flex;"><span>                zipf<span style="color:#f92672">.</span>write(file_path, rel_path)
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Added </span><span style="color:#e6db74">{</span>rel_path<span style="color:#e6db74">}</span><span style="color:#e6db74"> to backup&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Backup created at: </span><span style="color:#e6db74">{</span>backup_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> backup_path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_quarterly_reports</span>(year, quarter, output_dir):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Automate generating quarterly reports using PyAutoGUI.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    os<span style="color:#f92672">.</span>makedirs(output_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate quarter end month</span>
</span></span><span style="display:flex;"><span>    end_month <span style="color:#f92672">=</span> quarter <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Quarter name for folder organization</span>
</span></span><span style="display:flex;"><span>    quarter_name <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Q</span><span style="color:#e6db74">{</span>quarter<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span><span style="color:#e6db74">{</span>year<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Preparing to generate </span><span style="color:#e6db74">{</span>quarter_name<span style="color:#e6db74">}</span><span style="color:#e6db74"> reports...&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Switch to your financial application within 5 seconds!&#34;</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This is a simplified example - you would need to adjust coordinates</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># and actions based on your specific application</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Click on Reports menu</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>click(x<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Click on Quarterly Reports</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>click(x<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">80</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Enter year and quarter</span>
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>typewrite(str(year))
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;tab&#39;</span>)
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>typewrite(str(quarter))
</span></span><span style="display:flex;"><span>    pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;tab&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Generate reports</span>
</span></span><span style="display:flex;"><span>    report_types <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Income_Statement&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Balance_Sheet&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Cash_Flow&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Accounts_Receivable&#34;</span>
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> report_type <span style="color:#f92672">in</span> report_types:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Select report type from dropdown</span>
</span></span><span style="display:flex;"><span>        pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;down&#39;</span>, presses<span style="color:#f92672">=</span>report_types<span style="color:#f92672">.</span>index(report_type) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;enter&#39;</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Click Generate button</span>
</span></span><span style="display:flex;"><span>        pyautogui<span style="color:#f92672">.</span>click(x<span style="color:#f92672">=</span><span style="color:#ae81ff">200</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">3</span>)  <span style="color:#75715e"># Wait for report to generate</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Save report</span>
</span></span><span style="display:flex;"><span>        pyautogui<span style="color:#f92672">.</span>hotkey(<span style="color:#e6db74">&#39;ctrl&#39;</span>, <span style="color:#e6db74">&#39;s&#39;</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Type filename and save to output directory</span>
</span></span><span style="display:flex;"><span>        filename <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>report_type<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span><span style="color:#e6db74">{</span>quarter_name<span style="color:#e6db74">}</span><span style="color:#e6db74">.xlsx&#34;</span>
</span></span><span style="display:flex;"><span>        filepath <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(output_dir, filename)
</span></span><span style="display:flex;"><span>        pyautogui<span style="color:#f92672">.</span>typewrite(filepath)
</span></span><span style="display:flex;"><span>        pyautogui<span style="color:#f92672">.</span>press(<span style="color:#e6db74">&#39;enter&#39;</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Generated </span><span style="color:#e6db74">{</span>filename<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Return to report selection</span>
</span></span><span style="display:flex;"><span>        pyautogui<span style="color:#f92672">.</span>click(x<span style="color:#f92672">=</span><span style="color:#ae81ff">150</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">150</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> output_dir
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">organize_reports</span>(reports_dir, organized_dir<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Organize reports into a structured folder system.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> organized_dir <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        organized_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>dirname(reports_dir), <span style="color:#e6db74">&#39;Organized_Reports&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    os<span style="color:#f92672">.</span>makedirs(organized_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process each file in the reports directory</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> filename <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir(reports_dir):
</span></span><span style="display:flex;"><span>        file_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(reports_dir, filename)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Skip directories</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isdir(file_path):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Extract information from filename</span>
</span></span><span style="display:flex;"><span>        parts <span style="color:#f92672">=</span> filename<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;_&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> len(parts) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>            report_type <span style="color:#f92672">=</span> parts[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>            quarter_info <span style="color:#f92672">=</span> parts[<span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># e.g., &#34;Q1&#34;</span>
</span></span><span style="display:flex;"><span>            year <span style="color:#f92672">=</span> parts[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;.&#39;</span>)[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># Remove file extension</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Create folders if they don&#39;t exist</span>
</span></span><span style="display:flex;"><span>            year_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(organized_dir, year)
</span></span><span style="display:flex;"><span>            os<span style="color:#f92672">.</span>makedirs(year_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            quarter_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(year_dir, quarter_info)
</span></span><span style="display:flex;"><span>            os<span style="color:#f92672">.</span>makedirs(quarter_dir, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Copy the file to its destination</span>
</span></span><span style="display:flex;"><span>            dest_path <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(quarter_dir, filename)
</span></span><span style="display:flex;"><span>            shutil<span style="color:#f92672">.</span>copy2(file_path, dest_path)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Organized </span><span style="color:#e6db74">{</span>filename<span style="color:#e6db74">}</span><span style="color:#e6db74"> to </span><span style="color:#e6db74">{</span>dest_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> organized_dir
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Automate quarterly financial processes&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--data-dir&#39;</span>, default<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;./Financial_Data&#39;</span>,
</span></span><span style="display:flex;"><span>                       help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Directory containing financial data&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--year&#39;</span>, type<span style="color:#f92672">=</span>int, 
</span></span><span style="display:flex;"><span>                       help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Year for processing (default: previous quarter</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">s year)&#39;</span>)
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;--quarter&#39;</span>, type<span style="color:#f92672">=</span>int,
</span></span><span style="display:flex;"><span>                       help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Quarter for processing (1-4, default: previous quarter)&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Determine year and quarter if not specified</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>year <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">or</span> args<span style="color:#f92672">.</span>quarter <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        calc_year, calc_month <span style="color:#f92672">=</span> get_last_quarter()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Map month to quarter</span>
</span></span><span style="display:flex;"><span>        calc_quarter <span style="color:#f92672">=</span> (calc_month <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>year <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            args<span style="color:#f92672">.</span>year <span style="color:#f92672">=</span> calc_year
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>quarter <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            args<span style="color:#f92672">.</span>quarter <span style="color:#f92672">=</span> calc_quarter
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Validate quarter</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> args<span style="color:#f92672">.</span>quarter <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Error: Quarter must be between 1 and 4&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;=== Starting Quarter-End Process for Q</span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>quarter<span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>year<span style="color:#e6db74">}</span><span style="color:#e6db74"> ===&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Step 1: Create backup</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">-- Step 1: Creating Data Backup --&#34;</span>)
</span></span><span style="display:flex;"><span>    backup_path <span style="color:#f92672">=</span> create_backup(args<span style="color:#f92672">.</span>data_dir)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Step 2: Generate reports</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">-- Step 2: Generating Quarterly Reports --&#34;</span>)
</span></span><span style="display:flex;"><span>    reports_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;./Reports_Q</span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>quarter<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>year<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    reports_path <span style="color:#f92672">=</span> generate_quarterly_reports(args<span style="color:#f92672">.</span>year, args<span style="color:#f92672">.</span>quarter, reports_dir)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Step 3: Organize reports</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">-- Step 3: Organizing Reports --&#34;</span>)
</span></span><span style="display:flex;"><span>    organized_dir <span style="color:#f92672">=</span> organize_reports(reports_path)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">=== Quarter-End Process Complete ===&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Data backup: </span><span style="color:#e6db74">{</span>backup_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Reports directory: </span><span style="color:#e6db74">{</span>reports_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Organized reports: </span><span style="color:#e6db74">{</span>organized_dir<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Automation is where Python really shines for finance professionals. Even if you never build a complex data model or web application, these automation tools can save you hours of repetitive work each week:</p>
<ul>
<li>CLI tools with <code>argparse</code> help you build flexible, reusable scripts</li>
<li>Package entry points let you install your tools system-wide</li>
<li>File operations with <code>os</code> and <code>shutil</code> organize your financial documents</li>
<li>PyAutoGUI can automate interactions with desktop financial applications</li>
</ul>
<p>As you build your automation toolkit, start small with scripts that solve specific pain points in your workflow. Over time, you&rsquo;ll develop a collection of tools that dramatically increase your productivity.</p>
<h2 id="next-steps">Next Steps</h2>
<ul>
<li>Try automating a simple task you perform regularly</li>
<li>Build a command-line tool for a financial calculation you frequently need</li>
<li>Create a script to organize a messy folder of financial documents</li>
<li>Consider which parts of your quarter-end process could be automated</li>
</ul>
<p>Remember that the best automations are the ones that solve your specific problems. The scripts in this post are just starting points - customize them to fit your unique workflow needs.</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://docs.python.org/3/library/argparse.html">argparse documentation</a></li>
<li><a href="https://pyautogui.readthedocs.io/en/latest/">PyAutoGUI documentation</a></li>
<li><a href="https://packaging.python.org/en/latest/">Python Packaging User Guide</a></li>
<li><a href="https://docs.python.org/3/library/shutil.html">shutil documentation</a></li>
<li><a href="https://realpython.com/command-line-interfaces-python-argparse/">Real Python: Command-Line Apps with argparse</a></li>
</ul>
]]></content:encoded></item><item><title>Part 8: Testing &amp; Debugging Python Code</title><link>https://michaelbrunger.com/python-testing-debugging/</link><pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-testing-debugging/</guid><description>Master unit testing with unittest and pytest, learn Test-Driven Development workflows, handle custom exceptions, use the debugger effectively, and implement structured logging.</description><content:encoded><![CDATA[<h1 id="testing--debugging-building-reliable-financial-tools">Testing &amp; Debugging: Building Reliable Financial Tools</h1>
<p>When working with financial data and calculations, accuracy isn&rsquo;t just importantâ€”it&rsquo;s essential. A small bug in your code could mean reporting incorrect figures, making flawed investment decisions, or even compliance issues. This post will guide you through testing and debugging techniques that ensure your financial Python code works correctly and reliably.</p>
<h2 id="why-testing-matters-in-finance">Why Testing Matters in Finance</h2>
<p>Imagine you&rsquo;ve created a Python script that calculates loan amortisation schedules. Your company uses this tool to price thousands of loans. If there&rsquo;s an error in your interest calculation logic, even a small one, the financial impact could be enormous.</p>
<p>As a finance professional, you need confidence in your code. Testing provides that confidence by systematically verifying that your calculations work correctly across a range of scenarios and edge cases.</p>
<h2 id="unit-testing-basics">Unit Testing Basics</h2>
<p>Unit testing involves testing individual components (usually functions) in isolation to ensure they work as expected.</p>
<h3 id="getting-started-with-unittest">Getting Started with unittest</h3>
<p>Python&rsquo;s built-in <code>unittest</code> framework provides all the tools you need for basic testing. Let&rsquo;s test our financial ratio calculator from the previous post:</p>
<p>First, create a file called <code>test_ratio_calculator.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> unittest
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ratio_calculator <span style="color:#f92672">import</span> calculate_current_ratio, calculate_debt_to_equity
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestFinancialRatios</span>(unittest<span style="color:#f92672">.</span>TestCase):
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_current_ratio</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test basic calculation</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>assertEqual(calculate_current_ratio(<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">50000</span>), <span style="color:#ae81ff">2.0</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test with zero liabilities - should raise ValueError</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>assertRaises(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>            calculate_current_ratio(<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_debt_to_equity</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test basic calculation</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>assertEqual(calculate_debt_to_equity(<span style="color:#ae81ff">200000</span>, <span style="color:#ae81ff">400000</span>), <span style="color:#ae81ff">0.5</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test highly leveraged company</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>assertEqual(calculate_debt_to_equity(<span style="color:#ae81ff">800000</span>, <span style="color:#ae81ff">200000</span>), <span style="color:#ae81ff">4.0</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test with zero equity - should raise ValueError</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>assertRaises(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>            calculate_debt_to_equity(<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    unittest<span style="color:#f92672">.</span>main()
</span></span></code></pre></div><p>Run the tests with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python test_ratio_calculator.py
</span></span></code></pre></div><p>If all tests pass, you&rsquo;ll see something like:</p>
<pre tabindex="0"><code>..
----------------------------------------------------------------------
Ran 2 tests in 0.001s

OK
</code></pre><p>If a test fails, <code>unittest</code> will tell you which test failed and why, helping you pinpoint the issue.</p>
<h3 id="common-assertions-in-unittest">Common Assertions in unittest</h3>
<p>Here are some assertions particularly useful for financial calculations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Checking exact equality</span>
</span></span><span style="display:flex;"><span>self<span style="color:#f92672">.</span>assertEqual(calculate_npv(cash_flows, <span style="color:#ae81ff">0.1</span>), <span style="color:#ae81ff">1025.79</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Checking approximate equality (for floating point calculations)</span>
</span></span><span style="display:flex;"><span>self<span style="color:#f92672">.</span>assertAlmostEqual(calculate_irr([<span style="color:#f92672">-</span><span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">500</span>, <span style="color:#ae81ff">600</span>]), <span style="color:#ae81ff">0.0734</span>, places<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Checking if a value is greater than another</span>
</span></span><span style="display:flex;"><span>self<span style="color:#f92672">.</span>assertGreater(calculate_profit_margin(revenue, costs), <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Checking if an exception is raised for invalid inputs</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>assertRaises(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>    calculate_pe_ratio(stock_price<span style="color:#f92672">=</span><span style="color:#ae81ff">50</span>, earnings_per_share<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span></code></pre></div><h2 id="moving-to-pytest">Moving to pytest</h2>
<p>While <code>unittest</code> is perfectly capable, <code>pytest</code> offers a more modern and flexible approach to testing. Let&rsquo;s see how we might test the same functions with <code>pytest</code>:</p>
<ol>
<li>Install pytest:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install pytest
</span></span></code></pre></div><ol start="2">
<li>Create a file named <code>test_ratios_pytest.py</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pytest
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ratio_calculator <span style="color:#f92672">import</span> calculate_current_ratio, calculate_debt_to_equity
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_current_ratio_basic</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> calculate_current_ratio(<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">50000</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">2.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_current_ratio_zero_liabilities</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> pytest<span style="color:#f92672">.</span>raises(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>        calculate_current_ratio(<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_debt_to_equity_basic</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> calculate_debt_to_equity(<span style="color:#ae81ff">200000</span>, <span style="color:#ae81ff">400000</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0.5</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_debt_to_equity_high_leverage</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> calculate_debt_to_equity(<span style="color:#ae81ff">800000</span>, <span style="color:#ae81ff">200000</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">4.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_debt_to_equity_zero_equity</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> pytest<span style="color:#f92672">.</span>raises(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>        calculate_debt_to_equity(<span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">0</span>)
</span></span></code></pre></div><ol start="3">
<li>Run the tests:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pytest test_ratios_pytest.py -v
</span></span></code></pre></div><p>The <code>-v</code> flag gives you verbose output showing each test that was run.</p>
<h3 id="the-power-of-pytest-fixtures">The Power of pytest Fixtures</h3>
<p>One of pytest&rsquo;s most powerful features is fixtures, which let you set up preconditions for your tests. This is especially useful for financial testing where you might have complex data structures:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pytest
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_analyzer <span style="color:#f92672">import</span> StockAnalyzer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@pytest.fixture</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sample_stock_data</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Return a sample dataset that can be used by multiple tests</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;ticker&#39;</span>: <span style="color:#e6db74">&#39;AAPL&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;prices&#39;</span>: [<span style="color:#ae81ff">150.25</span>, <span style="color:#ae81ff">151.30</span>, <span style="color:#ae81ff">149.80</span>, <span style="color:#ae81ff">152.50</span>, <span style="color:#ae81ff">153.75</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;volumes&#39;</span>: [<span style="color:#ae81ff">12345678</span>, <span style="color:#ae81ff">9876543</span>, <span style="color:#ae81ff">11234567</span>, <span style="color:#ae81ff">10234567</span>, <span style="color:#ae81ff">13456789</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;financials&#39;</span>: {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;revenue&#39;</span>: <span style="color:#ae81ff">365.82</span>,  <span style="color:#75715e"># In billions</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;net_income&#39;</span>: <span style="color:#ae81ff">94.68</span>,  <span style="color:#75715e"># In billions</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;total_assets&#39;</span>: <span style="color:#ae81ff">351.0</span>,  <span style="color:#75715e"># In billions</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;total_liabilities&#39;</span>: <span style="color:#ae81ff">287.91</span>,  <span style="color:#75715e"># In billions</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;shareholders_equity&#39;</span>: <span style="color:#ae81ff">63.09</span>  <span style="color:#75715e"># In billions</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_pe_ratio_calculation</span>(sample_stock_data):
</span></span><span style="display:flex;"><span>    analyzer <span style="color:#f92672">=</span> StockAnalyzer(sample_stock_data)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Assuming current price is the last in the list and EPS is net_income / outstanding_shares</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># For this example, let&#39;s say outstanding_shares is 16.07B</span>
</span></span><span style="display:flex;"><span>    expected_pe <span style="color:#f92672">=</span> <span style="color:#ae81ff">150.25</span> <span style="color:#f92672">/</span> (<span style="color:#ae81ff">94.68</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">16.07</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> round(analyzer<span style="color:#f92672">.</span>calculate_pe_ratio(), <span style="color:#ae81ff">2</span>) <span style="color:#f92672">==</span> round(expected_pe, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_debt_to_equity_ratio</span>(sample_stock_data):
</span></span><span style="display:flex;"><span>    analyzer <span style="color:#f92672">=</span> StockAnalyzer(sample_stock_data)
</span></span><span style="display:flex;"><span>    expected_ratio <span style="color:#f92672">=</span> <span style="color:#ae81ff">287.91</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">63.09</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> round(analyzer<span style="color:#f92672">.</span>calculate_debt_to_equity(), <span style="color:#ae81ff">2</span>) <span style="color:#f92672">==</span> round(expected_ratio, <span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><p>This way, you set up your test data once and reuse it across multiple tests.</p>
<h3 id="parameterised-tests-for-multiple-scenarios">Parameterised Tests for Multiple Scenarios</h3>
<p>Financial calculations often need to be tested with multiple sets of inputs. Pytest&rsquo;s parameterisation makes this elegant:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pytest
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> finance_calcs <span style="color:#f92672">import</span> calculate_compound_interest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@pytest.mark.parametrize</span>(<span style="color:#e6db74">&#34;principal,rate,time,compounding,expected&#34;</span>, [
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1276.28</span>),    <span style="color:#75715e"># Annual compounding</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">1283.36</span>),   <span style="color:#75715e"># Monthly compounding</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">365</span>, <span style="color:#ae81ff">1284.52</span>),  <span style="color:#75715e"># Daily compounding</span>
</span></span><span style="display:flex;"><span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_compound_interest</span>(principal, rate, time, compounding, expected):
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> calculate_compound_interest(principal, rate, time, compounding)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> round(result, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">==</span> expected
</span></span></code></pre></div><p>This tests our compound interest function with annual, monthly, and daily compounding periods, all in a single test function.</p>
<h2 id="test-driven-development-tdd-for-finance">Test-Driven Development (TDD) for Finance</h2>
<p>Test-Driven Development is a methodology where you write tests before you write code. For financial calculations, this approach can be particularly beneficial:</p>
<ol>
<li><strong>Write the test first</strong>: Define what your function should do before implementing it</li>
<li><strong>Run the test and watch it fail</strong>: Confirm the test works</li>
<li><strong>Write the implementation</strong>: Create the function to make the test pass</li>
<li><strong>Run the test again</strong>: Verify your implementation works</li>
<li><strong>Refactor</strong>: Clean up your code while ensuring tests continue to pass</li>
</ol>
<h3 id="a-tdd-example-calculating-ebitda">A TDD Example: Calculating EBITDA</h3>
<p>Let&rsquo;s say we need to add an EBITDA calculation function. Following TDD:</p>
<ol>
<li>First, write the test:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># test_financial_metrics.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pytest
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_metrics <span style="color:#f92672">import</span> calculate_ebitda
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_calculate_ebitda</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># EBITDA = Net Income + Interest + Taxes + Depreciation + Amortisation</span>
</span></span><span style="display:flex;"><span>    income_statement <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;net_income&#39;</span>: <span style="color:#ae81ff">1000000</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;interest_expense&#39;</span>: <span style="color:#ae81ff">200000</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;income_tax&#39;</span>: <span style="color:#ae81ff">300000</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;depreciation&#39;</span>: <span style="color:#ae81ff">150000</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;amortisation&#39;</span>: <span style="color:#ae81ff">50000</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    expected_ebitda <span style="color:#f92672">=</span> <span style="color:#ae81ff">1700000</span>  <span style="color:#75715e"># Sum of all the components</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> calculate_ebitda(income_statement) <span style="color:#f92672">==</span> expected_ebitda
</span></span></code></pre></div><ol start="2">
<li>Run the test (it will fail since we haven&rsquo;t implemented the function yet):</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pytest test_financial_metrics.py
</span></span></code></pre></div><ol start="3">
<li>Implement the function:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># financial_metrics.py</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_ebitda</span>(income_statement):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate EBITDA from income statement components.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        income_statement (dict): Dictionary containing income statement items
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: EBITDA value
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (
</span></span><span style="display:flex;"><span>        income_statement[<span style="color:#e6db74">&#39;net_income&#39;</span>] <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>        income_statement[<span style="color:#e6db74">&#39;interest_expense&#39;</span>] <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>        income_statement[<span style="color:#e6db74">&#39;income_tax&#39;</span>] <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>        income_statement[<span style="color:#e6db74">&#39;depreciation&#39;</span>] <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>        income_statement[<span style="color:#e6db74">&#39;amortisation&#39;</span>]
</span></span><span style="display:flex;"><span>    )
</span></span></code></pre></div><ol start="4">
<li>Run the test again - it should pass now!</li>
</ol>
<h2 id="debugging-financial-code">Debugging Financial Code</h2>
<p>Even with tests, bugs will sometimes creep into your code. Let&rsquo;s explore techniques to find and fix them.</p>
<h3 id="print-driven-debugging">Print-Driven Debugging</h3>
<p>The simplest debugging technique is adding <code>print()</code> statements to your code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_loan_payment</span>(principal, annual_rate, years):
</span></span><span style="display:flex;"><span>    monthly_rate <span style="color:#f92672">=</span> annual_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly rate: </span><span style="color:#e6db74">{</span>monthly_rate<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    num_payments <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Number of payments: </span><span style="color:#e6db74">{</span>num_payments<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (monthly_rate <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate) <span style="color:#f92672">**</span> num_payments) <span style="color:#f92672">/</span> \
</span></span><span style="display:flex;"><span>              ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate) <span style="color:#f92672">**</span> num_payments <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Calculated payment: </span><span style="color:#e6db74">{</span>payment<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> payment
</span></span></code></pre></div><p>While simple, this approach can be effective for quick debugging sessions.</p>
<h3 id="using-pythons-built-in-debugger-pdb">Using Python&rsquo;s Built-in Debugger (pdb)</h3>
<p>For more complex issues, Python&rsquo;s debugger (pdb) gives you interactive control:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">analyze_portfolio</span>(holdings):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> pdb; pdb<span style="color:#f92672">.</span>set_trace()  <span style="color:#75715e"># Debugger will start here</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    total_value <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ticker, data <span style="color:#f92672">in</span> holdings<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        shares <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#39;shares&#39;</span>]
</span></span><span style="display:flex;"><span>        price <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#39;current_price&#39;</span>]
</span></span><span style="display:flex;"><span>        position_value <span style="color:#f92672">=</span> shares <span style="color:#f92672">*</span> price
</span></span><span style="display:flex;"><span>        total_value <span style="color:#f92672">+=</span> position_value
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total_value
</span></span></code></pre></div><p>When this code runs, it will pause at the <code>pdb.set_trace()</code> line and drop you into an interactive debugger. Common commands include:</p>
<ul>
<li><code>n</code> (next): Execute the current line and move to the next one</li>
<li><code>s</code> (step): Step into a function call</li>
<li><code>c</code> (continue): Continue execution until the next breakpoint</li>
<li><code>p variable_name</code>: Print the value of a variable</li>
<li><code>q</code> (quit): Exit the debugger</li>
</ul>
<h3 id="ide-based-debugging">IDE-Based Debugging</h3>
<p>Most modern IDEs offer powerful visual debugging:</p>
<ol>
<li>Set a breakpoint by clicking in the margin next to your code</li>
<li>Start the debugger (usually with a &ldquo;Debug&rdquo; button)</li>
<li>The program will pause at your breakpoint</li>
<li>Examine variables, step through code, and find issues</li>
</ol>
<p>This is particularly useful for financial applications where you need to inspect complex data structures or track down calculation errors.</p>
<h3 id="common-financial-code-bugs">Common Financial Code Bugs</h3>
<p>Watch out for these common issues in financial code:</p>
<ol>
<li><strong>Rounding errors</strong>: Financial calculations often require precise decimal handling</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Problematic: Floating point imprecision</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.2</span>  <span style="color:#75715e"># Returns 0.30000000000000004</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Better: Use Decimal for financial calculations</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> decimal <span style="color:#f92672">import</span> Decimal
</span></span><span style="display:flex;"><span>Decimal(<span style="color:#e6db74">&#39;0.1&#39;</span>) <span style="color:#f92672">+</span> Decimal(<span style="color:#e6db74">&#39;0.2&#39;</span>)  <span style="color:#75715e"># Returns Decimal(&#39;0.3&#39;)</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Off-by-one errors in time periods</strong>: Check if your code correctly handles time period boundaries</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Is this calculating 29 or 30 days of interest?</span>
</span></span><span style="display:flex;"><span>days_in_month <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>daily_interest <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (annual_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">365</span>)
</span></span><span style="display:flex;"><span>total_interest <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Potential off-by-one error</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> day <span style="color:#f92672">in</span> range(days_in_month):  <span style="color:#75715e"># This gives 0-29, so only 30 days</span>
</span></span><span style="display:flex;"><span>    total_interest <span style="color:#f92672">+=</span> daily_interest
</span></span></code></pre></div><ol start="3">
<li><strong>Negative input validation</strong>: Financial functions often have domain restrictions</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_loan_payment</span>(principal, rate, years):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Validate inputs</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> principal <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Principal must be positive&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> rate <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Interest rate cannot be negative&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> years <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Loan term must be positive&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Rest of the calculation</span>
</span></span></code></pre></div><h2 id="custom-exceptions-for-financial-validation">Custom Exceptions for Financial Validation</h2>
<p>Creating custom exceptions helps make your financial code more robust and self-documenting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">NegativePrincipalError</span>(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Raised when a negative principal amount is provided&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZeroDivisionFinancialError</span>(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Raised when a financial calculation would result in division by zero&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_return_on_investment</span>(gain, cost):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate ROI: (Gain - Cost) / Cost
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        gain (float): The amount gained from the investment
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cost (float): The cost of the investment
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: ROI as a decimal
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Raises:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        NegativePrincipalError: If cost is negative
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ZeroDivisionFinancialError: If cost is zero
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> cost <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> NegativePrincipalError(<span style="color:#e6db74">&#34;Investment cost cannot be negative&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> cost <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> ZeroDivisionFinancialError(<span style="color:#e6db74">&#34;Cannot calculate ROI with zero cost&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (gain <span style="color:#f92672">-</span> cost) <span style="color:#f92672">/</span> cost
</span></span></code></pre></div><p>These custom exceptions make error handling clearer and provide better feedback to users of your code.</p>
<h2 id="structured-logging-for-financial-applications">Structured Logging for Financial Applications</h2>
<p>For production financial applications, proper logging is essential for auditing and debugging:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> logging
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set up logging</span>
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>basicConfig(
</span></span><span style="display:flex;"><span>    filename<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;financial_calculations.log&#39;</span>,
</span></span><span style="display:flex;"><span>    level<span style="color:#f92672">=</span>logging<span style="color:#f92672">.</span>INFO,
</span></span><span style="display:flex;"><span>    format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%(asctime)s</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%(name)s</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%(levelname)s</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%(message)s</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_mortgage_payment</span>(principal, rate, years):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate monthly mortgage payment&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Calculating mortgage payment: principal=</span><span style="color:#e6db74">{</span>principal<span style="color:#e6db74">}</span><span style="color:#e6db74">, rate=</span><span style="color:#e6db74">{</span>rate<span style="color:#e6db74">}</span><span style="color:#e6db74">, years=</span><span style="color:#e6db74">{</span>years<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        monthly_rate <span style="color:#f92672">=</span> rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>        num_payments <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> monthly_rate <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">/</span> num_payments
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (monthly_rate <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate) <span style="color:#f92672">**</span> num_payments) <span style="color:#f92672">/</span> \
</span></span><span style="display:flex;"><span>                      ((<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate) <span style="color:#f92672">**</span> num_payments <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Calculated payment: </span><span style="color:#e6db74">{</span>payment<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> payment
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>error(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error calculating mortgage payment: </span><span style="color:#e6db74">{</span>str(e)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span>
</span></span></code></pre></div><p>This creates a log file with timestamped entries that can be invaluable for tracking down issues in complex financial applications.</p>
<h3 id="logging-levels">Logging Levels</h3>
<p>Different logging levels serve different purposes:</p>
<ul>
<li><code>logging.DEBUG</code>: Detailed information, typically useful only for diagnosing problems</li>
<li><code>logging.INFO</code>: Confirmation that things are working as expected</li>
<li><code>logging.WARNING</code>: Indication that something unexpected happened, but the program is still working</li>
<li><code>logging.ERROR</code>: Due to a more serious problem, the program couldn&rsquo;t perform a function</li>
<li><code>logging.CRITICAL</code>: A serious error indicating the program may be unable to continue running</li>
</ul>
<p>For financial applications, consider using these levels to differentiate between routine calculations and potential issues:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">analyze_investment_portfolio</span>(portfolio):
</span></span><span style="display:flex;"><span>    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Analyzing portfolio with </span><span style="color:#e6db74">{</span>len(portfolio)<span style="color:#e6db74">}</span><span style="color:#e6db74"> positions&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> position <span style="color:#f92672">in</span> portfolio:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Log routine information</span>
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>debug(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Processing position: </span><span style="color:#e6db74">{</span>position[<span style="color:#e6db74">&#39;ticker&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Log potential concerns</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> position[<span style="color:#e6db74">&#39;allocation&#39;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0.20</span>:  <span style="color:#75715e"># More than 20% in single position</span>
</span></span><span style="display:flex;"><span>            logging<span style="color:#f92672">.</span>warning(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;High concentration in </span><span style="color:#e6db74">{</span>position[<span style="color:#e6db74">&#39;ticker&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>position[<span style="color:#e6db74">&#39;allocation&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.1%</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Log serious issues</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> position[<span style="color:#e6db74">&#39;value&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            logging<span style="color:#f92672">.</span>error(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Negative position value for </span><span style="color:#e6db74">{</span>position[<span style="color:#e6db74">&#39;ticker&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>position[<span style="color:#e6db74">&#39;value&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="handling-sensitive-financial-data-in-logs">Handling Sensitive Financial Data in Logs</h3>
<p>Be careful not to log sensitive financial information:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># BAD: Logging personal financial data</span>
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Processing transaction for account </span><span style="color:#e6db74">{</span>account_number<span style="color:#e6db74">}</span><span style="color:#e6db74">, balance: </span><span style="color:#e6db74">{</span>balance<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># GOOD: Log only what&#39;s necessary without exposing private data</span>
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Processing transaction for account ending in </span><span style="color:#e6db74">{</span>account_number[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h2 id="putting-it-all-together-a-complete-financial-testing-example">Putting It All Together: A Complete Financial Testing Example</h2>
<p>Let&rsquo;s bring everything together with a complete example for a financial calculator module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># financial_calculator.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> decimal <span style="color:#f92672">import</span> Decimal
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> logging
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set up logging</span>
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>basicConfig(
</span></span><span style="display:flex;"><span>    filename<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;financial_calculator.log&#39;</span>,
</span></span><span style="display:flex;"><span>    level<span style="color:#f92672">=</span>logging<span style="color:#f92672">.</span>INFO,
</span></span><span style="display:flex;"><span>    format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%(asctime)s</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%(name)s</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%(levelname)s</span><span style="color:#e6db74"> - </span><span style="color:#e6db74">%(message)s</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FinancialError</span>(<span style="color:#a6e22e">Exception</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Base class for financial calculation errors&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">NegativeValueError</span>(FinancialError):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Raised when a negative value is provided where it&#39;s not allowed&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZeroValueError</span>(FinancialError):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Raised when a zero value is provided where it&#39;s not allowed&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">npv</span>(cash_flows, discount_rate):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Net Present Value for a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows (list): List of cash flows where the first element is typically negative (investment)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        discount_rate (float): Annual discount rate as a decimal (e.g., 0.1 for 10%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Decimal: Net Present Value rounded to 2 decimal places
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Raises:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        TypeError: If inputs are not in the expected format
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ValueError: If discount_rate is less than -1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Calculating NPV with discount rate: </span><span style="color:#e6db74">{</span>discount_rate<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    logging<span style="color:#f92672">.</span>debug(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Cash flows: </span><span style="color:#e6db74">{</span>cash_flows<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> isinstance(cash_flows, (list, tuple)):
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>error(<span style="color:#e6db74">&#34;Cash flows must be a list or tuple&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">TypeError</span>(<span style="color:#e6db74">&#34;Cash flows must be a list or tuple&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> all(isinstance(cf, (int, float, Decimal)) <span style="color:#66d9ef">for</span> cf <span style="color:#f92672">in</span> cash_flows):
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>error(<span style="color:#e6db74">&#34;All cash flows must be numeric&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">TypeError</span>(<span style="color:#e6db74">&#34;All cash flows must be numeric&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> discount_rate <span style="color:#f92672">&lt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>error(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Invalid discount rate: </span><span style="color:#e6db74">{</span>discount_rate<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Discount rate cannot be less than -100%&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Convert to Decimal for precise financial calculations</span>
</span></span><span style="display:flex;"><span>    npv_value <span style="color:#f92672">=</span> Decimal(<span style="color:#e6db74">&#39;0&#39;</span>)
</span></span><span style="display:flex;"><span>    rate <span style="color:#f92672">=</span> Decimal(str(discount_rate))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, cf <span style="color:#f92672">in</span> enumerate(cash_flows):
</span></span><span style="display:flex;"><span>        cf_decimal <span style="color:#f92672">=</span> Decimal(str(cf))
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Initial cash flow isn&#39;t discounted</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            npv_value <span style="color:#f92672">+=</span> cf_decimal
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            npv_value <span style="color:#f92672">+=</span> cf_decimal <span style="color:#f92672">/</span> (Decimal(<span style="color:#e6db74">&#39;1&#39;</span>) <span style="color:#f92672">+</span> rate) <span style="color:#f92672">**</span> Decimal(str(i))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;NPV calculation result: </span><span style="color:#e6db74">{</span>npv_value<span style="color:#f92672">.</span>quantize(Decimal(<span style="color:#e6db74">&#39;0.01&#39;</span>))<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> npv_value<span style="color:#f92672">.</span>quantize(Decimal(<span style="color:#e6db74">&#39;0.01&#39;</span>))  <span style="color:#75715e"># Round to 2 decimal places</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">irr</span>(cash_flows, guess<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>, tolerance<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0001</span>, max_iterations<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Internal Rate of Return for a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows (list): List of cash flows where the first element is typically negative
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        guess (float): Initial guess for IRR
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        tolerance (float): The calculation will stop when the result is within this tolerance
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        max_iterations (int): Maximum number of iterations to perform
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: The internal rate of return as a decimal
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Raises:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ValueError: If calculation doesn&#39;t converge
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Implementation using Newton&#39;s method</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># (Full implementation would go here)</span>
</span></span><span style="display:flex;"><span>    logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;IRR calculation requested&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Simplified example return for brevity</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0.1548</span>
</span></span></code></pre></div><p>And here&rsquo;s how we would test this module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># test_financial_calculator.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pytest
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> decimal <span style="color:#f92672">import</span> Decimal
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_calculator <span style="color:#f92672">import</span> npv, irr, NegativeValueError, ZeroValueError
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestNPV</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_basic_npv_calculation</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Initial investment of 1000, followed by 4 annual returns</span>
</span></span><span style="display:flex;"><span>        cash_flows <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">300</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">assert</span> npv(cash_flows, <span style="color:#ae81ff">0.1</span>) <span style="color:#f92672">==</span> Decimal(<span style="color:#e6db74">&#39;152.92&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_npv_with_all_positive_values</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># All positive cash flows (unusual but mathematically valid)</span>
</span></span><span style="display:flex;"><span>        cash_flows <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">500</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">assert</span> npv(cash_flows, <span style="color:#ae81ff">0.1</span>) <span style="color:#f92672">&gt;</span> Decimal(<span style="color:#e6db74">&#39;1000&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_npv_with_high_discount_rate</span>(self):
</span></span><span style="display:flex;"><span>        cash_flows <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">300</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># High discount rate should reduce NPV</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">assert</span> npv(cash_flows, <span style="color:#ae81ff">0.25</span>) <span style="color:#f92672">&lt;</span> npv(cash_flows, <span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_npv_with_invalid_input</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test with non-list input</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> pytest<span style="color:#f92672">.</span>raises(<span style="color:#a6e22e">TypeError</span>):
</span></span><span style="display:flex;"><span>            npv(<span style="color:#e6db74">&#34;not a list&#34;</span>, <span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test with non-numeric cash flows</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> pytest<span style="color:#f92672">.</span>raises(<span style="color:#a6e22e">TypeError</span>):
</span></span><span style="display:flex;"><span>            npv([<span style="color:#f92672">-</span><span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;300&#34;</span>, <span style="color:#ae81ff">400</span>], <span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Test with invalid discount rate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> pytest<span style="color:#f92672">.</span>raises(<span style="color:#a6e22e">ValueError</span>):
</span></span><span style="display:flex;"><span>            npv([<span style="color:#f92672">-</span><span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">400</span>], <span style="color:#f92672">-</span><span style="color:#ae81ff">1.5</span>)  <span style="color:#75715e"># Can&#39;t have less than -100% discount</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestIRR</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_basic_irr_calculation</span>(self):
</span></span><span style="display:flex;"><span>        cash_flows <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">300</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Using almost equal because IRR can have small floating point differences</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">assert</span> abs(irr(cash_flows) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0.1548</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.0001</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Additional IRR tests would go here...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We could add more test classes for other financial functions</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>For finance professionals using Python, robust testing and debugging aren&rsquo;t optional extrasâ€”they&rsquo;re essential practices that ensure your calculations are reliable and accurate. By incorporating unit tests, effective debugging strategies, and structured logging into your workflow, you can build financial tools that you and your colleagues can trust.</p>
<p>In our next post, we&rsquo;ll explore how to turn your financial scripts into proper command-line tools and automate routine financial tasksâ€”a crucial skill for improving your productivity as a finance professional.</p>
<h2 id="practice-exercises">Practice Exercises</h2>
<ol>
<li>Create a simple function to calculate compound interest with different compounding periods, then write tests for it using pytest.</li>
<li>Debug a financial calculation by setting breakpoints and using your IDE&rsquo;s debugging tools.</li>
<li>Implement a custom exception for a financial calculation and write a test that verifies it&rsquo;s raised appropriately.</li>
<li>Add structured logging to a financial script you&rsquo;ve already written.</li>
</ol>
<h2 id="further-resources">Further Resources</h2>
<ul>
<li><a href="https://docs.pytest.org/">pytest Documentation</a></li>
<li><a href="https://docs.python.org/3/library/pdb.html">Python Debugging with pdb</a></li>
<li><a href="https://docs.python.org/3/library/logging.html">Python&rsquo;s logging Module</a></li>
<li><a href="https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/">Test-Driven Development by Example</a> by Kent Beck</li>
<li><a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/">Clean Code</a> by Robert C. Martin</li>
</ul>
]]></content:encoded></item><item><title>Part 7: Code Quality &amp; Collaboration in Python</title><link>https://michaelbrunger.com/python-virtual-environments-packaging/</link><pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-virtual-environments-packaging/</guid><description>Learn version control with Git and GitHub, write clean PEP 8-compliant code, use linters and auto-formatters, and create effective documentation for your Python projects.</description><content:encoded><![CDATA[<h1 id="code-quality--collaboration-building-finance-tools-that-last">Code Quality &amp; Collaboration: Building Finance Tools That Last</h1>
<p>As a finance professional learning Python, you&rsquo;ll soon want to move beyond writing scripts just for yourself. Whether you&rsquo;re building financial models, automating reporting, or creating data analysis tools, there comes a point when your code needs to be shared with colleagues or even the wider finance community. This post will guide you through best practices for creating high-quality, shareable code.</p>
<h2 id="version-control-git--github-for-financial-projects">Version Control: Git &amp; GitHub for Financial Projects</h2>
<h3 id="why-version-control-matters-in-finance">Why Version Control Matters in Finance</h3>
<p>Imagine you&rsquo;ve built a Python script that calculates key financial ratios from quarterly reports. After sharing it with your team, you make changes that accidentally break the debt-to-equity calculation. Without version control, finding and fixing this error could be a nightmare. With Git, you can simply revert to the previous working version.</p>
<p>In finance, where accuracy is paramount and regulatory compliance often requires audit trails, version control isn&rsquo;t just convenientâ€”it&rsquo;s essential.</p>
<h3 id="getting-started-with-git">Getting Started with Git</h3>
<p>First, <a href="https://git-scm.com/downloads">download and install Git</a> for your operating system.</p>
<p>Once installed, open a command prompt or terminal and set up your identity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global user.name <span style="color:#e6db74">&#34;Your Name&#34;</span>
</span></span><span style="display:flex;"><span>git config --global user.email <span style="color:#e6db74">&#34;your.email@example.com&#34;</span>
</span></span></code></pre></div><h3 id="creating-your-first-finance-repository">Creating Your First Finance Repository</h3>
<p>Let&rsquo;s walk through creating a repository for a simple financial calculator:</p>
<ol>
<li>Create a new directory for your project:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir financial-ratio-calculator
</span></span><span style="display:flex;"><span>cd financial-ratio-calculator
</span></span></code></pre></div><ol start="2">
<li>Initialis a Git repository:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init
</span></span></code></pre></div><p>You&rsquo;ll see a message that an empty Git repository has been initialised.</p>
<ol start="3">
<li>Create a simple Python file called <code>ratio_calculator.py</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_current_ratio</span>(current_assets, current_liabilities):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate the current ratio.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        current_assets (float): Total current assets
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        current_liabilities (float): Total current liabilities
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: Current ratio (current assets / current liabilities)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> current_liabilities <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Current liabilities cannot be zero (division by zero)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> current_assets <span style="color:#f92672">/</span> current_liabilities
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_debt_to_equity</span>(total_debt, shareholders_equity):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate the debt-to-equity ratio.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        total_debt (float): Total debt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        shareholders_equity (float): Total shareholders&#39; equity
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: Debt-to-equity ratio (total debt / shareholders&#39; equity)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> shareholders_equity <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Shareholders&#39; equity cannot be zero (division by zero)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total_debt <span style="color:#f92672">/</span> shareholders_equity
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add more financial ratios as needed</span>
</span></span></code></pre></div><ol start="4">
<li>Track the file with Git:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add ratio_calculator.py
</span></span></code></pre></div><ol start="5">
<li>Commit the changes:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Add basic financial ratio calculator functions&#34;</span>
</span></span></code></pre></div><p>Congrats! You&rsquo;ve made your first commit.</p>
<h3 id="core-git-commands-for-daily-use">Core Git Commands for Daily Use</h3>
<ul>
<li><code>git status</code>: Check which files have been modified</li>
<li><code>git diff</code>: See exactly what changed in your files</li>
<li><code>git add &lt;filename&gt;</code>: Stage a file for commit</li>
<li><code>git commit -m &quot;Your message&quot;</code>: Commit staged changes</li>
<li><code>git log</code>: View commit history</li>
</ul>
<h3 id="branching-for-new-features">Branching for New Features</h3>
<p>Branching lets you work on new features without affecting your main code. This is perfect for when you&rsquo;re adding new financial calculations to your toolkit.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a branch for a new profitability ratio feature</span>
</span></span><span style="display:flex;"><span>git branch profitability-ratios
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Switch to that branch</span>
</span></span><span style="display:flex;"><span>git checkout profitability-ratios
</span></span></code></pre></div><p>Or do both at once:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout -b profitability-ratios
</span></span></code></pre></div><p>Now add some code to your ratio_calculator.py file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roe</span>(net_income, average_shareholders_equity):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Return on Equity (ROE).
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        net_income (float): Net income for the period
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        average_shareholders_equity (float): Average shareholders&#39; equity
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: ROE ratio (net income / average shareholders&#39; equity)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> average_shareholders_equity <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Average shareholders&#39; equity cannot be zero&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> net_income <span style="color:#f92672">/</span> average_shareholders_equity
</span></span></code></pre></div><p>Commit this new function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add ratio_calculator.py
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Add ROE calculation function&#34;</span>
</span></span></code></pre></div><p>When you&rsquo;re ready to merge this back into your main code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout main
</span></span><span style="display:flex;"><span>git merge profitability-ratios
</span></span></code></pre></div><h3 id="collaborating-with-github">Collaborating with GitHub</h3>
<p>GitHub extends Git&rsquo;s functionality by hosting your repositories online, making collaboration easier.</p>
<ol>
<li><a href="https://github.com/join">Create a GitHub account</a> if you don&rsquo;t have one</li>
<li>Create a new repository on GitHub</li>
<li>Connect your local repository to GitHub:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git remote add origin https://github.com/yourusername/financial-ratio-calculator.git
</span></span><span style="display:flex;"><span>git push -u origin main
</span></span></code></pre></div><p>Now your code is on GitHub! You can share the link with colleagues, collaborate on improvements, and track issues.</p>
<h3 id="pull-requests-the-professional-way-to-collaborate">Pull Requests: The Professional Way to Collaborate</h3>
<p>When working with a team of financial analysts, direct changes to the main codebase can be risky. Pull requests (PRs) provide a mechanism for review and discussion before code is merged:</p>
<ol>
<li>Make your changes in a separate branch</li>
<li>Push that branch to GitHub</li>
<li>Open a PR to merge your branch into main</li>
<li>Have teammates review your code</li>
<li>Merge the PR once approved</li>
</ol>
<p>This workflow is perfect for finance teams where code accuracy is criticalâ€”imagine catching calculation errors before they make it into production reports!</p>
<h2 id="writing-clean-pep-8-compliant-code">Writing Clean, PEP 8 Compliant Code</h2>
<h3 id="what-is-pep-8">What is PEP 8?</h3>
<p>PEP 8 is Python&rsquo;s style guideâ€”a set of conventions for writing readable code. In finance, where you might be sharing models with auditors or other stakeholders, clean code is particularly important.</p>
<h3 id="key-pep-8-rules-for-finance-code">Key PEP 8 Rules for Finance Code</h3>
<ul>
<li><strong>Use 4 spaces for indentation</strong> (not tabs)</li>
<li><strong>Keep lines under 79 characters</strong> for better readability in documentation</li>
<li><strong>Use descriptive variable names</strong> that reflect financial concepts:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Bad</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calc</span>(a, b):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">/</span> b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Good</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_price_to_earnings_ratio</span>(stock_price, earnings_per_share):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> stock_price <span style="color:#f92672">/</span> earnings_per_share
</span></span></code></pre></div><ul>
<li><strong>Use whitespace appropriately</strong>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Bad</span>
</span></span><span style="display:flex;"><span>profit<span style="color:#f92672">=</span>revenue<span style="color:#f92672">-</span>expenses
</span></span><span style="display:flex;"><span>tax_amount<span style="color:#f92672">=</span>profit<span style="color:#f92672">*</span>tax_rate
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Good</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> revenue <span style="color:#f92672">-</span> expenses
</span></span><span style="display:flex;"><span>tax_amount <span style="color:#f92672">=</span> profit <span style="color:#f92672">*</span> tax_rate
</span></span></code></pre></div><h3 id="using-linters-flake8">Using Linters: flake8</h3>
<p>Linters automatically check your code for style issues. Let&rsquo;s set up flake8:</p>
<ol>
<li>Install flake8:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install flake8
</span></span></code></pre></div><ol start="2">
<li>Run flake8 on your code:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>flake8 ratio_calculator.py
</span></span></code></pre></div><p>It will show any style violations that need fixing.</p>
<ol start="3">
<li>For a real finance project, create a configuration file (<code>.flake8</code>) in your project root:</li>
</ol>
<pre tabindex="0"><code>[flake8]
max-line-length = 88
exclude = .git,__pycache__,build,dist
per-file-ignores =
    __init__.py: F401
</code></pre><h3 id="auto-formatting-with-black">Auto-formatting with black</h3>
<p>Why spend time manually formatting code when tools can do it for you?</p>
<ol>
<li>Install black:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install black
</span></span></code></pre></div><ol start="2">
<li>Format your code:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>black ratio_calculator.py
</span></span></code></pre></div><p>Black will automatically reformat your code to follow a consistent style.</p>
<ol start="3">
<li>For finance projects, you might want to create a <code>pyproject.toml</code> file to configure black:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">tool</span>.<span style="color:#a6e22e">black</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">line-length</span> = <span style="color:#ae81ff">88</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">target-version</span> = [<span style="color:#e6db74">&#39;py38&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">include</span> = <span style="color:#e6db74">&#39;\.pyi?$&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exclude</span> = <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">/(
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \.git
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.hg
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.mypy_cache
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.tox
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | \.venv
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | _build
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | buck-out
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | build
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  | dist
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><h3 id="organising-imports-with-isort">Organising Imports with isort</h3>
<p>isort automatically organises your import statements by type and alphabetically.</p>
<ol>
<li>Install isort:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install isort
</span></span></code></pre></div><ol start="2">
<li>Run isort on your file:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>isort ratio_calculator.py
</span></span></code></pre></div><p>For finance projects where you might be importing various data analysis libraries, isort keeps your imports clean and consistent:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Standard library imports</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> decimal <span style="color:#f92672">import</span> Decimal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Third-party imports</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> matplotlib <span style="color:#f92672">import</span> pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Local application imports</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .financial_models <span style="color:#f92672">import</span> discounted_cash_flow
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .ratio_analysis <span style="color:#f92672">import</span> calculate_current_ratio
</span></span></code></pre></div><h2 id="writing-effective-documentation">Writing Effective Documentation</h2>
<h3 id="docstrings-your-future-self-will-thank-you">Docstrings: Your Future Self Will Thank You</h3>
<p>Documentation isn&rsquo;t just for othersâ€”it&rsquo;s for you six months from now when you can&rsquo;t remember why you wrote that complex financial calculation a certain way.</p>
<h4 id="google-style-docstrings">Google Style Docstrings</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_npv</span>(cash_flows, discount_rate):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Net Present Value of a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows (list): List of cash flows, where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        discount_rate (float): Annual discount rate as a decimal (e.g., 0.1 for 10%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        float: Net Present Value
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Examples:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; calculate_npv([-1000, 200, 300, 400, 500], 0.1)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        152.07
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    npv <span style="color:#f92672">=</span> cash_flows[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># Initial investment</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, cf <span style="color:#f92672">in</span> enumerate(cash_flows[<span style="color:#ae81ff">1</span>:], <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">+=</span> cf <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> discount_rate) <span style="color:#f92672">**</span> i
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> round(npv, <span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><h4 id="numpy-style-docstrings">NumPy Style Docstrings</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_irr</span>(cash_flows):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Internal Rate of Return for a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Parameters
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ----------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    cash_flows : list or array-like
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        List of cash flows, where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    -------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    float
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        The Internal Rate of Return as a decimal
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Notes
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    -----
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Uses Newton&#39;s method to find the rate that makes NPV = 0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Examples
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    --------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &gt;&gt;&gt; calculate_irr([-1000, 300, 400, 500])
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    0.1548
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># IRR implementation...</span>
</span></span></code></pre></div><p>Choose one style and be consistent across your project.</p>
<h3 id="generating-documentation-with-sphinx">Generating Documentation with Sphinx</h3>
<p>For larger finance projects, automatic documentation generation with Sphinx is invaluable:</p>
<ol>
<li>Install Sphinx:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install sphinx sphinx-rtd-theme
</span></span></code></pre></div><ol start="2">
<li>Set up a docs directory:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir docs
</span></span><span style="display:flex;"><span>cd docs
</span></span><span style="display:flex;"><span>sphinx-quickstart
</span></span></code></pre></div><ol start="3">
<li>Configure <code>conf.py</code> to use a nice theme:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>html_theme <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;sphinx_rtd_theme&#39;</span>
</span></span></code></pre></div><ol start="4">
<li>Build your documentation:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sphinx-build -b html . _build
</span></span></code></pre></div><p>This creates HTML documentation you can share with your finance team.</p>
<h2 id="putting-it-all-together-a-finance-project-workflow">Putting It All Together: A Finance Project Workflow</h2>
<p>Let&rsquo;s walk through a complete workflow for a hypothetical financial analysis tool:</p>
<ol>
<li>
<p><strong>Set up your environment</strong>:</p>
<ul>
<li>Create a virtual environment</li>
<li>Install dependencies</li>
<li>Set up Git</li>
</ul>
</li>
<li>
<p><strong>Create your project structure</strong>:</p>
</li>
</ol>
<pre tabindex="0"><code>financial-analysis-toolkit/
â”œâ”€â”€ .git/
â”œâ”€â”€ .gitignore
â”œâ”€â”€ .flake8
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ README.md
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ setup.py
â”œâ”€â”€ docs/
â””â”€â”€ financial_toolkit/
    â”œâ”€â”€ __init__.py
    â”œâ”€â”€ ratio_analysis.py
    â”œâ”€â”€ valuation_models.py
    â”œâ”€â”€ risk_metrics.py
    â””â”€â”€ utilities.py
</code></pre><ol start="3">
<li>
<p><strong>Write your code with documentation</strong>:</p>
<ul>
<li>Start with core functions</li>
<li>Add comprehensive docstrings</li>
<li>Make small, focused commits</li>
</ul>
</li>
<li>
<p><strong>Validate with linters and formatters</strong>:</p>
<ul>
<li>Run black to format code</li>
<li>Run isort to organise imports</li>
<li>Run flake8 to check for issues</li>
</ul>
</li>
<li>
<p><strong>Create tests</strong> (more on this in the next post)</p>
</li>
<li>
<p><strong>Push to GitHub and collaborate</strong>:</p>
<ul>
<li>Share with colleagues</li>
<li>Use pull requests for reviews</li>
<li>Track issues and feature requests</li>
</ul>
</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>As a finance professional using Python, the practices outlined in this post will help you create reliable, maintainable code that you can confidently share with colleagues or the wider finance community. Taking the time to learn these professional techniques now will save you countless hours in the future and elevate the quality of your financial analysis tools.</p>
<p>In the next post, we&rsquo;ll dive into testing and debugging your financial codeâ€”critical skills for ensuring your calculations are accurate and robust.</p>
<h2 id="further-resources">Further Resources</h2>
<ul>
<li><a href="https://git-scm.com/doc">Git Documentation</a></li>
<li><a href="https://guides.github.com/">GitHub Guides</a></li>
<li><a href="https://pep8.org/">PEP 8 Style Guide</a></li>
<li><a href="https://realpython.com/documenting-python-code/">Real Python&rsquo;s Guide to Docstrings</a></li>
<li><a href="https://www.sphinx-doc.org/">Sphinx Documentation</a></li>
</ul>
<p><strong>Questions for Practice:</strong></p>
<ol>
<li>Try creating a Git repository for a simple financial calculator with at least three ratio calculations</li>
<li>Format your code with black and check it with flake8</li>
<li>Write Google-style docstrings for each function</li>
<li>Push your repository to GitHub and create a README explaining what your calculator does</li>
</ol>
]]></content:encoded></item><item><title>Part 6: Virtual Environments &amp; Packaging in Python</title><link>https://michaelbrunger.com/python-virtual-environments-packaging/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-virtual-environments-packaging/</guid><description>Discover how to create and manage virtual environments, install packages with pip, structure your own Python projects, and publish packages to PyPI with best practices.</description><content:encoded><![CDATA[<h1 id="virtual-environments--packaging-in-python">Virtual Environments &amp; Packaging in Python</h1>
<p>As your Python journey progresses and you start building more sophisticated financial tools, you&rsquo;ll inevitably need to use external libraries. This is where virtual environments and package management become crucial skills. In this post, I&rsquo;ll cover how to create isolated environments for your projects and manage dependencies effectively.</p>
<h2 id="why-virtual-environments-matter">Why Virtual Environments Matter</h2>
<p>Imagine this scenario: You&rsquo;re working on two different financial applications. One requires pandas version 1.3 for compatibility with other tools, while the other needs the latest pandas 2.0 for new features. Without virtual environments, you&rsquo;d be forced to choose one version for your entire system, potentially breaking one of your applications.</p>
<p>Virtual environments solve this problem by creating isolated Python installations for each project. Benefits include:</p>
<ul>
<li><strong>Dependency isolation:</strong> Each project can have its own versions of packages</li>
<li><strong>Reproducibility:</strong> Easily share environment specifications with colleagues</li>
<li><strong>Clean testing:</strong> Test in environments that match production settings</li>
<li><strong>Avoiding permission issues:</strong> Install packages without admin privileges</li>
</ul>
<h2 id="creating-and-managing-virtual-environments">Creating and Managing Virtual Environments</h2>
<p>Python comes with the <code>venv</code> module built-in, which is the recommended way to create virtual environments.</p>
<h3 id="creating-a-virtual-environment-on-windows">Creating a Virtual Environment on Windows</h3>
<p>Open Command Prompt and navigate to your project directory:</p>
<pre tabindex="0"><code>cd C:\Users\YourName\Documents\financial-analysis-project
</code></pre><p>Create a new virtual environment:</p>
<pre tabindex="0"><code>python -m venv env
</code></pre><p>This creates a directory named <code>env</code> containing a copy of the Python interpreter and the standard library.</p>
<h3 id="activating-the-virtual-environment">Activating the Virtual Environment</h3>
<p>On Windows:</p>
<pre tabindex="0"><code>env\Scripts\activate
</code></pre><p>You&rsquo;ll notice your command prompt changes to show the active environment:</p>
<pre tabindex="0"><code>(env) C:\Users\YourName\Documents\financial-analysis-project&gt;
</code></pre><p>Now any Python commands will use this isolated environment.</p>
<h3 id="notes-for-macoslinux">Notes for macOS/Linux</h3>
<p>The process is similar on macOS and Linux, with slight differences:</p>
<ul>
<li>Create: <code>python3 -m venv env</code></li>
<li>Activate: <code>source env/bin/activate</code></li>
</ul>
<h3 id="deactivating-the-virtual-environment">Deactivating the Virtual Environment</h3>
<p>When you&rsquo;re done working on your project:</p>
<pre tabindex="0"><code>deactivate
</code></pre><p>Your prompt will return to normal, and Python commands will use the system interpreter again.</p>
<h2 id="managing-packages-with-pip">Managing Packages with pip</h2>
<p><code>pip</code> is Python&rsquo;s package installer, and it&rsquo;s the primary tool for adding external libraries to your environments.</p>
<h3 id="installing-packages">Installing Packages</h3>
<p>Once your virtual environment is activated, install packages with:</p>
<pre tabindex="0"><code>pip install package-name
</code></pre><p>For example, to install key financial packages:</p>
<pre tabindex="0"><code>pip install pandas numpy matplotlib openpyxl xlrd
</code></pre><p>You can also specify exact versions:</p>
<pre tabindex="0"><code>pip install pandas==1.5.3
</code></pre><p>Or version ranges:</p>
<pre tabindex="0"><code>pip install pandas&gt;=1.4.0,&lt;2.0.0
</code></pre><h3 id="listing-installed-packages">Listing Installed Packages</h3>
<p>To see what&rsquo;s installed in your environment:</p>
<pre tabindex="0"><code>pip list
</code></pre><p>Output example:</p>
<pre tabindex="0"><code>Package         Version
--------------- -------
matplotlib      3.7.1
numpy           1.24.3
openpyxl        3.1.2
pandas          1.5.3
pip             23.1.2
python-dateutil 2.8.2
pytz            2023.3
setuptools      65.6.3
six             1.16.0
tzdata          2023.3
xlrd            2.0.1
</code></pre><h3 id="freezing-requirements">Freezing Requirements</h3>
<p>When you want to share your project, it&rsquo;s important to specify exactly which packages and versions it needs. The <code>freeze</code> command creates a requirements file:</p>
<pre tabindex="0"><code>pip freeze &gt; requirements.txt
</code></pre><p>This generates a text file with all installed packages and their versions:</p>
<pre tabindex="0"><code># requirements.txt contents
matplotlib==3.7.1
numpy==1.24.3
openpyxl==3.1.2
pandas==1.5.3
python-dateutil==2.8.2
pytz==2023.3
six==1.16.0
tzdata==2023.3
xlrd==2.0.1
</code></pre><h3 id="installing-from-requirements">Installing from Requirements</h3>
<p>When someone else (or you on a different machine) wants to recreate your environment:</p>
<pre tabindex="0"><code>pip install -r requirements.txt
</code></pre><p>This is essential for collaborative financial projects where everyone needs the same libraries and versions.</p>
<h2 id="practical-example-setting-up-a-financial-analysis-environment">Practical Example: Setting Up a Financial Analysis Environment</h2>
<p>Let&rsquo;s walk through creating a virtual environment for a financial analysis project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create project directory</span>
</span></span><span style="display:flex;"><span>mkdir financial_analysis
</span></span><span style="display:flex;"><span>cd financial_analysis
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create and activate virtual environment</span>
</span></span><span style="display:flex;"><span>python -m venv env
</span></span><span style="display:flex;"><span>env<span style="color:#ae81ff">\S</span>cripts<span style="color:#ae81ff">\a</span>ctivate
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install required packages</span>
</span></span><span style="display:flex;"><span>pip install pandas numpy matplotlib openpyxl xlsxwriter jupyter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Verify installations</span>
</span></span><span style="display:flex;"><span>pip list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create requirements.txt</span>
</span></span><span style="display:flex;"><span>pip freeze &gt; requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a marker file for your project</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#75715e"># Financial Analysis Project &gt; README.md</span>
</span></span></code></pre></div><h2 id="basic-package-structure">Basic Package Structure</h2>
<p>As your financial tools grow more complex, you might want to create your own Python packages that you can reuse across projects or share with colleagues.</p>
<h3 id="project-structure">Project Structure</h3>
<p>A typical Python package structure looks like this:</p>
<pre tabindex="0"><code>financial_tools/
â”‚
â”œâ”€â”€ pyproject.toml      # Modern project configuration
â”œâ”€â”€ README.md           # Documentation
â”œâ”€â”€ LICENSE             # License information
â”‚
â””â”€â”€ src/                # Source code directory
    â””â”€â”€ financial_tools/  # Actual package
        â”œâ”€â”€ __init__.py   # Makes it a package
        â”œâ”€â”€ analysis.py   # Analysis module
        â”œâ”€â”€ reporting.py  # Reporting module
        â””â”€â”€ utils.py      # Utility functions
</code></pre><h3 id="the-__init__py-file">The <code>__init__.py</code> File</h3>
<p>This file marks a directory as a Python package and can be used to define what gets imported when someone uses your package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># src/financial_tools/__init__.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Version information</span>
</span></span><span style="display:flex;"><span>__version__ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0.1.0&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Import commonly used functions for easier access</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .analysis <span style="color:#f92672">import</span> calculate_roi, calculate_npv
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> .reporting <span style="color:#f92672">import</span> generate_monthly_report
</span></span></code></pre></div><h3 id="setting-up-a-package-with-pyprojecttoml">Setting Up a Package with <code>pyproject.toml</code></h3>
<p>Modern Python packaging uses <code>pyproject.toml</code> for configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">build-system</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires</span> = [<span style="color:#e6db74">&#34;setuptools&gt;=42&#34;</span>, <span style="color:#e6db74">&#34;wheel&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build-backend</span> = <span style="color:#e6db74">&#34;setuptools.build_meta&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;financial_tools&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">version</span> = <span style="color:#e6db74">&#34;0.1.0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">description</span> = <span style="color:#e6db74">&#34;Tools for financial analysis and reporting&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">readme</span> = <span style="color:#e6db74">&#34;README.md&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">authors</span> = [
</span></span><span style="display:flex;"><span>    {<span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Your Name&#34;</span>, <span style="color:#a6e22e">email</span> = <span style="color:#e6db74">&#34;your.email@example.com&#34;</span>}
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">license</span> = {<span style="color:#a6e22e">text</span> = <span style="color:#e6db74">&#34;MIT&#34;</span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">classifiers</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dependencies</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pandas&gt;=1.3.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;numpy&gt;=1.20.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;matplotlib&gt;=3.4.0&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires-python</span> = <span style="color:#e6db74">&#34;&gt;=3.8&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>.<span style="color:#a6e22e">urls</span>]
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;Homepage&#34;</span> = <span style="color:#e6db74">&#34;https://github.com/yourusername/financial_tools&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;Bug Tracker&#34;</span> = <span style="color:#e6db74">&#34;https://github.com/yourusername/financial_tools/issues&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>.<span style="color:#a6e22e">optional-dependencies</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dev</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pytest&gt;=6.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;black&gt;=21.5b2&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;flake8&gt;=3.9&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">excel</span> = [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;openpyxl&gt;=3.0.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;xlsxwriter&gt;=1.4.0&#34;</span>,
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><h3 id="building-and-installing-your-package">Building and Installing Your Package</h3>
<p>With your package structure set up, you can install it in development mode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install -e .
</span></span></code></pre></div><p>This makes the package available but still editable in its original location.</p>
<h2 id="publishing-to-pypi">Publishing to PyPI</h2>
<p>When your financial package is ready to share with the world, you can publish it to the Python Package Index (PyPI).</p>
<h3 id="build-distribution-packages">Build Distribution Packages</h3>
<p>First, make sure you have the build tools:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install build twine
</span></span></code></pre></div><p>Then create distribution packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python -m build
</span></span></code></pre></div><p>This will create a directory called <code>dist</code> with distribution files.</p>
<h3 id="upload-to-pypi">Upload to PyPI</h3>
<p>Use <code>twine</code> to upload your package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>twine upload dist/*
</span></span></code></pre></div><p>You&rsquo;ll need to create an account on PyPI before uploading.</p>
<h3 id="versioning-best-practices">Versioning Best Practices</h3>
<p>For financial software where accuracy is critical, proper versioning is essential:</p>
<ol>
<li>
<p><strong>Use Semantic Versioning:</strong> MAJOR.MINOR.PATCH</p>
<ul>
<li>MAJOR: Incompatible API changes</li>
<li>MINOR: New features, backward-compatible</li>
<li>PATCH: Bug fixes, backward-compatible</li>
</ul>
</li>
<li>
<p><strong>Document Changes:</strong> Keep a CHANGELOG.md file</p>
</li>
<li>
<p><strong>Version Bumping:</strong> Update version in one place only (<code>pyproject.toml</code>)</p>
</li>
<li>
<p><strong>Git Tags:</strong> Tag releases in your version control system</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git tag -a v0.1.0 -m <span style="color:#e6db74">&#34;Initial release&#34;</span>
</span></span><span style="display:flex;"><span>git push origin v0.1.0
</span></span></code></pre></div><h2 id="real-world-example-financial-toolkit-package">Real-World Example: Financial Toolkit Package</h2>
<p>Let&rsquo;s create a minimal example of what a financial analysis package might look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># src/financial_tools/analysis.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roi</span>(gain, cost):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Return on Investment (ROI)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        gain: The profit or gain from the investment
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cost: The cost of the investment
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ROI as a decimal (e.g., 0.15 for 15%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (gain <span style="color:#f92672">-</span> cost) <span style="color:#f92672">/</span> cost
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_npv</span>(cash_flows, discount_rate):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Net Present Value
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows: List of cash flows where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        discount_rate: The discount rate as a decimal (e.g., 0.1 for 10%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        The Net Present Value of the cash flows
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    npv <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, cf <span style="color:#f92672">in</span> enumerate(cash_flows):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">+=</span> cf <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> discount_rate) <span style="color:#f92672">**</span> i
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> npv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_irr</span>(cash_flows, iterations<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>, guess<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Internal Rate of Return using iterative approach
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows: List of cash flows where the first element is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        iterations: Maximum number of iterations to perform
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        guess: Initial guess for the IRR
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Estimated IRR as a decimal
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    rate <span style="color:#f92672">=</span> guess
</span></span><span style="display:flex;"><span>    step <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.05</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(iterations):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">=</span> calculate_npv(cash_flows, rate)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> abs(npv) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.0001</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># NPV is very close to zero, we found the IRR</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> rate
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> npv <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># NPV is positive, increase the rate</span>
</span></span><span style="display:flex;"><span>            rate <span style="color:#f92672">+=</span> step
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># NPV is negative, decrease the rate</span>
</span></span><span style="display:flex;"><span>            rate <span style="color:#f92672">-=</span> step
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Reduce step size to improve accuracy</span>
</span></span><span style="display:flex;"><span>        step <span style="color:#f92672">/=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Return best approximation after iterations</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> rate
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># src/financial_tools/reporting.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_summary_report</span>(data, title<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Financial Summary&#34;</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Generate a simple text-based financial report
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        data: Dictionary of financial metrics
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        title: Report title
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Formatted report as a string
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    now <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create header</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>title<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;=&#39;</span> <span style="color:#f92672">*</span> len(title)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Generated: </span><span style="color:#e6db74">{</span>now<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %H:%M&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add metrics</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> key, value <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Format numbers nicely</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isinstance(value, (int, float)):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> abs(value) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1000</span>:
</span></span><span style="display:flex;"><span>                formatted_value <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">,.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                formatted_value <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            formatted_value <span style="color:#f92672">=</span> str(value)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        report <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>key<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>formatted_value<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> report
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">format_as_percentage</span>(value, decimal_places<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Format a decimal as a percentage string&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>value <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.</span><span style="color:#e6db74">{</span>decimal_places<span style="color:#e6db74">}</span><span style="color:#e6db74">f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>
</span></span></code></pre></div><h3 id="using-the-package">Using the Package</h3>
<p>Once installed, users could easily import and use your financial toolkit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_tools.analysis <span style="color:#f92672">import</span> calculate_roi, calculate_npv
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_tools.reporting <span style="color:#f92672">import</span> generate_summary_report, format_as_percentage
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate investment metrics</span>
</span></span><span style="display:flex;"><span>investment_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">50000</span>
</span></span><span style="display:flex;"><span>annual_returns <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">50000</span>, <span style="color:#ae81ff">12000</span>, <span style="color:#ae81ff">15000</span>, <span style="color:#ae81ff">18000</span>, <span style="color:#ae81ff">20000</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> calculate_roi(sum(annual_returns) <span style="color:#f92672">+</span> investment_cost, investment_cost)
</span></span><span style="display:flex;"><span>npv <span style="color:#f92672">=</span> calculate_npv(annual_returns, <span style="color:#ae81ff">0.08</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate report</span>
</span></span><span style="display:flex;"><span>report_data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Investment Amount&#34;</span>: investment_cost,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Total Returns&#34;</span>: sum(annual_returns[<span style="color:#ae81ff">1</span>:]),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;ROI&#34;</span>: format_as_percentage(roi),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;NPV (8%)&#34;</span>: npv,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Break-even&#34;</span>: <span style="color:#e6db74">&#34;Year 3&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>report <span style="color:#f92672">=</span> generate_summary_report(report_data, <span style="color:#e6db74">&#34;Investment Analysis&#34;</span>)
</span></span><span style="display:flex;"><span>print(report)
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Virtual environments and proper packaging are essential skills for any Python developer, especially when working on financial applications where consistency and reproducibility are critical. By mastering these concepts, you&rsquo;ll ensure your projects are well-organisd, shareable, and isolated from potential dependency conflicts.</p>
<p>In the next post, we&rsquo;ll dive into code quality and collaboration tools that will help you write cleaner, more maintainable financial applications and work effectively with others.</p>
<p><strong>Practice Exercise:</strong> Create a virtual environment for a financial dashboard project. Install pandas, matplotlib, and Flask. Create a requirements.txt file and share it with a colleague (or another computer) to test the reproducibility of your environment.</p>
]]></content:encoded></item><item><title>Part 5: Functions, Modules &amp; File I/O in Python</title><link>https://michaelbrunger.com/python-functions-modules-file-io/</link><pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-functions-modules-file-io/</guid><description>Learn how to define and use functions, organize code into modules, leverage Python&amp;#39;s Standard Library, and perform file operations for reading and writing data.</description><content:encoded><![CDATA[<h1 id="functions-modules--file-io-in-python">Functions, Modules &amp; File I/O in Python</h1>
<p>These next concepts incredibly useful for organising code and working with external data. Let&rsquo;s explore how Python handles functions, modules, and file operations - all essential skills for financial analysis and reporting.</p>
<h2 id="defining-and-calling-functions">Defining and Calling Functions</h2>
<p>Functions are reusable blocks of code that perform specific tasks. They help keep your code DRY (Don&rsquo;t Repeat Yourself) and make it more maintainable.</p>
<h3 id="basic-function-syntax">Basic Function Syntax</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">function_name</span>(parameters):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Docstring explaining what the function does.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Function body</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result  <span style="color:#75715e"># Optional</span>
</span></span></code></pre></div><p>Here&rsquo;s a simple function that calculates compound interest:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_compound_interest</span>(principal, rate, time, compounds_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate compound interest.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        principal: Initial investment amount
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        rate: Annual interest rate (as decimal, e.g., 0.05 for 5%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        time: Time period in years
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        compounds_per_year: Number of times interest compounds per year (default=1)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        The final amount after compound interest
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> principal <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> rate<span style="color:#f92672">/</span>compounds_per_year)<span style="color:#f92672">**</span>(compounds_per_year<span style="color:#f92672">*</span>time)
</span></span></code></pre></div><p>Let&rsquo;s call this function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate investment growth at 5% interest, compounded quarterly for 10 years</span>
</span></span><span style="display:flex;"><span>initial_investment <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>final_amount <span style="color:#f92672">=</span> calculate_compound_interest(
</span></span><span style="display:flex;"><span>    principal<span style="color:#f92672">=</span>initial_investment, 
</span></span><span style="display:flex;"><span>    rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>, 
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, 
</span></span><span style="display:flex;"><span>    compounds_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>initial_investment<span style="color:#e6db74">}</span><span style="color:#e6db74"> will grow to $</span><span style="color:#e6db74">{</span>final_amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> after 10 years&#34;</span>)
</span></span></code></pre></div><p><strong>Output:</strong></p>
<pre tabindex="0"><code>$10000 will grow to $16470.09 after 10 years
</code></pre><h3 id="function-arguments">Function Arguments</h3>
<p>Python offers flexible ways to handle function arguments:</p>
<h4 id="positional-vs-keyword-arguments">Positional vs. Keyword Arguments</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Positional arguments (order matters)</span>
</span></span><span style="display:flex;"><span>result1 <span style="color:#f92672">=</span> calculate_compound_interest(<span style="color:#ae81ff">10000</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Keyword arguments (order doesn&#39;t matter)</span>
</span></span><span style="display:flex;"><span>result2 <span style="color:#f92672">=</span> calculate_compound_interest(
</span></span><span style="display:flex;"><span>    rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>,
</span></span><span style="display:flex;"><span>    principal<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>,
</span></span><span style="display:flex;"><span>    compounds_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h4 id="default-parameter-values">Default Parameter Values</h4>
<p>In our function, <code>compounds_per_year=1</code> provides a default value if not specified:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using the default compounds_per_year (annual compounding)</span>
</span></span><span style="display:flex;"><span>annual_result <span style="color:#f92672">=</span> calculate_compound_interest(<span style="color:#ae81ff">10000</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;With annual compounding: $</span><span style="color:#e6db74">{</span>annual_result<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h4 id="variable-number-of-arguments">Variable Number of Arguments</h4>
<p>For functions that need to accept varying numbers of arguments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># *args collects extra positional arguments as a tuple</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sum_all_values</span>(<span style="color:#f92672">*</span>args):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Sum any number of values.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum(args)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># **kwargs collects extra keyword arguments as a dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_financial_report</span>(report_date, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Create a financial report with flexible data points.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;date&#34;</span>: report_date}
</span></span><span style="display:flex;"><span>    report<span style="color:#f92672">.</span>update(kwargs)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> report
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example usage</span>
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> sum_all_values(<span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">75</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total: $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>report <span style="color:#f92672">=</span> create_financial_report(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;2025-04-28&#34;</span>,
</span></span><span style="display:flex;"><span>    revenue<span style="color:#f92672">=</span><span style="color:#ae81ff">150000</span>,
</span></span><span style="display:flex;"><span>    expenses<span style="color:#f92672">=</span><span style="color:#ae81ff">95000</span>,
</span></span><span style="display:flex;"><span>    net_profit<span style="color:#f92672">=</span><span style="color:#ae81ff">55000</span>,
</span></span><span style="display:flex;"><span>    profit_margin<span style="color:#f92672">=</span><span style="color:#ae81ff">0.37</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(report)
</span></span></code></pre></div><h2 id="variable-scope-and-namespaces">Variable Scope and Namespaces</h2>
<p>Understanding scope is crucial for debugging and writing clean code.</p>
<h3 id="local-vs-global-scope">Local vs. Global Scope</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>total_assets <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000000</span>  <span style="color:#75715e"># Global variable</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roi</span>(profit):
</span></span><span style="display:flex;"><span>    investment <span style="color:#f92672">=</span> <span style="color:#ae81ff">100000</span>  <span style="color:#75715e"># Local variable</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> profit <span style="color:#f92672">/</span> investment <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># investment is not accessible here</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total assets: $</span><span style="color:#e6db74">{</span>total_assets<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> calculate_roi(<span style="color:#ae81ff">25000</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;ROI: </span><span style="color:#e6db74">{</span>roi<span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span></code></pre></div><p>Local variables exist only within their function. Global variables can be accessed inside functions, but to modify them, you need the <code>global</code> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">5000</span>  <span style="color:#75715e"># Global variable</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">deposit</span>(amount):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> balance  <span style="color:#75715e"># Tell Python we want to modify the global variable</span>
</span></span><span style="display:flex;"><span>    balance <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> balance
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">withdraw</span>(amount):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> balance
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> balance <span style="color:#f92672">&gt;=</span> amount:
</span></span><span style="display:flex;"><span>        balance <span style="color:#f92672">-=</span> amount
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> balance
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Insufficient funds&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Initial balance: $</span><span style="color:#e6db74">{</span>balance<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>deposit(<span style="color:#ae81ff">1000</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;After deposit: $</span><span style="color:#e6db74">{</span>balance<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>withdraw(<span style="color:#ae81ff">2000</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;After withdrawal: $</span><span style="color:#e6db74">{</span>balance<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="namespaces">Namespaces</h3>
<p>Python uses namespaces to organise names and avoid conflicts. Each module, function, and class has its own namespace.</p>
<h2 id="organising-code-into-modules-and-packages">Organising Code into Modules and Packages</h2>
<p>As your financial scripts grow, organising code becomes essential.</p>
<h3 id="modules">Modules</h3>
<p>A module is simply a <code>.py</code> file containing code. Let&rsquo;s create a financial utilities module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># financial_utils.py</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roi</span>(profit, investment):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate Return on Investment as a percentage.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (profit <span style="color:#f92672">/</span> investment) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_npv</span>(cash_flows, discount_rate):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Net Present Value of a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows: List of cash flows, where index 0 is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        discount_rate: Discount rate as decimal (e.g., 0.1 for 10%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    npv <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> t, cash_flow <span style="color:#f92672">in</span> enumerate(cash_flows):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">+=</span> cash_flow <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> discount_rate) <span style="color:#f92672">**</span> t
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> npv
</span></span></code></pre></div><p>To use this module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># main.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> financial_utils
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate ROI</span>
</span></span><span style="display:flex;"><span>investment <span style="color:#f92672">=</span> <span style="color:#ae81ff">50000</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> <span style="color:#ae81ff">12500</span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> financial_utils<span style="color:#f92672">.</span>calculate_roi(profit, investment)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;ROI: </span><span style="color:#e6db74">{</span>roi<span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate NPV of a project</span>
</span></span><span style="display:flex;"><span>cash_flows <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">30000</span>, <span style="color:#ae81ff">35000</span>, <span style="color:#ae81ff">45000</span>, <span style="color:#ae81ff">50000</span>]  <span style="color:#75715e"># Initial investment + 4 years of returns</span>
</span></span><span style="display:flex;"><span>npv <span style="color:#f92672">=</span> financial_utils<span style="color:#f92672">.</span>calculate_npv(cash_flows, <span style="color:#ae81ff">0.08</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;NPV: $</span><span style="color:#e6db74">{</span>npv<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>You can also import specific functions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_utils <span style="color:#f92672">import</span> calculate_roi, calculate_npv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Now use without the module prefix</span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> calculate_roi(<span style="color:#ae81ff">12500</span>, <span style="color:#ae81ff">50000</span>)
</span></span></code></pre></div><h3 id="packages">Packages</h3>
<p>Packages are directories containing multiple modules. They require an <code>__init__.py</code> file (which can be empty) to be recognised as packages.</p>
<pre tabindex="0"><code>finance_package/
â”œâ”€â”€ __init__.py
â”œâ”€â”€ analysis.py
â”œâ”€â”€ reporting.py
â””â”€â”€ utils.py
</code></pre><p>Using packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Import specific modules from a package</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> finance_package <span style="color:#f92672">import</span> analysis, reporting
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Import specific functions from a module in a package</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> finance_package.utils <span style="color:#f92672">import</span> calculate_roi
</span></span></code></pre></div><h2 id="exploring-the-standard-library">Exploring the Standard Library</h2>
<p>Python comes with a rich standard library. Here are some modules particularly useful for financial applications:</p>
<h3 id="math-module">Math Module</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> math
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate loan payment using the PMT formula</span>
</span></span><span style="display:flex;"><span>principal <span style="color:#f92672">=</span> <span style="color:#ae81ff">250000</span>
</span></span><span style="display:flex;"><span>annual_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.04</span>  <span style="color:#75715e"># 4%</span>
</span></span><span style="display:flex;"><span>years <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>monthly_rate <span style="color:#f92672">=</span> annual_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>num_payments <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Monthly payment formula</span>
</span></span><span style="display:flex;"><span>payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (monthly_rate <span style="color:#f92672">*</span> math<span style="color:#f92672">.</span>pow(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate, num_payments)) <span style="color:#f92672">/</span> (math<span style="color:#f92672">.</span>pow(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate, num_payments) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly mortgage payment: $</span><span style="color:#e6db74">{</span>payment<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="random-module">Random Module</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Simulate stock price movements (very simplified)</span>
</span></span><span style="display:flex;"><span>starting_price <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>daily_volatility <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.015</span>  <span style="color:#75715e"># 1.5%</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prices <span style="color:#f92672">=</span> [starting_price]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> day <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">30</span>):
</span></span><span style="display:flex;"><span>    change <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>normalvariate(<span style="color:#ae81ff">0</span>, daily_volatility)
</span></span><span style="display:flex;"><span>    new_price <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> change)
</span></span><span style="display:flex;"><span>    prices<span style="color:#f92672">.</span>append(new_price)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Starting price: $</span><span style="color:#e6db74">{</span>starting_price<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Ending price: $</span><span style="color:#e6db74">{</span>prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;30-day return: </span><span style="color:#e6db74">{</span>(prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">/</span>prices[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span></code></pre></div><h3 id="datetime-module">Datetime Module</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime, timedelta
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate business days between dates</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">business_days_between</span>(start_date, end_date):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Count business days between two dates (excluding weekends).&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    days <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    current_date <span style="color:#f92672">=</span> start_date
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> current_date <span style="color:#f92672">&lt;=</span> end_date:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Monday = 0, Sunday = 6</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> current_date<span style="color:#f92672">.</span>weekday() <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>:  <span style="color:#75715e"># Only count weekdays (0-4)</span>
</span></span><span style="display:flex;"><span>            days <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        current_date <span style="color:#f92672">+=</span> timedelta(days<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> days
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate days until fiscal year end</span>
</span></span><span style="display:flex;"><span>today <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>fiscal_year_end <span style="color:#f92672">=</span> datetime(today<span style="color:#f92672">.</span>year, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">31</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> today <span style="color:#f92672">&gt;</span> fiscal_year_end:
</span></span><span style="display:flex;"><span>    fiscal_year_end <span style="color:#f92672">=</span> datetime(today<span style="color:#f92672">.</span>year <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">31</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>business_days <span style="color:#f92672">=</span> business_days_between(today, fiscal_year_end)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Business days until fiscal year end: </span><span style="color:#e6db74">{</span>business_days<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="os-and-sys-modules">OS and Sys Modules</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the current working directory (useful for file paths)</span>
</span></span><span style="display:flex;"><span>current_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getcwd()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Current directory: </span><span style="color:#e6db74">{</span>current_dir<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List all Excel files in the current directory</span>
</span></span><span style="display:flex;"><span>excel_files <span style="color:#f92672">=</span> [file <span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir() <span style="color:#66d9ef">if</span> file<span style="color:#f92672">.</span>endswith((<span style="color:#e6db74">&#39;.xlsx&#39;</span>, <span style="color:#e6db74">&#39;.xls&#39;</span>))]
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Excel files found:&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> excel_files:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;- </span><span style="color:#e6db74">{</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get Python version and platform information</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Python version: </span><span style="color:#e6db74">{</span>sys<span style="color:#f92672">.</span>version<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Platform: </span><span style="color:#e6db74">{</span>sys<span style="color:#f92672">.</span>platform<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h2 id="reading-fromwriting-to-text-files">Reading from/Writing to Text Files</h2>
<p>File operations are essential for financial data analysis, reporting, and automation.</p>
<h3 id="opening-and-closing-files">Opening and Closing Files</h3>
<p>The basic pattern is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Open a file in read mode</span>
</span></span><span style="display:flex;"><span>file <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;data.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Do something with the file</span>
</span></span><span style="display:flex;"><span>content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Close the file</span>
</span></span><span style="display:flex;"><span>file<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>However, this approach has problems if an error occurs before <code>close()</code>. The preferred way is using the <code>with</code> statement:</p>
<h3 id="the-with-statement">The with Statement</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Automatically handles proper closing of the file</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;data.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># File processing here</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># File is automatically closed when the block ends</span>
</span></span></code></pre></div><h3 id="reading-text-files">Reading Text Files</h3>
<p>Let&rsquo;s work with a sample CSV file containing financial transactions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Sample contents of transactions.csv:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># date,description,amount</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-15,Office supplies,-129.99</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-18,Client payment,1500.00</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-22,Software subscription,-49.99</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-30,Consulting fees,2750.00</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Read the entire file as a single string</span>
</span></span><span style="display:flex;"><span>    content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;File contents:&#34;</span>)
</span></span><span style="display:flex;"><span>    print(content)
</span></span></code></pre></div><p>Reading line by line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Skip header</span>
</span></span><span style="display:flex;"><span>    header <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>readline()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Initialise counters</span>
</span></span><span style="display:flex;"><span>    total_income <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    total_expenses <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process each transaction</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Remove whitespace and split by comma</span>
</span></span><span style="display:flex;"><span>        date, description, amount <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;,&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Convert amount to float</span>
</span></span><span style="display:flex;"><span>        amount <span style="color:#f92672">=</span> float(amount)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            total_income <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            total_expenses <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total income: $</span><span style="color:#e6db74">{</span>total_income<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total expenses: $</span><span style="color:#e6db74">{</span>total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Net cash flow: $</span><span style="color:#e6db74">{</span>total_income <span style="color:#f92672">+</span> total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="writing-to-text-files">Writing to Text Files</h3>
<p>Let&rsquo;s create a simple financial report:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Sample transaction data</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-15&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Office supplies&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">129.99</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-18&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Client payment&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#ae81ff">1500.00</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-22&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Software subscription&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">49.99</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-30&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Consulting fees&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#ae81ff">2750.00</span>}
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate summary statistics</span>
</span></span><span style="display:flex;"><span>total_income <span style="color:#f92672">=</span> sum(t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> transactions <span style="color:#66d9ef">if</span> t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>total_expenses <span style="color:#f92672">=</span> sum(t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> transactions <span style="color:#66d9ef">if</span> t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>net_cash_flow <span style="color:#f92672">=</span> total_income <span style="color:#f92672">+</span> total_expenses
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Write the report to a file</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;financial_report.txt&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> report_file:
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;MONTHLY FINANCIAL REPORT</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;======================</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;TRANSACTION DETAILS:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;-----------------</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> transactions:
</span></span><span style="display:flex;"><span>        amount_str <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>abs(t[<span style="color:#e6db74">&#39;amount&#39;</span>])<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            amount_str <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;-</span><span style="color:#e6db74">{</span>amount_str<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>t[<span style="color:#e6db74">&#39;date&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">{</span>t[<span style="color:#e6db74">&#39;description&#39;</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">20</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">{</span>amount_str<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">SUMMARY:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;--------</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Income:    $</span><span style="color:#e6db74">{</span>total_income<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Expenses:  $</span><span style="color:#e6db74">{</span>total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Net Cash Flow:   $</span><span style="color:#e6db74">{</span>net_cash_flow<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Financial report generated: financial_report.txt&#34;</span>)
</span></span></code></pre></div><h3 id="handling-different-file-modes">Handling Different File Modes</h3>
<ul>
<li><code>'r'</code>: Read (default)</li>
<li><code>'w'</code>: Write (creates new file or truncates existing)</li>
<li><code>'a'</code>: Append (adds to end of file)</li>
<li><code>'r+'</code>: Read and write</li>
<li><code>'b'</code>: Binary mode (used with other modes, e.g., <code>'rb'</code>)</li>
</ul>
<h2 id="working-with-csv-files">Working with CSV Files</h2>
<p>While you can process CSV files manually as shown above, Python&rsquo;s <code>csv</code> module makes it easier:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> csv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reading CSV</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    csv_reader <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>DictReader(file)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process each row as a dictionary</span>
</span></span><span style="display:flex;"><span>    transactions <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> csv_reader:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Convert amount from string to float</span>
</span></span><span style="display:flex;"><span>        row[<span style="color:#e6db74">&#39;amount&#39;</span>] <span style="color:#f92672">=</span> float(row[<span style="color:#e6db74">&#39;amount&#39;</span>])
</span></span><span style="display:flex;"><span>        transactions<span style="color:#f92672">.</span>append(row)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Loaded </span><span style="color:#e6db74">{</span>len(transactions)<span style="color:#e6db74">}</span><span style="color:#e6db74"> transactions&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Writing CSV</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;budget_forecast.csv&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>, newline<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Define column headers</span>
</span></span><span style="display:flex;"><span>    fieldnames <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;month&#39;</span>, <span style="color:#e6db74">&#39;revenue&#39;</span>, <span style="color:#e6db74">&#39;expenses&#39;</span>, <span style="color:#e6db74">&#39;profit&#39;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create CSV writer</span>
</span></span><span style="display:flex;"><span>    csv_writer <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>DictWriter(file, fieldnames<span style="color:#f92672">=</span>fieldnames)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Write header row</span>
</span></span><span style="display:flex;"><span>    csv_writer<span style="color:#f92672">.</span>writeheader()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Write data rows</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Simple forecast model (for demonstration)</span>
</span></span><span style="display:flex;"><span>        revenue <span style="color:#f92672">=</span> <span style="color:#ae81ff">15000</span> <span style="color:#f92672">+</span> (month <span style="color:#f92672">*</span> <span style="color:#ae81ff">500</span>)  <span style="color:#75715e"># Increasing monthly</span>
</span></span><span style="display:flex;"><span>        expenses <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span> <span style="color:#f92672">+</span> (month <span style="color:#f92672">*</span> <span style="color:#ae81ff">200</span>)  <span style="color:#75715e"># Increasing but slower</span>
</span></span><span style="display:flex;"><span>        profit <span style="color:#f92672">=</span> revenue <span style="color:#f92672">-</span> expenses
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        csv_writer<span style="color:#f92672">.</span>writerow({
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;month&#39;</span>: <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;2025-</span><span style="color:#e6db74">{</span>month<span style="color:#e6db74">:</span><span style="color:#e6db74">02d</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;revenue&#39;</span>: revenue,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;expenses&#39;</span>: expenses,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;profit&#39;</span>: profit
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Budget forecast generated: budget_forecast.csv&#34;</span>)
</span></span></code></pre></div><h2 id="practical-example-expense-analyser">Practical Example: Expense Analyser</h2>
<p>Let&rsquo;s combine everything we&rsquo;ve learned into a practical financial tool that:</p>
<ol>
<li>Reads expense data from a CSV file</li>
<li>Categorises and analyses expenses</li>
<li>Generates a report with summary statistics</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> csv
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">load_expenses</span>(filename):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Load expense data from a CSV file.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    expenses <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(filename, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>        reader <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>DictReader(file)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> reader:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Convert amount to float and date to datetime</span>
</span></span><span style="display:flex;"><span>            row[<span style="color:#e6db74">&#39;amount&#39;</span>] <span style="color:#f92672">=</span> float(row[<span style="color:#e6db74">&#39;amount&#39;</span>])
</span></span><span style="display:flex;"><span>            row[<span style="color:#e6db74">&#39;date&#39;</span>] <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>strptime(row[<span style="color:#e6db74">&#39;date&#39;</span>], <span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>            expenses<span style="color:#f92672">.</span>append(row)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> expenses
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">categorize_expenses</span>(expenses):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Group expenses by category.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    categories <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>        category <span style="color:#f92672">=</span> expense[<span style="color:#e6db74">&#39;category&#39;</span>]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> category <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> categories:
</span></span><span style="display:flex;"><span>            categories[category] <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        categories[category]<span style="color:#f92672">.</span>append(expense)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> categories
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_category_totals</span>(categories):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate total amount for each expense category.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    totals <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> category, expenses <span style="color:#f92672">in</span> categories<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        totals[category] <span style="color:#f92672">=</span> sum(expense[<span style="color:#e6db74">&#39;amount&#39;</span>] <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> expenses)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> totals
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_expense_report</span>(expenses, categories, totals, output_file):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Generate a detailed expense report.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    total_expenses <span style="color:#f92672">=</span> sum(totals<span style="color:#f92672">.</span>values())
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write header</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;EXPENSE ANALYSIS REPORT</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;======================</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write summary</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Expenses: $</span><span style="color:#e6db74">{</span>total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Number of Transactions: </span><span style="color:#e6db74">{</span>len(expenses)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Date Range: </span><span style="color:#e6db74">{</span>min(e[<span style="color:#e6db74">&#39;date&#39;</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> expenses)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> to </span><span style="color:#e6db74">{</span>max(e[<span style="color:#e6db74">&#39;date&#39;</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> expenses)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write category breakdown</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;EXPENSE BREAKDOWN BY CATEGORY</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;----------------------------</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Sort categories by total amount (descending)</span>
</span></span><span style="display:flex;"><span>        sorted_categories <span style="color:#f92672">=</span> sorted(totals<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> sorted_categories:
</span></span><span style="display:flex;"><span>            percentage <span style="color:#f92672">=</span> (amount <span style="color:#f92672">/</span> total_expenses) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">20</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> (</span><span style="color:#e6db74">{</span>percentage<span style="color:#e6db74">:</span><span style="color:#e6db74">.1f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write transaction details for each category</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">DETAILED TRANSACTIONS BY CATEGORY</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;--------------------------------</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> sorted_categories:
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#f92672">.</span>upper()<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;-&#39;</span> <span style="color:#f92672">*</span> len(category)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Sort expenses by date</span>
</span></span><span style="display:flex;"><span>            sorted_expenses <span style="color:#f92672">=</span> sorted(categories[category], key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#e6db74">&#39;date&#39;</span>])
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> sorted_expenses:
</span></span><span style="display:flex;"><span>                date_str <span style="color:#f92672">=</span> expense[<span style="color:#e6db74">&#39;date&#39;</span>]<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>                file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>date_str<span style="color:#e6db74">}</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">{</span>expense[<span style="color:#e6db74">&#39;description&#39;</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">30</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> | $</span><span style="color:#e6db74">{</span>expense[<span style="color:#e6db74">&#39;amount&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Add category subtotal</span>
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;SUBTOTAL:&#39;</span><span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">41</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Usage example (assuming we have an expenses.csv file)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Check if the input file exists</span>
</span></span><span style="display:flex;"><span>    input_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;expenses.csv&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(input_file):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error: File &#39;</span><span style="color:#e6db74">{</span>input_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; not found.&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Creating a sample expense file for demonstration...&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a sample file for demonstration</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(input_file, <span style="color:#e6db74">&#39;w&#39;</span>, newline<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>            writer <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>writer(file)
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;category&#39;</span>, <span style="color:#e6db74">&#39;description&#39;</span>, <span style="color:#e6db74">&#39;amount&#39;</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-05&#39;</span>, <span style="color:#e6db74">&#39;Office&#39;</span>, <span style="color:#e6db74">&#39;Printer paper&#39;</span>, <span style="color:#ae81ff">24.99</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-10&#39;</span>, <span style="color:#e6db74">&#39;Software&#39;</span>, <span style="color:#e6db74">&#39;Accounting software&#39;</span>, <span style="color:#ae81ff">89.99</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-15&#39;</span>, <span style="color:#e6db74">&#39;Office&#39;</span>, <span style="color:#e6db74">&#39;Desk organiser&#39;</span>, <span style="color:#ae81ff">32.50</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-18&#39;</span>, <span style="color:#e6db74">&#39;Travel&#39;</span>, <span style="color:#e6db74">&#39;Client meeting transportation&#39;</span>, <span style="color:#ae81ff">45.75</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-22&#39;</span>, <span style="color:#e6db74">&#39;Software&#39;</span>, <span style="color:#e6db74">&#39;Cloud storage subscription&#39;</span>, <span style="color:#ae81ff">9.99</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-25&#39;</span>, <span style="color:#e6db74">&#39;Meals&#39;</span>, <span style="color:#e6db74">&#39;Team lunch&#39;</span>, <span style="color:#ae81ff">87.50</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-29&#39;</span>, <span style="color:#e6db74">&#39;Office&#39;</span>, <span style="color:#e6db74">&#39;Printer ink&#39;</span>, <span style="color:#ae81ff">65.85</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-02-03&#39;</span>, <span style="color:#e6db74">&#39;Travel&#39;</span>, <span style="color:#e6db74">&#39;Conference registration&#39;</span>, <span style="color:#ae81ff">299.00</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-02-07&#39;</span>, <span style="color:#e6db74">&#39;Meals&#39;</span>, <span style="color:#e6db74">&#39;Client dinner&#39;</span>, <span style="color:#ae81ff">125.40</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-02-15&#39;</span>, <span style="color:#e6db74">&#39;Software&#39;</span>, <span style="color:#e6db74">&#39;Data analysis tool&#39;</span>, <span style="color:#ae81ff">149.99</span>])
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Sample file &#39;</span><span style="color:#e6db74">{</span>input_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; created.&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process the expense data</span>
</span></span><span style="display:flex;"><span>    expenses <span style="color:#f92672">=</span> load_expenses(input_file)
</span></span><span style="display:flex;"><span>    categories <span style="color:#f92672">=</span> categorize_expenses(expenses)
</span></span><span style="display:flex;"><span>    totals <span style="color:#f92672">=</span> calculate_category_totals(categories)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Generate the report</span>
</span></span><span style="display:flex;"><span>    output_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;expense_report.txt&#39;</span>
</span></span><span style="display:flex;"><span>    generate_expense_report(expenses, categories, totals, output_file)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Expense report generated: </span><span style="color:#e6db74">{</span>output_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>This script demonstrates:</p>
<ul>
<li>Function definitions with docstrings</li>
<li>File I/O with the <code>with</code> statement</li>
<li>CSV processing</li>
<li>Module imports and usage</li>
<li>Error handling</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Functions, modules, and file I/O form the backbone of most Python applications, especially for financial tasks. By mastering these concepts, you&rsquo;ll be well-equipped to build tools for financial analysis, reporting, and automation.</p>
<p>In the next post, we&rsquo;ll explore virtual environments and package management, which will help you manage dependencies for larger projects.</p>
<p><strong>Practice Exercise:</strong> Try extending the expense analyser to calculate monthly trends or generate a simple visualisation of spending by category. This will help reinforce the concepts we&rsquo;ve covered while building something useful for your financial toolkit.</p>
]]></content:encoded></item><item><title>Part 4: Core Data Structures in Python</title><link>https://michaelbrunger.com/python-core-data-structures/</link><pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-core-data-structures/</guid><description>Explore Python&amp;#39;s essential data structures: lists, tuples, dictionaries, and sets. Learn creation methods, manipulation techniques, and guidelines for choosing the right structure for your tasks.</description><content:encoded><![CDATA[<h1 id="post-4-core-data-structures">Post 4: Core Data Structures</h1>
<p>Welcome to the fourth post in my Python learning journey. So far, we&rsquo;ve installed Python, set up a development environment, and explored the basic syntax. Now it&rsquo;s time to dive deeper into Python&rsquo;s core data structures; the building blocks you&rsquo;ll use to organise and manipulate data in your programs.</p>
<p>In this post, we&rsquo;ll cover:</p>
<ol>
<li>Lists: Python&rsquo;s versatile sequence type</li>
<li>Tuples: Immutable collections</li>
<li>Dictionaries: Key-value mapping</li>
<li>Sets: Unique value collections</li>
<li>Choosing the right data structure</li>
</ol>
<p>I&rsquo;ve found these data structures similar to concepts we use every day; lists are like columns in spreadsheets, dictionaries resemble lookup tables, and sets are perfect for tracking unique items like account codes.</p>
<hr>
<h2 id="1-lists">1. Lists</h2>
<p>Lists are ordered, mutable (changeable) collections that can contain items of different types. They&rsquo;re perhaps the most commonly used data structure in Python.</p>
<h3 id="11-creating-lists">1.1 Creating Lists</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty list</span>
</span></span><span style="display:flex;"><span>empty_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List with initial values</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>mixed_data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">42</span>, <span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#66d9ef">True</span>, <span style="color:#ae81ff">3.14</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating a list with the list() constructor</span>
</span></span><span style="display:flex;"><span>chars <span style="color:#f92672">=</span> list(<span style="color:#e6db74">&#34;Python&#34;</span>)  <span style="color:#75715e"># [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List of repeated values</span>
</span></span><span style="display:flex;"><span>zeros <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">5</span>  <span style="color:#75715e"># [0, 0, 0, 0, 0]</span>
</span></span></code></pre></div><h3 id="12-accessing-list-elements">1.2 Accessing List Elements</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">450</span>, <span style="color:#ae81ff">700</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">800</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Indexing (zero-based)</span>
</span></span><span style="display:flex;"><span>first_expense <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 1200</span>
</span></span><span style="display:flex;"><span>last_expense <span style="color:#f92672">=</span> expenses[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># 800</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Slicing [start:end:step] - end index is exclusive</span>
</span></span><span style="display:flex;"><span>first_three <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">3</span>]  <span style="color:#75715e"># [1200, 450, 700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Shorthand for starting from beginning</span>
</span></span><span style="display:flex;"><span>first_three <span style="color:#f92672">=</span> expenses[:<span style="color:#ae81ff">3</span>]   <span style="color:#75715e"># [1200, 450, 700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Shorthand for going to the end</span>
</span></span><span style="display:flex;"><span>last_three <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">2</span>:]    <span style="color:#75715e"># [700, 95, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Negative indices count from the end</span>
</span></span><span style="display:flex;"><span>last_two <span style="color:#f92672">=</span> expenses[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>:]     <span style="color:#75715e"># [95, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step value</span>
</span></span><span style="display:flex;"><span>every_other <span style="color:#f92672">=</span> expenses[::<span style="color:#ae81ff">2</span>]  <span style="color:#75715e"># [1200, 700, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reverse a list</span>
</span></span><span style="display:flex;"><span>reversed_expenses <span style="color:#f92672">=</span> expenses[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># [800, 95, 700, 450, 1200]</span>
</span></span></code></pre></div><h3 id="13-modifying-lists">1.3 Modifying Lists</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>departments <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Finance&#34;</span>, <span style="color:#e6db74">&#34;Marketing&#34;</span>, <span style="color:#e6db74">&#34;IT&#34;</span>, <span style="color:#e6db74">&#34;Operations&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Changing an element</span>
</span></span><span style="display:flex;"><span>departments[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Digital Marketing&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Adding elements</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#34;HR&#34;</span>)  <span style="color:#75715e"># Adds to the end</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;Sales&#34;</span>)  <span style="color:#75715e"># Inserts at specific position</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Removing elements</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#34;IT&#34;</span>)  <span style="color:#75715e"># Removes first occurrence of value</span>
</span></span><span style="display:flex;"><span>popped_item <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>pop()  <span style="color:#75715e"># Removes and returns last item</span>
</span></span><span style="display:flex;"><span>popped_item <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># Removes item at index 1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> departments[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># Removes item at index 0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Extending lists</span>
</span></span><span style="display:flex;"><span>dept1 <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Finance&#34;</span>, <span style="color:#e6db74">&#34;HR&#34;</span>]
</span></span><span style="display:flex;"><span>dept2 <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;IT&#34;</span>, <span style="color:#e6db74">&#34;Operations&#34;</span>]
</span></span><span style="display:flex;"><span>dept1<span style="color:#f92672">.</span>extend(dept2)  <span style="color:#75715e"># dept1 now contains [&#34;Finance&#34;, &#34;HR&#34;, &#34;IT&#34;, &#34;Operations&#34;]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternative: concatenation</span>
</span></span><span style="display:flex;"><span>all_depts <span style="color:#f92672">=</span> dept1 <span style="color:#f92672">+</span> dept2  <span style="color:#75715e"># Creates a new list</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding elements</span>
</span></span><span style="display:flex;"><span>position <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;HR&#34;</span>)  <span style="color:#75715e"># Raises ValueError if not found</span>
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;Finance&#34;</span>)  <span style="color:#75715e"># Counts occurrences of value</span>
</span></span></code></pre></div><h3 id="14-useful-list-operations">1.4 Useful List Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sorting</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>sort()  <span style="color:#75715e"># Modifies the list in-place: [1, 2, 5, 8, 9]</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>sort(reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)  <span style="color:#75715e"># Descending order: [9, 8, 5, 2, 1]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># If you don&#39;t want to modify the original list</span>
</span></span><span style="display:flex;"><span>sorted_numbers <span style="color:#f92672">=</span> sorted(numbers)  <span style="color:#75715e"># Returns a new sorted list</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reversing</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>reverse()  <span style="color:#75715e"># Modifies the list in-place</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding min/max</span>
</span></span><span style="display:flex;"><span>minimum <span style="color:#f92672">=</span> min(numbers)
</span></span><span style="display:flex;"><span>maximum <span style="color:#f92672">=</span> max(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sum of all elements</span>
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> sum(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Checking membership</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">in</span> numbers:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Found 5 in the list!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List comprehension (filtering and transforming)</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> [x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> numbers <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>doubled <span style="color:#f92672">=</span> [x <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> numbers]
</span></span></code></pre></div><h3 id="15-nested-lists-2d-lists">1.5 Nested Lists (2D Lists)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Quarterly expenses by department</span>
</span></span><span style="display:flex;"><span>quarterly_expenses <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">1500</span>, <span style="color:#ae81ff">1100</span>, <span style="color:#ae81ff">1800</span>],  <span style="color:#75715e"># Finance</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">900</span>, <span style="color:#ae81ff">950</span>, <span style="color:#ae81ff">1025</span>, <span style="color:#ae81ff">1150</span>],    <span style="color:#75715e"># Marketing</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">850</span>, <span style="color:#ae81ff">880</span>, <span style="color:#ae81ff">920</span>, <span style="color:#ae81ff">980</span>]       <span style="color:#75715e"># IT</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accessing elements</span>
</span></span><span style="display:flex;"><span>finance_q1 <span style="color:#f92672">=</span> quarterly_expenses[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 1200</span>
</span></span><span style="display:flex;"><span>marketing_q3 <span style="color:#f92672">=</span> quarterly_expenses[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">2</span>]  <span style="color:#75715e"># 1025</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Looping through a 2D list</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> department <span style="color:#f92672">in</span> quarterly_expenses:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> department:
</span></span><span style="display:flex;"><span>        print(expense, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>    print()  <span style="color:#75715e"># New line after each department</span>
</span></span></code></pre></div><hr>
<h2 id="2-tuples">2. Tuples</h2>
<p>Tuples are similar to lists but are immutable (cannot be changed after creation). They&rsquo;re commonly used for fixed collections of items.</p>
<h3 id="21-creating-tuples">2.1 Creating Tuples</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty tuple</span>
</span></span><span style="display:flex;"><span>empty_tuple <span style="color:#f92672">=</span> ()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tuple with values</span>
</span></span><span style="display:flex;"><span>coordinates <span style="color:#f92672">=</span> (<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>person <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#ae81ff">30</span>, <span style="color:#e6db74">&#34;Developer&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Single-item tuple needs a comma</span>
</span></span><span style="display:flex;"><span>single_item <span style="color:#f92672">=</span> (<span style="color:#ae81ff">42</span>,)  <span style="color:#75715e"># Without comma, it&#39;s just a number in parentheses</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tuple packing (no parentheses needed)</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#e6db74">&#34;Manager&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating with tuple() constructor</span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> tuple(<span style="color:#e6db74">&#34;abc&#34;</span>)  <span style="color:#75715e"># (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span>
</span></span></code></pre></div><h3 id="22-accessing-tuple-elements">2.2 Accessing Tuple Elements</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>coordinates <span style="color:#f92672">=</span> (<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Similar to list indexing and slicing</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> coordinates[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 10</span>
</span></span><span style="display:flex;"><span>last <span style="color:#f92672">=</span> coordinates[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># 50</span>
</span></span><span style="display:flex;"><span>subset <span style="color:#f92672">=</span> coordinates[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">4</span>]  <span style="color:#75715e"># (20, 30, 40)</span>
</span></span></code></pre></div><h3 id="23-tuple-operations">2.3 Tuple Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#e6db74">&#34;Manager&#34;</span>, <span style="color:#e6db74">&#34;HR&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Count and index (like lists)</span>
</span></span><span style="display:flex;"><span>age_pos <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>index(<span style="color:#ae81ff">35</span>)
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;Manager&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Concatenation</span>
</span></span><span style="display:flex;"><span>more_info <span style="color:#f92672">=</span> employee <span style="color:#f92672">+</span> (<span style="color:#e6db74">&#34;Full-time&#34;</span>,)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Unpacking (very useful feature!)</span>
</span></span><span style="display:flex;"><span>name, age, role, department <span style="color:#f92672">=</span> employee
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returning multiple values from a function (using tuple unpacking)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_employee_stats</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">85000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name, age, salary <span style="color:#f92672">=</span> get_employee_stats()
</span></span></code></pre></div><h3 id="24-why-use-tuples">2.4 Why Use Tuples?</h3>
<ol>
<li><strong>Immutability</strong> - Values can&rsquo;t be changed accidentally</li>
<li><strong>Hashable</strong> - Can be used as dictionary keys (lists cannot)</li>
<li><strong>Slightly more efficient</strong> than lists for fixed data</li>
<li><strong>Signal intent</strong> - Using a tuple indicates the data shouldn&rsquo;t change</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using tuples as dictionary keys (not possible with lists)</span>
</span></span><span style="display:flex;"><span>locations <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">40.7128</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">74.0060</span>): <span style="color:#e6db74">&#34;New York&#34;</span>,
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">34.0522</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">118.2437</span>): <span style="color:#e6db74">&#34;Los Angeles&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<h2 id="3-dictionaries">3. Dictionaries</h2>
<p>Dictionaries store data as key-value pairs, providing fast lookups by key. They&rsquo;re unordered in Python versions before 3.7 and preserve insertion order in 3.7+.</p>
<h3 id="31-creating-dictionaries">3.1 Creating Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty dictionary</span>
</span></span><span style="display:flex;"><span>empty_dict <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dictionary with initial key-value pairs</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane Smith&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;age&#34;</span>: <span style="color:#ae81ff">35</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternative creation with dict() constructor</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> dict(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Jane Smith&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">35</span>, department<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Finance&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating from sequences of pairs</span>
</span></span><span style="display:flex;"><span>items <span style="color:#f92672">=</span> [(<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Jane&#34;</span>), (<span style="color:#e6db74">&#34;age&#34;</span>, <span style="color:#ae81ff">35</span>)]
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> dict(items)
</span></span></code></pre></div><h3 id="32-accessing-dictionary-values">3.2 Accessing Dictionary Values</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane Smith&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;age&#34;</span>: <span style="color:#ae81ff">35</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Access by key</span>
</span></span><span style="display:flex;"><span>name <span style="color:#f92672">=</span> employee[<span style="color:#e6db74">&#34;name&#34;</span>]  <span style="color:#75715e"># &#34;Jane Smith&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># KeyError if key doesn&#39;t exist</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># salary = employee[&#34;bonus&#34;]  # Raises KeyError</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using get() method (safer, returns None or default value if key not found)</span>
</span></span><span style="display:flex;"><span>bonus <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;bonus&#34;</span>)  <span style="color:#75715e"># None</span>
</span></span><span style="display:flex;"><span>bonus <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;bonus&#34;</span>, <span style="color:#ae81ff">0</span>)  <span style="color:#75715e"># Returns 0 if key not found</span>
</span></span></code></pre></div><h3 id="33-modifying-dictionaries">3.3 Modifying Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Adding or updating values</span>
</span></span><span style="display:flex;"><span>employee[<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">35</span>  <span style="color:#75715e"># Add new key-value pair</span>
</span></span><span style="display:flex;"><span>employee[<span style="color:#e6db74">&#34;name&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Jane Smith&#34;</span>  <span style="color:#75715e"># Update existing value</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Removing items</span>
</span></span><span style="display:flex;"><span>removed_value <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>pop(<span style="color:#e6db74">&#34;age&#34;</span>)  <span style="color:#75715e"># Removes and returns value</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> employee[<span style="color:#e6db74">&#34;department&#34;</span>]  <span style="color:#75715e"># Removes key-value pair</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Clearing all items</span>
</span></span><span style="display:flex;"><span>employee<span style="color:#f92672">.</span>clear()  <span style="color:#75715e"># Empty dictionary {}</span>
</span></span></code></pre></div><h3 id="34-useful-dictionary-operations">3.4 Useful Dictionary Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;rent&#34;</span>: <span style="color:#ae81ff">1200</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;utilities&#34;</span>: <span style="color:#ae81ff">250</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;groceries&#34;</span>: <span style="color:#ae81ff">400</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;entertainment&#34;</span>: <span style="color:#ae81ff">150</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all keys</span>
</span></span><span style="display:flex;"><span>keys <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>keys()  <span style="color:#75715e"># dict_keys([&#39;rent&#39;, &#39;utilities&#39;, &#39;groceries&#39;, &#39;entertainment&#39;])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all values</span>
</span></span><span style="display:flex;"><span>values <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>values()  <span style="color:#75715e"># dict_values([1200, 250, 400, 150])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all key-value pairs as tuples</span>
</span></span><span style="display:flex;"><span>items <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>items()  <span style="color:#75715e"># dict_items([(&#39;rent&#39;, 1200), (&#39;utilities&#39;, 250), ...])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Iterating over a dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>key<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>expenses[key]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Better way to iterate over keys and values</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if key exists</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;rent&#34;</span> <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Rent is accounted for&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merging dictionaries (Python 3.9+)</span>
</span></span><span style="display:flex;"><span>monthly <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;rent&#34;</span>: <span style="color:#ae81ff">1200</span>, <span style="color:#e6db74">&#34;utilities&#34;</span>: <span style="color:#ae81ff">250</span>}
</span></span><span style="display:flex;"><span>occasional <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;repairs&#34;</span>: <span style="color:#ae81ff">100</span>, <span style="color:#e6db74">&#34;insurance&#34;</span>: <span style="color:#ae81ff">80</span>}
</span></span><span style="display:flex;"><span>all_expenses <span style="color:#f92672">=</span> monthly <span style="color:#f92672">|</span> occasional  <span style="color:#75715e"># Python 3.9+</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merging dictionaries (earlier versions)</span>
</span></span><span style="display:flex;"><span>all_expenses <span style="color:#f92672">=</span> {<span style="color:#f92672">**</span>monthly, <span style="color:#f92672">**</span>occasional}  <span style="color:#75715e"># Unpacking syntax</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dictionary comprehension</span>
</span></span><span style="display:flex;"><span>doubled_expenses <span style="color:#f92672">=</span> {k: v <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items()}
</span></span><span style="display:flex;"><span>large_expenses <span style="color:#f92672">=</span> {k: v <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items() <span style="color:#66d9ef">if</span> v <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">200</span>}
</span></span></code></pre></div><h3 id="35-nested-dictionaries">3.5 Nested Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Department budget by quarter and category</span>
</span></span><span style="display:flex;"><span>department_budget <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Finance&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q1&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">50000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">10000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">5000</span>},
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q2&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">52000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">8000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">6000</span>}
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;IT&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q1&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">60000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">20000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">3000</span>},
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q2&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">65000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">15000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">2000</span>}
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accessing nested values</span>
</span></span><span style="display:flex;"><span>finance_q1_salaries <span style="color:#f92672">=</span> department_budget[<span style="color:#e6db74">&#34;Finance&#34;</span>][<span style="color:#e6db74">&#34;Q1&#34;</span>][<span style="color:#e6db74">&#34;salaries&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Safely accessing nested values</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pprint  <span style="color:#75715e"># Pretty print module for better display of nested structures</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop through nested dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> dept, quarters <span style="color:#f92672">in</span> department_budget<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>dept<span style="color:#e6db74">}</span><span style="color:#e6db74"> Department:&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> quarter, categories <span style="color:#f92672">in</span> quarters<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;  </span><span style="color:#e6db74">{</span>quarter<span style="color:#e6db74">}</span><span style="color:#e6db74">:&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> categories<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;    </span><span style="color:#e6db74">{</span>category<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="4-sets">4. Sets</h2>
<p>Sets are unordered collections of unique elements. They&rsquo;re perfect for removing duplicates and performing mathematical set operations.</p>
<h3 id="41-creating-sets">4.1 Creating Sets</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty set (can&#39;t use {} as that creates an empty dictionary)</span>
</span></span><span style="display:flex;"><span>empty_set <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set with initial values</span>
</span></span><span style="display:flex;"><span>fruits <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;apple&#34;</span>, <span style="color:#e6db74">&#34;banana&#34;</span>, <span style="color:#e6db74">&#34;cherry&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating a set from a list (removes duplicates)</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> set([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>])  <span style="color:#75715e"># {1, 2, 3, 4, 5}</span>
</span></span><span style="display:flex;"><span>unique_chars <span style="color:#f92672">=</span> set(<span style="color:#e6db74">&#34;mississippi&#34;</span>)  <span style="color:#75715e"># {&#39;m&#39;, &#39;i&#39;, &#39;s&#39;, &#39;p&#39;}</span>
</span></span></code></pre></div><h3 id="42-set-operations">4.2 Set Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employees_dept_a <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Jess&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;David&#34;</span>}
</span></span><span style="display:flex;"><span>employees_dept_b <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;David&#34;</span>, <span style="color:#e6db74">&#34;Eve&#34;</span>, <span style="color:#e6db74">&#34;Frank&#34;</span>}
</span></span><span style="display:flex;"><span>candidates <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Eve&#34;</span>, <span style="color:#e6db74">&#34;Grace&#34;</span>, <span style="color:#e6db74">&#34;Heidi&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add and remove elements</span>
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>add(<span style="color:#e6db74">&#34;Grace&#34;</span>)
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#34;Bob&#34;</span>)  <span style="color:#75715e"># Raises KeyError if not found</span>
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>discard(<span style="color:#e6db74">&#34;Bob&#34;</span>)  <span style="color:#75715e"># No error if not found</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set operations</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Union (all employees)</span>
</span></span><span style="display:flex;"><span>all_employees <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">|</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>all_employees <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>union(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Intersection (employees in both departments)</span>
</span></span><span style="display:flex;"><span>in_both_depts <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">&amp;</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>in_both_depts <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>intersection(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Difference (employees in A but not in B)</span>
</span></span><span style="display:flex;"><span>only_in_a <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">-</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>only_in_a <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>difference(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Symmetric difference (employees in either dept but not both)</span>
</span></span><span style="display:flex;"><span>in_one_dept <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">^</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>in_one_dept <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>symmetric_difference(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Subset and superset</span>
</span></span><span style="display:flex;"><span>is_subset <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">&lt;=</span> employees_dept_b  <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>is_proper_subset <span style="color:#f92672">=</span> candidates <span style="color:#f92672">&lt;</span> all_employees  <span style="color:#75715e"># True (candidates is a proper subset of all_employees)</span>
</span></span></code></pre></div><h3 id="43-common-set-uses">4.3 Common Set Uses</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Removing duplicates from a list</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1001</span>, <span style="color:#ae81ff">1002</span>, <span style="color:#ae81ff">1001</span>, <span style="color:#ae81ff">1003</span>, <span style="color:#ae81ff">1002</span>, <span style="color:#ae81ff">1004</span>]
</span></span><span style="display:flex;"><span>unique_transactions <span style="color:#f92672">=</span> list(set(transactions))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Membership testing (very efficient for large datasets)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;Jess&#34;</span> <span style="color:#f92672">in</span> employees_dept_a:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Jess works in Department A&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding common elements</span>
</span></span><span style="display:flex;"><span>customer_ids <span style="color:#f92672">=</span> {<span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">105</span>}
</span></span><span style="display:flex;"><span>premium_ids <span style="color:#f92672">=</span> {<span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">106</span>}
</span></span><span style="display:flex;"><span>common_ids <span style="color:#f92672">=</span> customer_ids <span style="color:#f92672">&amp;</span> premium_ids
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set comprehensions</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> {x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>}  <span style="color:#75715e"># {0, 2, 4, 6, 8}</span>
</span></span></code></pre></div><hr>
<h2 id="5-choosing-the-right-data-structure">5. Choosing the Right Data Structure</h2>
<p>Selecting the appropriate data structure can make your code more efficient and readable. Here&rsquo;s a quick guide:</p>
<h3 id="51-when-to-use-each-structure">5.1 When to Use Each Structure</h3>
<p><strong>Use Lists when:</strong></p>
<ul>
<li>You need an ordered collection</li>
<li>Items might need to be changed, added, or removed</li>
<li>You need to store duplicate values</li>
<li>You need to maintain insertion order</li>
</ul>
<p><strong>Use Tuples when:</strong></p>
<ul>
<li>You have a fixed collection that shouldn&rsquo;t change</li>
<li>You want to return multiple values from a function</li>
<li>You need elements that can serve as dictionary keys</li>
<li>You want to ensure data integrity (immutability)</li>
</ul>
<p><strong>Use Dictionaries when:</strong></p>
<ul>
<li>You need key-value mapping (lookups by key)</li>
<li>You want fast lookups by a specific identifier</li>
<li>You&rsquo;re working with named attributes or properties</li>
<li>You need to count occurrences of items</li>
</ul>
<p><strong>Use Sets when:</strong></p>
<ul>
<li>You only care about unique values (no duplicates)</li>
<li>You need to perform set operations (union, intersection)</li>
<li>You want to quickly check if an item exists</li>
<li>You&rsquo;re removing duplicates from a collection</li>
</ul>
<h3 id="52-performance-considerations">5.2 Performance Considerations</h3>
<p>Data structure choice affects performance. In general:</p>
<ul>
<li><strong>Lists</strong>: O(1) for append/pop at end, O(n) for insert/delete elsewhere</li>
<li><strong>Dictionaries</strong>: O(1) average for key lookups, insertions, and deletions</li>
<li><strong>Sets</strong>: O(1) average for membership testing, adding, removing</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Example: Different approaches to counting word frequencies</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;to be or not to be that is the question&#34;</span>
</span></span><span style="display:flex;"><span>words <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using a list (inefficient for counting)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_list</span>(words):
</span></span><span style="display:flex;"><span>    counts <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> words:
</span></span><span style="display:flex;"><span>        found <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> counts:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> item[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> word:
</span></span><span style="display:flex;"><span>                item[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                found <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> found:
</span></span><span style="display:flex;"><span>            counts<span style="color:#f92672">.</span>append([word, <span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> counts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using a dictionary (efficient)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_dict</span>(words):
</span></span><span style="display:flex;"><span>    counts <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> words:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> word <span style="color:#f92672">in</span> counts:
</span></span><span style="display:flex;"><span>            counts[word] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            counts[word] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> counts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Even more concise with collections.Counter</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_counter</span>(words):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Counter(words)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compare results</span>
</span></span><span style="display:flex;"><span>print(count_with_list(words))
</span></span><span style="display:flex;"><span>print(count_with_dict(words))
</span></span><span style="display:flex;"><span>print(dict(count_with_counter(words)))
</span></span></code></pre></div><hr>
<h2 id="practice-exercise-financial-portfolio-tracker">Practice Exercise: Financial Portfolio Tracker</h2>
<p>Let&rsquo;s apply these data structures by creating a simple portfolio tracker:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">portfolio_tracker</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Initialise portfolio using a dictionary of dictionaries</span>
</span></span><span style="display:flex;"><span>    portfolio <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    transactions <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Portfolio Tracker&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;1. Add stock&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;2. Record transaction&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;3. View portfolio&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;4. View transaction history&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;5. Top holdings&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;6. Exit&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        choice <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter your choice (1-6): &#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;1&#34;</span>:
</span></span><span style="display:flex;"><span>            ticker <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter stock ticker symbol: &#34;</span>)<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>            company <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter company name: &#34;</span>)
</span></span><span style="display:flex;"><span>            sector <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter sector: &#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            portfolio[ticker] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;company&#34;</span>: company,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;sector&#34;</span>: sector,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;shares&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;cost_basis&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;current_price&#34;</span>: float(input(<span style="color:#e6db74">&#34;Enter current price: $&#34;</span>))
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Added </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> to portfolio.&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;2&#34;</span>:
</span></span><span style="display:flex;"><span>            ticker <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter stock ticker symbol: &#34;</span>)<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ticker <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error: </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> not in portfolio. Add it first.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            transaction_type <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Buy or sell? &#34;</span>)<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>            shares <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Number of shares: &#34;</span>))
</span></span><span style="display:flex;"><span>            price <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Price per share: $&#34;</span>))
</span></span><span style="display:flex;"><span>            date <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Date (YYYY-MM-DD): &#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Record transaction</span>
</span></span><span style="display:flex;"><span>            transaction <span style="color:#f92672">=</span> (date, ticker, transaction_type, shares, price)
</span></span><span style="display:flex;"><span>            transactions<span style="color:#f92672">.</span>append(transaction)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Update portfolio</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> transaction_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;buy&#34;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Calculate new cost basis</span>
</span></span><span style="display:flex;"><span>                current_shares <span style="color:#f92672">=</span> portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>]
</span></span><span style="display:flex;"><span>                current_basis <span style="color:#f92672">=</span> portfolio[ticker][<span style="color:#e6db74">&#34;cost_basis&#34;</span>]
</span></span><span style="display:flex;"><span>                new_shares <span style="color:#f92672">=</span> current_shares <span style="color:#f92672">+</span> shares
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> new_shares <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:  <span style="color:#75715e"># Avoid division by zero</span>
</span></span><span style="display:flex;"><span>                    new_basis <span style="color:#f92672">=</span> (current_shares <span style="color:#f92672">*</span> current_basis <span style="color:#f92672">+</span> shares <span style="color:#f92672">*</span> price) <span style="color:#f92672">/</span> new_shares
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                    new_basis <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">+=</span> shares
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;cost_basis&#34;</span>] <span style="color:#f92672">=</span> new_basis
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> transaction_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;sell&#34;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">&lt;</span> shares:
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">&#34;Error: Not enough shares.&#34;</span>)
</span></span><span style="display:flex;"><span>                    transactions<span style="color:#f92672">.</span>pop()  <span style="color:#75715e"># Remove the last transaction</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">-=</span> shares
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Transaction recorded. You now have </span><span style="color:#e6db74">{</span>portfolio[ticker][<span style="color:#e6db74">&#39;shares&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74"> shares of </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;3&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;Portfolio is empty.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Current Portfolio:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Company&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Sector&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Shares&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Cost Basis&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Current&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;9</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Value&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Gain/Loss&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            total_value <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> ticker, data <span style="color:#f92672">in</span> portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>                shares <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>]
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> shares <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:  <span style="color:#75715e"># Only show stocks we still own</span>
</span></span><span style="display:flex;"><span>                    cost_basis <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;cost_basis&#34;</span>]
</span></span><span style="display:flex;"><span>                    current <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;current_price&#34;</span>]
</span></span><span style="display:flex;"><span>                    value <span style="color:#f92672">=</span> shares <span style="color:#f92672">*</span> current
</span></span><span style="display:flex;"><span>                    gain_loss <span style="color:#f92672">=</span> value <span style="color:#f92672">-</span> (shares <span style="color:#f92672">*</span> cost_basis)
</span></span><span style="display:flex;"><span>                    
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>data[<span style="color:#e6db74">&#39;company&#39;</span>][:<span style="color:#ae81ff">20</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>data[<span style="color:#e6db74">&#39;sector&#39;</span>][:<span style="color:#ae81ff">15</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>shares<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>cost_basis<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>current<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;7.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>gain_loss<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>                    total_value <span style="color:#f92672">+=</span> value
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Portfolio Value: $</span><span style="color:#e6db74">{</span>total_value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;4&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> transactions:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;No transactions recorded.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Transaction History:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Date&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Type&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Shares&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Price&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Total&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">55</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> date, ticker, trans_type, shares, price <span style="color:#f92672">in</span> transactions:
</span></span><span style="display:flex;"><span>                total <span style="color:#f92672">=</span> shares <span style="color:#f92672">*</span> price
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>date<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>trans_type<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>shares<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>price<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;5&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;Portfolio is empty.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Use a list to sort holdings by value</span>
</span></span><span style="display:flex;"><span>            holdings <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> ticker, data <span style="color:#f92672">in</span> portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    value <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">*</span> data[<span style="color:#e6db74">&#34;current_price&#34;</span>]
</span></span><span style="display:flex;"><span>                    holdings<span style="color:#f92672">.</span>append((ticker, data[<span style="color:#e6db74">&#34;company&#34;</span>], value))
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Sort by value (descending)</span>
</span></span><span style="display:flex;"><span>            holdings<span style="color:#f92672">.</span>sort(key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">2</span>], reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Top Holdings:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Rank&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;5</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Company&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Value&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">45</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> i, (ticker, company, value) <span style="color:#f92672">in</span> enumerate(holdings[:<span style="color:#ae81ff">5</span>], <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;5</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>company[:<span style="color:#ae81ff">20</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;6&#34;</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Thank you for using Portfolio Tracker!&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Invalid choice. Please try again.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run the application</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    portfolio_tracker()
</span></span></code></pre></div><p>This example demonstrates:</p>
<ul>
<li>Dictionaries for storing portfolio data</li>
<li>Lists for transaction history</li>
<li>Tuples for individual transactions</li>
<li>Sorting and filtering data</li>
<li>Calculating values based on stored data</li>
</ul>
<hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we&rsquo;ve covered Python&rsquo;s core data structures, the next post will explore functions, modules, and file I/Oâ€”essential tools for organising your code and working with external data.</p>
<p>Stay tuned for Post 5: Functions, Modules &amp; File I/O!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please reach out.</em></p>
]]></content:encoded></item><item><title>Part 3: Python Syntax Fundamentals &amp; Language Features</title><link>https://michaelbrunger.com/python-syntax-fundamentals/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-syntax-fundamentals/</guid><description>Master Python&amp;#39;s core syntax including variables, data types, control flow, comprehensions, lambdas, iterators, generators, and basic error handling mechanisms.</description><content:encoded><![CDATA[<h1 id="post-3-python-syntax-fundamentals--language-features">Post 3: Python Syntax Fundamentals &amp; Language Features</h1>
<p>Welcome to the third post in my Python learning journey. In the first two posts, we installed Python and set up a proper development environment. Now it&rsquo;s time to dive into the language itself. This post covers the fundamental building blocks of Python code that I&rsquo;ve been learning.</p>
<p>We&rsquo;ll explore:</p>
<ol>
<li>Variables and basic data types</li>
<li>Operators and expressions</li>
<li>Control flow with conditionals and loops</li>
<li>List comprehensions and lambdas</li>
<li>Iterators and generators</li>
<li>Error handling with try/except</li>
</ol>
<p>This post is a bit longer than the previous ones, but these fundamentals form the foundation of everything else in Python, so it&rsquo;s worth taking the time to understand them.</p>
<hr>
<h2 id="1-variables-and-basic-data-types">1. Variables and Basic Data Types</h2>
<p>Python is dynamically typed, meaning you don&rsquo;t need to declare variable types explicitly. Coming from Excel formulas where everything just works, I found this quite intuitive.</p>
<h3 id="11-variables-and-assignment">1.1 Variables and Assignment</h3>
<p>Variables in Python are created when you first assign a value to them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Creating variables</span>
</span></span><span style="display:flex;"><span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Alex&#34;</span>
</span></span><span style="display:flex;"><span>age <span style="color:#f92672">=</span> <span style="color:#ae81ff">35</span>
</span></span><span style="display:flex;"><span>hourly_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">45.50</span>
</span></span><span style="display:flex;"><span>is_python_fun <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span></code></pre></div><p>Variable names:</p>
<ul>
<li>Can contain letters, numbers, and underscores</li>
<li>Cannot start with a number</li>
<li>Are case-sensitive (<code>rate</code> and <code>Rate</code> are different variables)</li>
<li>Should follow the <code>snake_case</code> convention (lowercase with underscores)</li>
</ul>
<h3 id="12-basic-data-types">1.2 Basic Data Types</h3>
<p>Python has several built-in data types:</p>
<h4 id="numbers">Numbers</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Integers (whole numbers)</span>
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>negative_number <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Floating-point (decimals)</span>
</span></span><span style="display:flex;"><span>pi <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.14159</span>
</span></span><span style="display:flex;"><span>discount_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.15</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Complex numbers</span>
</span></span><span style="display:flex;"><span>complex_number <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>j  <span style="color:#75715e"># Not often used in business applications</span>
</span></span></code></pre></div><h4 id="strings">Strings</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Text enclosed in quotes (single or double)</span>
</span></span><span style="display:flex;"><span>first_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>last_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Doe&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Multi-line strings use triple quotes</span>
</span></span><span style="display:flex;"><span>address <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;123 Main Street
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Anytown, CA 12345&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># String concatenation</span>
</span></span><span style="display:flex;"><span>full_name <span style="color:#f92672">=</span> first_name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">+</span> last_name  <span style="color:#75715e"># &#34;John Doe&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># f-strings (Python 3.6+) - my preferred way to format strings</span>
</span></span><span style="display:flex;"><span>greeting <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Hello, </span><span style="color:#e6db74">{</span>first_name<span style="color:#e6db74">}</span><span style="color:#e6db74">! You are </span><span style="color:#e6db74">{</span>age<span style="color:#e6db74">}</span><span style="color:#e6db74"> years old.&#34;</span>
</span></span></code></pre></div><h4 id="booleans">Booleans</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># True or False values</span>
</span></span><span style="display:flex;"><span>is_active <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>has_paid <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Boolean operations</span>
</span></span><span style="display:flex;"><span>is_valid_customer <span style="color:#f92672">=</span> is_active <span style="color:#f92672">and</span> has_paid  <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>can_contact <span style="color:#f92672">=</span> is_active <span style="color:#f92672">or</span> has_paid  <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>is_not_active <span style="color:#f92672">=</span> <span style="color:#f92672">not</span> is_active  <span style="color:#75715e"># False</span>
</span></span></code></pre></div><h4 id="none-type">None Type</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Represents absence of value (similar to NULL in databases)</span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span></code></pre></div><h3 id="13-type-conversion">1.3 Type Conversion</h3>
<p>Python can convert between types:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># String to number</span>
</span></span><span style="display:flex;"><span>age_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;35&#34;</span>
</span></span><span style="display:flex;"><span>age_num <span style="color:#f92672">=</span> int(age_str)  <span style="color:#75715e"># 35 as integer</span>
</span></span><span style="display:flex;"><span>price_float <span style="color:#f92672">=</span> float(<span style="color:#e6db74">&#34;45.50&#34;</span>)  <span style="color:#75715e"># 45.5 as float</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Number to string</span>
</span></span><span style="display:flex;"><span>count_str <span style="color:#f92672">=</span> str(<span style="color:#ae81ff">10</span>)  <span style="color:#75715e"># &#34;10&#34; as string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check type of a variable</span>
</span></span><span style="display:flex;"><span>print(type(age_num))  <span style="color:#75715e"># &lt;class &#39;int&#39;&gt;</span>
</span></span></code></pre></div><hr>
<h2 id="2-operators-and-expressions">2. Operators and Expressions</h2>
<p>Python supports various operators for calculations and comparisons.</p>
<h3 id="21-arithmetic-operators">2.1 Arithmetic Operators</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addition <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b        <span style="color:#75715e"># 13</span>
</span></span><span style="display:flex;"><span>subtraction <span style="color:#f92672">=</span> a <span style="color:#f92672">-</span> b     <span style="color:#75715e"># 7</span>
</span></span><span style="display:flex;"><span>multiplication <span style="color:#f92672">=</span> a <span style="color:#f92672">*</span> b  <span style="color:#75715e"># 30</span>
</span></span><span style="display:flex;"><span>division <span style="color:#f92672">=</span> a <span style="color:#f92672">/</span> b        <span style="color:#75715e"># 3.3333... (always returns float)</span>
</span></span><span style="display:flex;"><span>floor_division <span style="color:#f92672">=</span> a <span style="color:#f92672">//</span> b <span style="color:#75715e"># 3 (integer division, rounds down)</span>
</span></span><span style="display:flex;"><span>modulus <span style="color:#f92672">=</span> a <span style="color:#f92672">%</span> b         <span style="color:#75715e"># 1 (remainder of division)</span>
</span></span><span style="display:flex;"><span>exponent <span style="color:#f92672">=</span> a <span style="color:#f92672">**</span> b       <span style="color:#75715e"># 1000 (10 raised to power of 3)</span>
</span></span></code></pre></div><h3 id="22-comparison-operators">2.2 Comparison Operators</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>equal <span style="color:#f92672">=</span> a <span style="color:#f92672">==</span> b              <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>not_equal <span style="color:#f92672">=</span> a <span style="color:#f92672">!=</span> b          <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>greater_than <span style="color:#f92672">=</span> a <span style="color:#f92672">&gt;</span> b        <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>less_than <span style="color:#f92672">=</span> a <span style="color:#f92672">&lt;</span> b           <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>greater_or_equal <span style="color:#f92672">=</span> a <span style="color:#f92672">&gt;=</span> b   <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>less_or_equal <span style="color:#f92672">=</span> a <span style="color:#f92672">&lt;=</span> b      <span style="color:#75715e"># False</span>
</span></span></code></pre></div><h3 id="23-assignment-operators">2.3 Assignment Operators</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Simple assignment</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Combined operators</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">+=</span> <span style="color:#ae81ff">5</span>   <span style="color:#75715e"># Same as x = x + 5 (x becomes 15)</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">-=</span> <span style="color:#ae81ff">3</span>   <span style="color:#75715e"># Same as x = x - 3 (x becomes 12)</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">*=</span> <span style="color:#ae81ff">2</span>   <span style="color:#75715e"># Same as x = x * 2 (x becomes 24)</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">/=</span> <span style="color:#ae81ff">4</span>   <span style="color:#75715e"># Same as x = x / 4 (x becomes 6.0)</span>
</span></span></code></pre></div><hr>
<h2 id="3-control-flow">3. Control Flow</h2>
<p>Control flow determines the order in which code executes based on conditions and loops.</p>
<h3 id="31-conditional-statements-ifelifelse">3.1 Conditional Statements (if/elif/else)</h3>
<p>Python uses indentation (whitespace) to define code blocks:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>age <span style="color:#f92672">=</span> <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> age <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">18</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Minor&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> age <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">65</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Adult&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Senior&#34;</span>)
</span></span></code></pre></div><p>Multiple conditions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>income <span style="color:#f92672">=</span> <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>years_employed <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> income <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">50000</span> <span style="color:#f92672">and</span> years_employed <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Loan approved&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> income <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">30000</span> <span style="color:#f92672">or</span> years_employed <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">5</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Further review needed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Loan denied&#34;</span>)
</span></span></code></pre></div><h3 id="32-loops">3.2 Loops</h3>
<h4 id="for-loops">For Loops</h4>
<p>For loops iterate over sequences (lists, strings, etc.):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Loop through a list</span>
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">450</span>, <span style="color:#ae81ff">700</span>, <span style="color:#ae81ff">95</span>]
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">+=</span> expense
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total expenses: $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Total expenses: $2445</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop with a range</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):  <span style="color:#75715e"># 0, 1, 2, 3, 4</span>
</span></span><span style="display:flex;"><span>    print(i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop with index and value using enumerate</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> index, value <span style="color:#f92672">in</span> enumerate(expenses):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Expense </span><span style="color:#e6db74">{</span>index<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h4 id="while-loops">While Loops</h4>
<p>While loops execute as long as a condition is true:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> count <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>:
</span></span><span style="display:flex;"><span>    print(count)
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>  <span style="color:#75715e"># Don&#39;t forget this or you&#39;ll create an infinite loop!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Break and continue</span>
</span></span><span style="display:flex;"><span>number <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:  <span style="color:#75715e"># Infinite loop</span>
</span></span><span style="display:flex;"><span>    number <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> number <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>  <span style="color:#75715e"># Skip the rest of this iteration</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> number <span style="color:#f92672">==</span> <span style="color:#ae81ff">6</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>  <span style="color:#75715e"># Exit the loop entirely</span>
</span></span><span style="display:flex;"><span>    print(number)  <span style="color:#75715e"># Prints 1, 2, 4, 5</span>
</span></span></code></pre></div><hr>
<h2 id="4-list-comprehensions-and-lambdas">4. List Comprehensions and Lambdas</h2>
<p>These are more advanced features that make Python code concise and expressive.</p>
<h3 id="41-list-comprehensions">4.1 List Comprehensions</h3>
<p>List comprehensions provide a compact way to create lists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Traditional way</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>squares <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers:
</span></span><span style="display:flex;"><span>    squares<span style="color:#f92672">.</span>append(n <span style="color:#f92672">*</span> n)
</span></span><span style="display:flex;"><span>print(squares)  <span style="color:#75715e"># [1, 4, 9, 16, 25]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># With list comprehension</span>
</span></span><span style="display:flex;"><span>squares <span style="color:#f92672">=</span> [n <span style="color:#f92672">*</span> n <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers]
</span></span><span style="display:flex;"><span>print(squares)  <span style="color:#75715e"># [1, 4, 9, 16, 25]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># With conditional filtering</span>
</span></span><span style="display:flex;"><span>even_squares <span style="color:#f92672">=</span> [n <span style="color:#f92672">*</span> n <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers <span style="color:#66d9ef">if</span> n <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(even_squares)  <span style="color:#75715e"># [4, 16]</span>
</span></span></code></pre></div><h3 id="42-dictionary-and-set-comprehensions">4.2 Dictionary and Set Comprehensions</h3>
<p>Similar syntax works for dictionaries and sets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Dictionary comprehension</span>
</span></span><span style="display:flex;"><span>number_to_square <span style="color:#f92672">=</span> {n: n <span style="color:#f92672">*</span> n <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers}
</span></span><span style="display:flex;"><span>print(number_to_square)  <span style="color:#75715e"># {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set comprehension (eliminates duplicates)</span>
</span></span><span style="display:flex;"><span>values <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>unique_values <span style="color:#f92672">=</span> {v <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> values}
</span></span><span style="display:flex;"><span>print(unique_values)  <span style="color:#75715e"># {1, 2, 3, 4, 5}</span>
</span></span></code></pre></div><h3 id="43-lambda-functions">4.3 Lambda Functions</h3>
<p>Lambdas are small anonymous functions defined with the <code>lambda</code> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Traditional function</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add</span>(a, b):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Equivalent lambda function</span>
</span></span><span style="display:flex;"><span>add_lambda <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> a, b: a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(add(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>))        <span style="color:#75715e"># 5</span>
</span></span><span style="display:flex;"><span>print(add_lambda(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)) <span style="color:#75715e"># 5</span>
</span></span></code></pre></div><p>Lambdas are often used with functions like <code>map()</code>, <code>filter()</code>, and <code>sorted()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Map applies a function to each item in an iterable</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>squared <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x <span style="color:#f92672">*</span> x, numbers))
</span></span><span style="display:flex;"><span>print(squared)  <span style="color:#75715e"># [1, 4, 9, 16, 25]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Filter creates a list of elements for which a function returns True</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x: x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>, numbers))
</span></span><span style="display:flex;"><span>print(even_numbers)  <span style="color:#75715e"># [2, 4]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sorted with a custom key function</span>
</span></span><span style="display:flex;"><span>employees <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">60000</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">50000</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>}
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>sorted_by_salary <span style="color:#f92672">=</span> sorted(employees, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> emp: emp[<span style="color:#e6db74">&#34;salary&#34;</span>])
</span></span><span style="display:flex;"><span>print(sorted_by_salary)  <span style="color:#75715e"># Sorts employees by salary</span>
</span></span></code></pre></div><hr>
<h2 id="5-iterators-and-generators">5. Iterators and Generators</h2>
<p>These features help process data efficiently, especially when working with large datasets.</p>
<h3 id="51-iterators">5.1 Iterators</h3>
<p>An iterator is an object that can be iterated (looped) over. Python&rsquo;s <code>for</code> loops work with iterators:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Lists, tuples, dictionaries, and sets are all iterable</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> num <span style="color:#f92672">in</span> numbers:  <span style="color:#75715e"># numbers.__iter__() is called implicitly</span>
</span></span><span style="display:flex;"><span>    print(num)
</span></span></code></pre></div><p>You can create your own iterator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Manual iteration with iter() and next()</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>iterator <span style="color:#f92672">=</span> iter(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(next(iterator))  <span style="color:#75715e"># 1</span>
</span></span><span style="display:flex;"><span>print(next(iterator))  <span style="color:#75715e"># 2</span>
</span></span><span style="display:flex;"><span>print(next(iterator))  <span style="color:#75715e"># 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(next(iterator))  # Would raise StopIteration exception</span>
</span></span></code></pre></div><h3 id="52-generators">5.2 Generators</h3>
<p>Generators are functions that return an iterator using the <code>yield</code> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_up_to</span>(max):
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> count <span style="color:#f92672">&lt;=</span> max:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">yield</span> count
</span></span><span style="display:flex;"><span>        count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using the generator</span>
</span></span><span style="display:flex;"><span>counter <span style="color:#f92672">=</span> count_up_to(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>print(next(counter))  <span style="color:#75715e"># 1</span>
</span></span><span style="display:flex;"><span>print(next(counter))  <span style="color:#75715e"># 2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Or in a loop</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> number <span style="color:#f92672">in</span> count_up_to(<span style="color:#ae81ff">3</span>):
</span></span><span style="display:flex;"><span>    print(number)  <span style="color:#75715e"># Prints 1, 2, 3</span>
</span></span></code></pre></div><p>Generators are memory-efficient because they generate values on-demand rather than storing the entire sequence in memory. This is especially useful for large datasets.</p>
<hr>
<h2 id="6-error-handling-with-tryexcept">6. Error Handling with try/except</h2>
<p>Python uses exceptions to handle errors gracefully:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Basic try/except</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">0</span>  <span style="color:#75715e"># Division by zero raises an exception</span>
</span></span><span style="display:flex;"><span>    print(result)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ZeroDivisionError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Cannot divide by zero!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Handling multiple exception types</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    number <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Enter a number: &#34;</span>))
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> number
</span></span><span style="display:flex;"><span>    print(result)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;That&#39;s not a valid number!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ZeroDivisionError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Cannot divide by zero!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Try/except/else/finally</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    file <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;data.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
</span></span><span style="display:flex;"><span>    content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">FileNotFoundError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;File not found!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Runs if no exception occurred</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;File content: </span><span style="color:#e6db74">{</span>content<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Always runs, regardless of exception</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;file&#39;</span> <span style="color:#f92672">in</span> locals() <span style="color:#f92672">and</span> <span style="color:#f92672">not</span> file<span style="color:#f92672">.</span>closed:
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;File closed!&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="practice-exercise-financial-calculator">Practice Exercise: Financial Calculator</h2>
<p>Let&rsquo;s apply what we&rsquo;ve learned to build a simple financial calculator:</p>
<p>Create a program that:</p>
<ol>
<li>Asks the user for their monthly income and expenses</li>
<li>Calculates their monthly savings</li>
<li>Projects savings over time with compound interest</li>
<li>Handles invalid inputs gracefully with try/except</li>
</ol>
<p>Here&rsquo;s a starter template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_savings_projection</span>(monthly_savings, annual_interest_rate, years):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Convert annual interest rate to monthly and decimal</span>
</span></span><span style="display:flex;"><span>    monthly_rate <span style="color:#f92672">=</span> annual_interest_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    months <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Project savings</span>
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, months <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> total <span style="color:#f92672">+</span> monthly_savings  <span style="color:#75715e"># Add monthly contribution</span>
</span></span><span style="display:flex;"><span>        interest <span style="color:#f92672">=</span> total <span style="color:#f92672">*</span> monthly_rate  <span style="color:#75715e"># Calculate interest</span>
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> total <span style="color:#f92672">+</span> interest         <span style="color:#75715e"># Add interest to total</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Print yearly totals</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> month <span style="color:#f92672">%</span> <span style="color:#ae81ff">12</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Year </span><span style="color:#e6db74">{</span>month <span style="color:#f92672">//</span> <span style="color:#ae81ff">12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    income <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Enter your monthly income: $&#34;</span>))
</span></span><span style="display:flex;"><span>    expenses <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Enter your monthly expenses: $&#34;</span>))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    monthly_savings <span style="color:#f92672">=</span> income <span style="color:#f92672">-</span> expenses
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> monthly_savings <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Your expenses exceed your income. No savings to project.&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        interest_rate <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Enter annual interest rate (%): &#34;</span>))
</span></span><span style="display:flex;"><span>        years <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Enter number of years to project: &#34;</span>))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Monthly savings: $</span><span style="color:#e6db74">{</span>monthly_savings<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Projecting growth over </span><span style="color:#e6db74">{</span>years<span style="color:#e6db74">}</span><span style="color:#e6db74"> years at </span><span style="color:#e6db74">{</span>interest_rate<span style="color:#e6db74">}</span><span style="color:#e6db74">% annual interest:&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        final_amount <span style="color:#f92672">=</span> calculate_savings_projection(monthly_savings, interest_rate, years)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Final savings after </span><span style="color:#e6db74">{</span>years<span style="color:#e6db74">}</span><span style="color:#e6db74"> years: $</span><span style="color:#e6db74">{</span>final_amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Please enter valid numbers only.&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we&rsquo;ve covered the syntax fundamentals, the next post will dive into Python&rsquo;s core data structures in more detail. We&rsquo;ll explore lists, tuples, dictionaries, and setsâ€”and when to use each one.</p>
<p>Stay tuned for Post 4: Core Data Structures!</p>
<hr>
<p>*This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please reach out</p>
]]></content:encoded></item><item><title>Part 2: Text Editors vs. IDEs for Python Development</title><link>https://michaelbrunger.com/python-foundations-editors-ides/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-foundations-editors-ides/</guid><description>Compare lightweight text editors to full-featured IDEs for Python development. Learn how to set up VS Code with essential Python extensions and discover effective debugging techniques.</description><content:encoded><![CDATA[<h1 id="post-2-text-editors-vs-ides-for-python-development">Post 2: Text Editors vs. IDEs for Python Development</h1>
<p>Welcome to the second post in my Python learning series. Last time, we got Python installed and ran our first code. Now it&rsquo;s time to set up a proper coding environment. Working directly with <code>.py</code> files in Notepad gets tedious quickly, so let&rsquo;s explore better options for writing Python code.</p>
<p>In this post, we&rsquo;ll cover:</p>
<ol>
<li>The difference between text editors and IDEs</li>
<li>Popular options for Python development</li>
<li>Setting up VS Code for Python (my personal choice)</li>
<li>Key productivity features that will save you time</li>
<li>Running and debugging Python code from your editor</li>
</ol>
<hr>
<h2 id="1-text-editors-vs-ides-whats-the-difference">1. Text Editors vs. IDEs: What&rsquo;s the Difference?</h2>
<p>When I started learning Python, I was confused about whether to use a &ldquo;text editor&rdquo; or an &ldquo;IDE&rdquo;. Here&rsquo;s the simple breakdown:</p>
<p><strong>Text Editors</strong>:</p>
<ul>
<li>Lightweight applications primarily designed for editing text</li>
<li>Minimal features out of the box, but often extensible with plugins</li>
<li>Faster startup times and lower system resource usage</li>
<li>Examples: Notepad++, Sublime Text, Atom</li>
</ul>
<p><strong>Integrated Development Environments (IDEs)</strong>:</p>
<ul>
<li>Comprehensive software packages with built-in tools for development</li>
<li>Include code completion, debugging, testing, and version control features</li>
<li>More resource-intensive but offer productivity benefits</li>
<li>Examples: PyCharm, Visual Studio, Eclipse</li>
</ul>
<p>Modern text editors with plugins can blur the line between these categories. For instance, VS Code is technically a text editor but can function like an IDE with the right extensions.</p>
<hr>
<h2 id="2-popular-options-for-python-development">2. Popular Options for Python Development</h2>
<p>Here are some commonly used tools for Python programming:</p>
<h3 id="text-editors">Text Editors</h3>
<p><strong>Notepad++</strong> (Windows only)</p>
<ul>
<li>Free and lightweight</li>
<li>Basic syntax highlighting for Python</li>
<li>Minimal Python-specific features</li>
<li>Good for quick edits but limited for larger projects</li>
</ul>
<p><strong>Sublime Text</strong></p>
<ul>
<li>Cross-platform (Windows, macOS, Linux)</li>
<li>Fast and responsive with large files</li>
<li>Package manager for extensions</li>
<li>Free to evaluate, $99 license for continued use</li>
</ul>
<p><strong>Atom</strong></p>
<ul>
<li>Open-source and free</li>
<li>Highly customisable</li>
<li>Good Git integration</li>
<li>Can be slower with large projects</li>
</ul>
<h3 id="ides">IDEs</h3>
<p><strong>Visual Studio Code (VS Code)</strong></p>
<ul>
<li>Free, open-source, cross-platform</li>
<li>Extensive extension library</li>
<li>Lightweight but powerful</li>
<li>Strong Python support through extensions</li>
<li>My personal choice and what we&rsquo;ll focus on in this post</li>
</ul>
<p><strong>PyCharm</strong></p>
<ul>
<li>Python-specific IDE by JetBrains</li>
<li>Community (free) and Professional (paid) editions</li>
<li>Comprehensive tools designed specifically for Python</li>
<li>Steeper learning curve but powerful features</li>
</ul>
<p><strong>Jupyter Notebooks</strong></p>
<ul>
<li>Interactive coding environment</li>
<li>Great for data analysis and visualisation</li>
<li>Documents that combine code, output, and markdown text</li>
<li>We&rsquo;ll cover this in detail in a later post</li>
</ul>
<p>After trying several options, I settled on VS Code for its balance of performance and features. It&rsquo;s lightweight enough to run smoothly on my machine but offers robust Python support.</p>
<hr>
<h2 id="3-setting-up-vs-code-for-python-development">3. Setting Up VS Code for Python Development</h2>
<p>If you&rsquo;re following along with me, let&rsquo;s set up VS Code:</p>
<h3 id="31-download-and-install-vs-code">3.1 Download and Install VS Code</h3>
<ol>
<li>Go to <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>Download the installer for your operating system</li>
<li>Run the installer with default options</li>
</ol>
<h3 id="32-install-essential-python-extensions">3.2 Install Essential Python Extensions</h3>
<ol>
<li>Launch VS Code</li>
<li>Click the Extensions icon in the left sidebar (or press Ctrl+Shift+X)</li>
<li>Search for and install these extensions:
<ul>
<li><strong>Python</strong> by Microsoft (essential)</li>
<li><strong>Pylance</strong> for improved language support</li>
<li><strong>Python Indent</strong> for automatic indentation</li>
</ul>
</li>
</ol>
<h3 id="33-configure-python-interpreter">3.3 Configure Python Interpreter</h3>
<ol>
<li>Open a Python file or create a new one (File &gt; New File, then save with <code>.py</code> extension)</li>
<li>Click on &ldquo;Select Python Interpreter&rdquo; in the bottom status bar</li>
<li>Choose the Python installation you installed in Post 1</li>
</ol>
<h3 id="34-set-up-code-formatting-and-linting">3.4 Set Up Code Formatting and Linting</h3>
<p>These tools help maintain code quality and consistent style:</p>
<ol>
<li>
<p>Install the <strong>autopep8</strong> formatter:</p>
<ul>
<li>Open a terminal in VS Code (Terminal &gt; New Terminal)</li>
<li>Run: <code>pip install autopep8</code></li>
</ul>
</li>
<li>
<p>Configure formatter settings:</p>
<ul>
<li>Press Ctrl+Shift+P to open the command palette</li>
<li>Type &ldquo;Preferences: Open Settings (JSON)&rdquo;</li>
<li>Add these settings:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.formatting.provider&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;autopep8&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;editor.formatOnSave&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.linting.enabled&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.linting.pylintEnabled&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div></li>
<li>
<p>Install Pylint for code quality checking:</p>
<ul>
<li>In the terminal, run: <code>pip install pylint</code></li>
</ul>
</li>
</ol>
<hr>
<h2 id="4-key-productivity-features">4. Key Productivity Features</h2>
<p>Here are some features that have saved me hours of time while learning Python:</p>
<h3 id="41-code-highlighting-and-intellisense">4.1 Code Highlighting and IntelliSense</h3>
<p>VS Code automatically highlights Python syntax and provides IntelliSense (code completion):</p>
<ul>
<li>Start typing a Python keyword or function name</li>
<li>VS Code shows suggestions as you type</li>
<li>Press Tab to complete the suggestion</li>
</ul>
<p>Try it by typing <code>pri</code> and watching it suggest <code>print()</code>.</p>
<h3 id="42-code-snippets">4.2 Code Snippets</h3>
<p>Snippets let you insert commonly used code patterns quickly:</p>
<ol>
<li>Type <code>if</code> and press Tab</li>
<li>VS Code inserts the <code>if</code> statement structure</li>
<li>Fill in the condition and press Tab to move to the body</li>
</ol>
<p>Other useful snippets: <code>for</code>, <code>def</code>, <code>class</code>, <code>try</code></p>
<h3 id="43-file-explorer-and-multiple-files">4.3 File Explorer and Multiple Files</h3>
<p>Having a file explorer helps manage projects with multiple files:</p>
<ol>
<li>Use File &gt; Open Folder to open your project directory</li>
<li>The left sidebar shows all files in that folder</li>
<li>Create new files or folders directly in VS Code</li>
</ol>
<h3 id="44-integrated-terminal">4.4 Integrated Terminal</h3>
<p>No need to switch between VS Code and Command Prompt:</p>
<ol>
<li>Press Ctrl+` (backtick) or use Terminal &gt; New Terminal</li>
<li>Run Python code, install packages, or use Git commands</li>
</ol>
<hr>
<h2 id="5-running-and-debugging-python-code">5. Running and Debugging Python Code</h2>
<h3 id="51-running-python-files">5.1 Running Python Files</h3>
<p>Method 1: Using the Play Button</p>
<ol>
<li>Open a Python file</li>
<li>Click the Play icon in the top-right corner</li>
</ol>
<p>Method 2: Using the Terminal</p>
<ol>
<li>Open the integrated terminal (Ctrl+`)</li>
<li>Run: <code>python your_file.py</code></li>
</ol>
<h3 id="52-introduction-to-debugging">5.2 Introduction to Debugging</h3>
<p>Debugging helps you find and fix errors in your code:</p>
<ol>
<li>Set a breakpoint by clicking in the margin to the left of a line number (a red dot appears)</li>
<li>Press F5 or click the Debug icon in the sidebar, then &ldquo;Start Debugging&rdquo;</li>
<li>Your code runs until it hits the breakpoint, then pauses</li>
<li>Examine variables in the &ldquo;Variables&rdquo; panel</li>
<li>Use the debug toolbar to step through code line by line</li>
</ol>
<h3 id="53-print-driven-debugging-vs-using-a-debugger">5.3 Print-Driven Debugging vs. Using a Debugger</h3>
<p>When I first started coding, I relied heavily on <code>print()</code> statements to understand what was happening in my code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_total</span>(items):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Items received: </span><span style="color:#e6db74">{</span>items<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Debug print</span>
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">=</span> sum(items)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Calculated total: </span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Debug print</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total
</span></span></code></pre></div><p>While this works, using the debugger is more powerful:</p>
<ul>
<li>You can inspect all variables without modifying code</li>
<li>You can pause execution and examine the program state</li>
<li>You don&rsquo;t need to remove debug code when you&rsquo;re done</li>
</ul>
<hr>
<h2 id="practice-exercise">Practice Exercise</h2>
<p>Let&rsquo;s put your new environment to use:</p>
<ol>
<li>Create a new file called <code>calculator.py</code> in VS Code</li>
<li>Write a simple function that takes two numbers and an operation (add, subtract, multiply, divide) and returns the result</li>
<li>Add proper error handling (e.g., division by zero)</li>
<li>Use print statements to test your function with various inputs</li>
</ol>
<p><strong>Example solution</strong> (try it yourself first!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate</span>(a, b, operation):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;add&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;subtract&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">-</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;multiply&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">*</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;divide&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Division by zero&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">/</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Unknown operation&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Test the function</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;add&#34;</span>))       <span style="color:#75715e"># Should print 15</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;subtract&#34;</span>))  <span style="color:#75715e"># Should print 5</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;multiply&#34;</span>))  <span style="color:#75715e"># Should print 50</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;divide&#34;</span>))    <span style="color:#75715e"># Should print 2.0</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;divide&#34;</span>))    <span style="color:#75715e"># Should print error message</span>
</span></span></code></pre></div><p>Try using the debugger to step through this code and watch how the variables change.</p>
<hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we have our Python development environment set up, we&rsquo;re ready to dive deeper into Python syntax and language features. In the next post, we&rsquo;ll explore variables, data types, control flow, and more fundamental Python concepts.</p>
<p>Stay tuned for Post 3: Python Syntax Fundamentals &amp; Language Features!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.</em></p>
]]></content:encoded></item><item><title>Part 1: Getting Started with Python on Windows</title><link>https://michaelbrunger.com/python-foundations-getting-started/</link><pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-foundations-getting-started/</guid><description>Learn what Python is, install it on Windows, and write your first Python program in this introductory guide to the Python programming language.</description><content:encoded><![CDATA[<h1 id="post-1-getting-started-with-python-on-windows">Post 1: Getting Started with Python on Windows</h1>
<p>Welcome to the first post in my Python learning series. As I learn Python myself, I&rsquo;ll be documenting my journey here. This first post covers the essentials to get you up and running with Python on Windows:</p>
<ol>
<li>What Python is and why it&rsquo;s worth learning</li>
<li>Installing Python on Windows (with step-by-step instructions)</li>
<li>Quick install notes for macOS &amp; Linux users</li>
<li>Writing your first &ldquo;Hello, World!&rdquo; program</li>
<li>Using the Python interactive shell</li>
</ol>
<hr>
<h2 id="1-what-is-python-and-why-learn-it">1. What Is Python (and Why Learn It)?</h2>
<p>Python is a high-level, interpreted programming language that&rsquo;s gained enormous popularity for good reason. After looking into various languages, I chose to learn Python because:</p>
<ul>
<li><strong>Readability</strong>: Its clean syntax uses indentation and fewer symbols than languages like C++ or Java, making code easier to understand</li>
<li><strong>Versatility</strong>: It&rsquo;s used across multiple domains from web development (Django, Flask) to data analysis (NumPy, pandas) and automation</li>
<li><strong>Package ecosystem</strong>: PyPI (Python Package Index) hosts over 400,000 third-party packages that extend Python&rsquo;s capabilities</li>
<li><strong>Community support</strong>: Extensive documentation, forums, and tutorials make finding help straightforward</li>
</ul>
<p>For me as a finance professional, Python&rsquo;s data analysis capabilities are particularly valuable, but its applications stretch across many fields.</p>
<hr>
<h2 id="2-installing-python-on-windows">2. Installing Python on Windows</h2>
<p>Here&rsquo;s how to get Python installed on Windows 10/11:</p>
<h3 id="21-download-the-installer">2.1 Download the Installer</h3>
<ol>
<li>Visit the official Python download page: <a href="https://www.python.org/downloads/windows">https://www.python.org/downloads/windows</a></li>
<li>Click the button for the latest stable release (currently Python 3.11.x)</li>
</ol>
<h3 id="22-run-the-installer">2.2 Run the Installer</h3>
<ol>
<li>Locate and double-click the downloaded file (typically named python-3.x.x-amd64.exe)</li>
<li><strong>IMPORTANT</strong>: Check the box that says &ldquo;Add Python 3.x to PATH&rdquo; at the bottom of the installer
<ul>
<li>This allows you to run Python from any directory in Command Prompt</li>
</ul>
</li>
<li>Click &ldquo;Install Now&rdquo; for the standard installation, or &ldquo;Customise installation&rdquo; if you want to change specific options</li>
</ol>
<h3 id="23-verify-the-installation">2.3 Verify the Installation</h3>
<ol>
<li>Open Command Prompt (press Win + R, type <code>cmd</code>, and hit Enter)</li>
<li>Type the following command and press Enter:
<pre tabindex="0"><code>python --version
</code></pre></li>
<li>You should see output like:
<pre tabindex="0"><code>Python 3.11.4
</code></pre>(Your version number might differ)</li>
</ol>
<hr>
<h2 id="3-quick-notes-for-macos--linux">3. Quick Notes for macOS &amp; Linux</h2>
<ul>
<li>
<p><strong>macOS</strong>:</p>
<ul>
<li>Many Macs come with Python 2.7 preinstalled, but you&rsquo;ll want Python 3</li>
<li>The simplest approach is using Homebrew:
<pre tabindex="0"><code>brew install python
</code></pre></li>
<li>Alternatively, download the installer from python.org</li>
</ul>
</li>
<li>
<p><strong>Linux</strong>:</p>
<ul>
<li>Most Linux distributions include Python</li>
<li>For Ubuntu/Debian:
<pre tabindex="0"><code>sudo apt update
sudo apt install python3 python3-pip
</code></pre></li>
</ul>
</li>
</ul>
<p>For complete instructions, see the official Python documentation:</p>
<ul>
<li>macOS: <a href="https://docs.python.org/3/using/mac.html">https://docs.python.org/3/using/mac.html</a></li>
<li>Linux: <a href="https://docs.python.org/3/using/unix.html">https://docs.python.org/3/using/unix.html</a></li>
</ul>
<hr>
<h2 id="4-your-first-hello-world-script">4. Your First &ldquo;Hello, World!&rdquo; Script</h2>
<p>Time to write your first Python program:</p>
<ol>
<li>
<p>In Command Prompt, navigate to a folder where you want to create your script:</p>
<pre tabindex="0"><code>cd C:\Users\YourUsername\Documents
</code></pre></li>
<li>
<p>Create a new file named <code>hello.py</code> using any text editor (Notepad, VS Code, etc.)</p>
</li>
<li>
<p>Type this line in the file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Hello, World!&#34;</span>)
</span></span></code></pre></div></li>
<li>
<p>Save the file, then run it by typing in Command Prompt:</p>
<pre tabindex="0"><code>python hello.py
</code></pre></li>
<li>
<p>You should see:</p>
<pre tabindex="0"><code>Hello, World!
</code></pre></li>
</ol>
<p>Congratulationsâ€”you&rsquo;ve written and executed your first Python program!</p>
<hr>
<h2 id="5-exploring-the-python-interactive-shell">5. Exploring the Python Interactive Shell</h2>
<p>Python comes with an interactive shell (also called a REPLâ€”Read-Evaluate-Print Loop) that lets you test code snippets immediately:</p>
<ol>
<li>
<p>In Command Prompt, simply type:</p>
<pre tabindex="0"><code>python
</code></pre></li>
<li>
<p>You&rsquo;ll see the Python prompt (<code>&gt;&gt;&gt;</code>) where you can type code directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Python&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;I&#39;m learning </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>)
</span></span><span style="display:flex;"><span>I<span style="color:#e6db74">&#39;m learning Python!</span>
</span></span></code></pre></div></li>
<li>
<p>Try some basic math:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">35</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5.0</span>
</span></span></code></pre></div></li>
<li>
<p>To exit, type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> exit()
</span></span></code></pre></div><p>Or press Ctrl+Z followed by Enter on Windows.</p>
</li>
</ol>
<p>The interactive shell is excellent for quick experiments and calculations without creating a file.</p>
<hr>
<h2 id="practice-exercise">Practice Exercise</h2>
<p>Before moving on, try this quick exercise:</p>
<ol>
<li>Create a new Python file named <code>greeting.py</code></li>
<li>Write code that:
<ul>
<li>Assigns your name to a variable</li>
<li>Prints a greeting that includes your name</li>
</ul>
</li>
<li>Run the script to see the output</li>
</ol>
<p><strong>Example solution</strong> (don&rsquo;t peek until you&rsquo;ve tried!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Alex&#34;</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Nice to meet you, </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that you have Python installed and have run your first code, you&rsquo;re ready to:</p>
<ul>
<li>Explore text editors and IDEs that will make coding more efficient (coming in Post 2)</li>
<li>Learn Python syntax fundamentals to build more complex programs</li>
<li>Begin solving real problems with your new skills</li>
</ul>
<p>Stay tuned for Post 2: Text Editors vs. IDEs for Python Development!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.</em></p>
]]></content:encoded></item><item><title>Python Learning Path: From Fundamentals to Intermediate Applications</title><link>https://michaelbrunger.com/python-learning-path/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-learning-path/</guid><description>A comprehensive 17-post curriculum taking you from Python installation to building real-world applications. Covers core language features, professional practices, data analysis tools, and practical project development.</description><content:encoded><![CDATA[<h2 id="my-python-learning-journey">My Python Learning Journey</h2>
<p>Welcome to my Python learning series! As a finance professional exploring programming, I&rsquo;m documenting my entire journey through 17 posts that take you from absolute beginner to building practical applications.</p>
<h2 id="what-to-expect-from-this-series">What to Expect from This Series</h2>
<p>This series is designed for fellow finance professionals and beginners who want to learn Python in a practical, step-by-step manner. Each post builds on previous concepts while introducing new skills.</p>
<h2 id="series-overview">Series Overview</h2>
<p>Here&rsquo;s what we&rsquo;ll cover throughout the 17 posts:</p>
<h2 id="foundations-posts-16">Foundations (Posts 1â€“6)</h2>
<h3 id="1-getting-started-with-python-on-windows">1. Getting Started with Python on Windows</h3>
<ul>
<li>What is Python, why learn it, and where it&rsquo;s used</li>
<li>Installing Python (stepâ€‘byâ€‘step Windows installer with screenshots)</li>
<li>Quick pointers for macOS/Linux installs</li>
<li>Your first &ldquo;Hello, World!&rdquo; script</li>
<li>Exploring the interactive REPL (shell)</li>
</ul>
<h3 id="2-text-editors-vs-ides-for-python-development">2. Text Editors vs. IDEs for Python Development</h3>
<ul>
<li>Lightweight editors (Notepad++, Sublime) vs. full IDEs (VS Code, PyCharm)</li>
<li>Setting up VS Code for Python (extensions, linting, autoâ€‘format)</li>
<li>Code highlighting, IntelliSense/autocomplete, and snippets</li>
<li>Running and debugging code from your editor</li>
<li>Quick intro to IDEâ€‘based breakpoints vs. printâ€‘driven debugging</li>
</ul>
<h3 id="3-python-syntax-fundamentals--language-features">3. Python Syntax Fundamentals &amp; Language Features</h3>
<ul>
<li>Variables, data types (numbers, strings, booleans) and operators</li>
<li>Indentation and control flow (if/elif/else, loops)</li>
<li>Comprehensions &amp; lambdas: list/dict/set comprehensions, map/filter, anonymous functions</li>
<li>Iterators &amp; generators: the iterator protocol, writing your own with yield</li>
<li>Basic error handling: try/except, else/finally</li>
</ul>
<h3 id="4-core-data-structures">4. Core Data Structures</h3>
<ul>
<li>Lists: creation, indexing, slicing, methods</li>
<li>Tuples: immutability, packing/unpacking</li>
<li>Dictionaries: keyâ€“value access, common methods</li>
<li>Sets: uniqueness, union/intersection/difference</li>
<li>Choosing the right structure for the task</li>
</ul>
<h3 id="5-functions-modules--file-io">5. Functions, Modules &amp; File I/O</h3>
<ul>
<li>Defining and calling functions (def, return, positional vs. keyword args)</li>
<li>Variable scope and namespaces</li>
<li>Organising code into modules and packages</li>
<li>Exploring the Standard Library (math, random, datetime, os, sys)</li>
<li>Reading from/writing to text files with open() and the with statement</li>
</ul>
<h3 id="6-virtual-environments--packaging">6. Virtual Environments &amp; Packaging</h3>
<ul>
<li>Why virtual environments matter (avoiding dependency conflicts)</li>
<li>Creating/activating/deactivating venv on Windows (and notes for macOS/Linux)</li>
<li>Managing packages with pip: install, freeze, requirements.txt</li>
<li>Basic packaging: project structure, setup.py/pyproject.toml essentials</li>
<li>Publishing to PyPI with twine and versioning best practices</li>
</ul>
<hr>
<h2 id="professional-best-practices-posts-79">Professional Best Practices (Posts 7â€“9)</h2>
<h3 id="7-code-quality--collaboration">7. Code Quality &amp; Collaboration</h3>
<ul>
<li>Version control fundamentals with Git &amp; GitHub (clone, commit, push, pull requests)</li>
<li>Writing clean, PEP 8â€‘compliant code; linting with flake8</li>
<li>Autoâ€‘formatting with black and organising imports with isort</li>
<li>Writing docstrings (Google vs. NumPy style) and autoâ€‘generating docs (Sphinx overview)</li>
</ul>
<h3 id="8-testing--debugging">8. Testing &amp; Debugging</h3>
<ul>
<li>Unit testing basics with unittest and pytest (assertions, test discovery)</li>
<li>Fixtures in pytest and intro to TDD workflows</li>
<li>Raising and defining custom exceptions (raise, subclassing Exception)</li>
<li>Using the debugger: pdb commands and IDEâ€‘based breakpoints</li>
<li>Structured logging with the logging module (levels, handlers, formatting)</li>
</ul>
<h3 id="9-commandline-tools--automation">9. Commandâ€‘Line Tools &amp; Automation</h3>
<ul>
<li>Building CLI scripts with argparse: positional args, flags, help text</li>
<li>Packaging entry points (console_scripts) for installable commands</li>
<li>Automating file/folder tasks (os, shutil): renaming, organising, backups</li>
<li>Automating GUI interactions with PyAutoGUI (keyboard/mouse control)</li>
<li>Putting it all together in a sample automation project</li>
</ul>
<hr>
<h2 id="core-tools--data-posts-1013">Core Tools &amp; Data (Posts 10â€“13)</h2>
<h3 id="10-the-python-ecosystem--interactive-data-workflows">10. The Python Ecosystem &amp; Interactive Data Workflows</h3>
<ul>
<li>Clarify package vs. environment managers: pip vs. conda vs. Anaconda</li>
<li>When and why to choose each (lightweight vs. dataâ€‘science bundles)</li>
<li>Installing and exploring Anaconda Navigator</li>
<li>Jupyter Notebooks: installing via pip/Anaconda, notebook anatomy (code vs. Markdown), basic plots inline</li>
</ul>
<h3 id="11-numpy-fundamentals-for-numerical-data">11. NumPy Fundamentals for Numerical Data</h3>
<ul>
<li>Installing NumPy</li>
<li>The ndarray: creation, indexing, slicing</li>
<li>Vectorized operations and broadcasting rules</li>
<li>Performance comparison vs. pure Python lists</li>
</ul>
<h3 id="12-data-analysis-with-pandas">12. Data Analysis with pandas</h3>
<ul>
<li>Installing pandas</li>
<li>Understanding Series and DataFrame objects</li>
<li>Reading data (CSV, Excel), inspecting and summarising</li>
<li>Selection, filtering, grouping, transformation</li>
<li>Handling missing data</li>
</ul>
<h3 id="13-data-visualisation-basics">13. Data Visualisation Basics</h3>
<ul>
<li>Matplotlib core: line, scatter, bar, histogram plots</li>
<li>Customising labels, titles, legends</li>
<li>Seaborn intro: statistical plot types (boxplot, heatmap)</li>
<li>Saving figures to files for reports</li>
</ul>
<hr>
<h2 id="intermediate-applications-posts-1417">Intermediate Applications (Posts 14â€“17)</h2>
<h3 id="14-introduction-to-objectoriented-programming-oop">14. Introduction to Objectâ€‘Oriented Programming (OOP)</h3>
<ul>
<li>Classes vs. objects, attributes vs. methods</li>
<li>The init constructor and self</li>
<li>Encapsulation, inheritance and polymorphism (simple examples)</li>
<li>Why OOP matters: organising and reusing code</li>
</ul>
<h3 id="15-web-development-foundations">15. Web Development Foundations</h3>
<ul>
<li>Option A: Flask (lightweight): setting up, routes, templates, serving static files</li>
<li>Option B: Django (fullâ€‘featured): project/app structure, admin interface, ORM intro</li>
<li>Option C: Web Scraping: requests + BeautifulSoup for HTML parsing</li>
<li>Deploying your first minimal web app on a free hosting platform (e.g., Heroku)</li>
</ul>
<h3 id="16-building-simple-gui-applications-with-tkinter">16. Building Simple GUI Applications with Tkinter</h3>
<ul>
<li>Installing/importing Tkinter (builtâ€‘in)</li>
<li>Creating windows, labels, buttons, entry widgets</li>
<li>Layout managers (pack, grid)</li>
<li>A handsâ€‘on miniâ€‘project: e.g., basic calculator or temperature converter</li>
</ul>
<h3 id="17-next-steps--advanced-topics">17. Next Steps &amp; Advanced Topics</h3>
<ul>
<li>Concurrency &amp; async: when to use threads vs. processes (threading, multiprocessing), intro to asyncio</li>
<li>Endâ€‘toâ€‘end miniâ€‘project ideas (combine web, data, GUI, testing)</li>
<li>Recommended books, courses, blogs, and community resources</li>
<li>Tips for staying sharp: code challenges, openâ€‘source contribution, local meetups</li>
</ul>
]]></content:encoded></item></channel></rss>