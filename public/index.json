[{"content":"Post 4: Core Data Structures Welcome to the fourth post in my Python learning journey. So far, we\u0026rsquo;ve installed Python, set up a development environment, and explored the basic syntax. Now it\u0026rsquo;s time to dive deeper into Python\u0026rsquo;s core data structures; the building blocks you\u0026rsquo;ll use to organise and manipulate data in your programs.\nIn this post, we\u0026rsquo;ll cover:\nLists: Python\u0026rsquo;s versatile sequence type Tuples: Immutable collections Dictionaries: Key-value mapping Sets: Unique value collections Choosing the right data structure I\u0026rsquo;ve found these data structures similar to concepts we use every day; lists are like columns in spreadsheets, dictionaries resemble lookup tables, and sets are perfect for tracking unique items like account codes.\n1. Lists Lists are ordered, mutable (changeable) collections that can contain items of different types. They\u0026rsquo;re perhaps the most commonly used data structure in Python.\n1.1 Creating Lists # Empty list empty_list = [] # List with initial values numbers = [1, 2, 3, 4, 5] mixed_data = [42, \u0026#34;hello\u0026#34;, True, 3.14] # Creating a list with the list() constructor chars = list(\u0026#34;Python\u0026#34;) # [\u0026#39;P\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;n\u0026#39;] # List of repeated values zeros = [0] * 5 # [0, 0, 0, 0, 0] 1.2 Accessing List Elements expenses = [1200, 450, 700, 95, 800] # Indexing (zero-based) first_expense = expenses[0] # 1200 last_expense = expenses[-1] # 800 # Slicing [start:end:step] - end index is exclusive first_three = expenses[0:3] # [1200, 450, 700] # Shorthand for starting from beginning first_three = expenses[:3] # [1200, 450, 700] # Shorthand for going to the end last_three = expenses[2:] # [700, 95, 800] # Negative indices count from the end last_two = expenses[-2:] # [95, 800] # Step value every_other = expenses[::2] # [1200, 700, 800] # Reverse a list reversed_expenses = expenses[::-1] # [800, 95, 700, 450, 1200] 1.3 Modifying Lists departments = [\u0026#34;Finance\u0026#34;, \u0026#34;Marketing\u0026#34;, \u0026#34;IT\u0026#34;, \u0026#34;Operations\u0026#34;] # Changing an element departments[1] = \u0026#34;Digital Marketing\u0026#34; # Adding elements departments.append(\u0026#34;HR\u0026#34;) # Adds to the end departments.insert(2, \u0026#34;Sales\u0026#34;) # Inserts at specific position # Removing elements departments.remove(\u0026#34;IT\u0026#34;) # Removes first occurrence of value popped_item = departments.pop() # Removes and returns last item popped_item = departments.pop(1) # Removes item at index 1 del departments[0] # Removes item at index 0 # Extending lists dept1 = [\u0026#34;Finance\u0026#34;, \u0026#34;HR\u0026#34;] dept2 = [\u0026#34;IT\u0026#34;, \u0026#34;Operations\u0026#34;] dept1.extend(dept2) # dept1 now contains [\u0026#34;Finance\u0026#34;, \u0026#34;HR\u0026#34;, \u0026#34;IT\u0026#34;, \u0026#34;Operations\u0026#34;] # Alternative: concatenation all_depts = dept1 + dept2 # Creates a new list # Finding elements position = departments.index(\u0026#34;HR\u0026#34;) # Raises ValueError if not found count = departments.count(\u0026#34;Finance\u0026#34;) # Counts occurrences of value 1.4 Useful List Operations numbers = [5, 2, 8, 1, 9] # Sorting numbers.sort() # Modifies the list in-place: [1, 2, 5, 8, 9] numbers.sort(reverse=True) # Descending order: [9, 8, 5, 2, 1] # If you don\u0026#39;t want to modify the original list sorted_numbers = sorted(numbers) # Returns a new sorted list # Reversing numbers.reverse() # Modifies the list in-place # Finding min/max minimum = min(numbers) maximum = max(numbers) # Sum of all elements total = sum(numbers) # Checking membership if 5 in numbers: print(\u0026#34;Found 5 in the list!\u0026#34;) # List comprehension (filtering and transforming) even_numbers = [x for x in numbers if x % 2 == 0] doubled = [x * 2 for x in numbers] 1.5 Nested Lists (2D Lists) # Quarterly expenses by department quarterly_expenses = [ [1200, 1500, 1100, 1800], # Finance [900, 950, 1025, 1150], # Marketing [850, 880, 920, 980] # IT ] # Accessing elements finance_q1 = quarterly_expenses[0][0] # 1200 marketing_q3 = quarterly_expenses[1][2] # 1025 # Looping through a 2D list for department in quarterly_expenses: for expense in department: print(expense, end=\u0026#34; \u0026#34;) print() # New line after each department 2. Tuples Tuples are similar to lists but are immutable (cannot be changed after creation). They\u0026rsquo;re commonly used for fixed collections of items.\n2.1 Creating Tuples # Empty tuple empty_tuple = () # Tuple with values coordinates = (10, 20) person = (\u0026#34;John\u0026#34;, 30, \u0026#34;Developer\u0026#34;) # Single-item tuple needs a comma single_item = (42,) # Without comma, it\u0026#39;s just a number in parentheses # Tuple packing (no parentheses needed) employee = \u0026#34;Jane\u0026#34;, 35, \u0026#34;Manager\u0026#34; # Creating with tuple() constructor letters = tuple(\u0026#34;abc\u0026#34;) # (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;) 2.2 Accessing Tuple Elements coordinates = (10, 20, 30, 40, 50) # Similar to list indexing and slicing x = coordinates[0] # 10 last = coordinates[-1] # 50 subset = coordinates[1:4] # (20, 30, 40) 2.3 Tuple Operations employee = (\u0026#34;Jane\u0026#34;, 35, \u0026#34;Manager\u0026#34;, \u0026#34;HR\u0026#34;) # Count and index (like lists) age_pos = employee.index(35) count = employee.count(\u0026#34;Manager\u0026#34;) # Concatenation more_info = employee + (\u0026#34;Full-time\u0026#34;,) # Unpacking (very useful feature!) name, age, role, department = employee # Returning multiple values from a function (using tuple unpacking) def get_employee_stats(): return \u0026#34;Jane\u0026#34;, 35, 85000 name, age, salary = get_employee_stats() 2.4 Why Use Tuples? Immutability - Values can\u0026rsquo;t be changed accidentally Hashable - Can be used as dictionary keys (lists cannot) Slightly more efficient than lists for fixed data Signal intent - Using a tuple indicates the data shouldn\u0026rsquo;t change # Using tuples as dictionary keys (not possible with lists) locations = { (40.7128, -74.0060): \u0026#34;New York\u0026#34;, (34.0522, -118.2437): \u0026#34;Los Angeles\u0026#34; } 3. Dictionaries Dictionaries store data as key-value pairs, providing fast lookups by key. They\u0026rsquo;re unordered in Python versions before 3.7 and preserve insertion order in 3.7+.\n3.1 Creating Dictionaries # Empty dictionary empty_dict = {} # Dictionary with initial key-value pairs employee = { \u0026#34;name\u0026#34;: \u0026#34;Jane Smith\u0026#34;, \u0026#34;age\u0026#34;: 35, \u0026#34;department\u0026#34;: \u0026#34;Finance\u0026#34;, \u0026#34;salary\u0026#34;: 75000 } # Alternative creation with dict() constructor employee = dict(name=\u0026#34;Jane Smith\u0026#34;, age=35, department=\u0026#34;Finance\u0026#34;) # Creating from sequences of pairs items = [(\u0026#34;name\u0026#34;, \u0026#34;Jane\u0026#34;), (\u0026#34;age\u0026#34;, 35)] employee = dict(items) 3.2 Accessing Dictionary Values employee = { \u0026#34;name\u0026#34;: \u0026#34;Jane Smith\u0026#34;, \u0026#34;age\u0026#34;: 35, \u0026#34;department\u0026#34;: \u0026#34;Finance\u0026#34;, \u0026#34;salary\u0026#34;: 75000 } # Access by key name = employee[\u0026#34;name\u0026#34;] # \u0026#34;Jane Smith\u0026#34; # KeyError if key doesn\u0026#39;t exist # salary = employee[\u0026#34;bonus\u0026#34;] # Raises KeyError # Using get() method (safer, returns None or default value if key not found) bonus = employee.get(\u0026#34;bonus\u0026#34;) # None bonus = employee.get(\u0026#34;bonus\u0026#34;, 0) # Returns 0 if key not found 3.3 Modifying Dictionaries employee = {\u0026#34;name\u0026#34;: \u0026#34;Jane\u0026#34;, \u0026#34;department\u0026#34;: \u0026#34;Finance\u0026#34;} # Adding or updating values employee[\u0026#34;age\u0026#34;] = 35 # Add new key-value pair employee[\u0026#34;name\u0026#34;] = \u0026#34;Jane Smith\u0026#34; # Update existing value # Removing items removed_value = employee.pop(\u0026#34;age\u0026#34;) # Removes and returns value del employee[\u0026#34;department\u0026#34;] # Removes key-value pair # Clearing all items employee.clear() # Empty dictionary {} 3.4 Useful Dictionary Operations expenses = { \u0026#34;rent\u0026#34;: 1200, \u0026#34;utilities\u0026#34;: 250, \u0026#34;groceries\u0026#34;: 400, \u0026#34;entertainment\u0026#34;: 150 } # Get all keys keys = expenses.keys() # dict_keys([\u0026#39;rent\u0026#39;, \u0026#39;utilities\u0026#39;, \u0026#39;groceries\u0026#39;, \u0026#39;entertainment\u0026#39;]) # Get all values values = expenses.values() # dict_values([1200, 250, 400, 150]) # Get all key-value pairs as tuples items = expenses.items() # dict_items([(\u0026#39;rent\u0026#39;, 1200), (\u0026#39;utilities\u0026#39;, 250), ...]) # Iterating over a dictionary for key in expenses: print(f\u0026#34;{key}: ${expenses[key]}\u0026#34;) # Better way to iterate over keys and values for category, amount in expenses.items(): print(f\u0026#34;{category}: ${amount}\u0026#34;) # Check if key exists if \u0026#34;rent\u0026#34; in expenses: print(\u0026#34;Rent is accounted for\u0026#34;) # Merging dictionaries (Python 3.9+) monthly = {\u0026#34;rent\u0026#34;: 1200, \u0026#34;utilities\u0026#34;: 250} occasional = {\u0026#34;repairs\u0026#34;: 100, \u0026#34;insurance\u0026#34;: 80} all_expenses = monthly | occasional # Python 3.9+ # Merging dictionaries (earlier versions) all_expenses = {**monthly, **occasional} # Unpacking syntax # Dictionary comprehension doubled_expenses = {k: v * 2 for k, v in expenses.items()} large_expenses = {k: v for k, v in expenses.items() if v \u0026gt; 200} 3.5 Nested Dictionaries # Department budget by quarter and category department_budget = { \u0026#34;Finance\u0026#34;: { \u0026#34;Q1\u0026#34;: {\u0026#34;salaries\u0026#34;: 50000, \u0026#34;equipment\u0026#34;: 10000, \u0026#34;travel\u0026#34;: 5000}, \u0026#34;Q2\u0026#34;: {\u0026#34;salaries\u0026#34;: 52000, \u0026#34;equipment\u0026#34;: 8000, \u0026#34;travel\u0026#34;: 6000} }, \u0026#34;IT\u0026#34;: { \u0026#34;Q1\u0026#34;: {\u0026#34;salaries\u0026#34;: 60000, \u0026#34;equipment\u0026#34;: 20000, \u0026#34;travel\u0026#34;: 3000}, \u0026#34;Q2\u0026#34;: {\u0026#34;salaries\u0026#34;: 65000, \u0026#34;equipment\u0026#34;: 15000, \u0026#34;travel\u0026#34;: 2000} } } # Accessing nested values finance_q1_salaries = department_budget[\u0026#34;Finance\u0026#34;][\u0026#34;Q1\u0026#34;][\u0026#34;salaries\u0026#34;] # Safely accessing nested values import pprint # Pretty print module for better display of nested structures # Loop through nested dictionary for dept, quarters in department_budget.items(): print(f\u0026#34;\\n{dept} Department:\u0026#34;) for quarter, categories in quarters.items(): print(f\u0026#34; {quarter}:\u0026#34;) for category, amount in categories.items(): print(f\u0026#34; {category}: ${amount}\u0026#34;) 4. Sets Sets are unordered collections of unique elements. They\u0026rsquo;re perfect for removing duplicates and performing mathematical set operations.\n4.1 Creating Sets # Empty set (can\u0026#39;t use {} as that creates an empty dictionary) empty_set = set() # Set with initial values fruits = {\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;} # Creating a set from a list (removes duplicates) numbers = set([1, 2, 2, 3, 4, 4, 5]) # {1, 2, 3, 4, 5} unique_chars = set(\u0026#34;mississippi\u0026#34;) # {\u0026#39;m\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;p\u0026#39;} 4.2 Set Operations employees_dept_a = {\u0026#34;Jess\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;David\u0026#34;} employees_dept_b = {\u0026#34;Charlie\u0026#34;, \u0026#34;David\u0026#34;, \u0026#34;Eve\u0026#34;, \u0026#34;Frank\u0026#34;} candidates = {\u0026#34;Eve\u0026#34;, \u0026#34;Grace\u0026#34;, \u0026#34;Heidi\u0026#34;} # Add and remove elements employees_dept_a.add(\u0026#34;Grace\u0026#34;) employees_dept_a.remove(\u0026#34;Bob\u0026#34;) # Raises KeyError if not found employees_dept_a.discard(\u0026#34;Bob\u0026#34;) # No error if not found # Set operations # Union (all employees) all_employees = employees_dept_a | employees_dept_b # or all_employees = employees_dept_a.union(employees_dept_b) # Intersection (employees in both departments) in_both_depts = employees_dept_a \u0026amp; employees_dept_b # or in_both_depts = employees_dept_a.intersection(employees_dept_b) # Difference (employees in A but not in B) only_in_a = employees_dept_a - employees_dept_b # or only_in_a = employees_dept_a.difference(employees_dept_b) # Symmetric difference (employees in either dept but not both) in_one_dept = employees_dept_a ^ employees_dept_b # or in_one_dept = employees_dept_a.symmetric_difference(employees_dept_b) # Subset and superset is_subset = employees_dept_a \u0026lt;= employees_dept_b # False is_proper_subset = candidates \u0026lt; all_employees # True (candidates is a proper subset of all_employees) 4.3 Common Set Uses # Removing duplicates from a list transactions = [1001, 1002, 1001, 1003, 1002, 1004] unique_transactions = list(set(transactions)) # Membership testing (very efficient for large datasets) if \u0026#34;Jess\u0026#34; in employees_dept_a: print(\u0026#34;Jess works in Department A\u0026#34;) # Finding common elements customer_ids = {101, 102, 103, 104, 105} premium_ids = {102, 104, 106} common_ids = customer_ids \u0026amp; premium_ids # Set comprehensions even_numbers = {x for x in range(10) if x % 2 == 0} # {0, 2, 4, 6, 8} 5. Choosing the Right Data Structure Selecting the appropriate data structure can make your code more efficient and readable. Here\u0026rsquo;s a quick guide:\n5.1 When to Use Each Structure Use Lists when:\nYou need an ordered collection Items might need to be changed, added, or removed You need to store duplicate values You need to maintain insertion order Use Tuples when:\nYou have a fixed collection that shouldn\u0026rsquo;t change You want to return multiple values from a function You need elements that can serve as dictionary keys You want to ensure data integrity (immutability) Use Dictionaries when:\nYou need key-value mapping (lookups by key) You want fast lookups by a specific identifier You\u0026rsquo;re working with named attributes or properties You need to count occurrences of items Use Sets when:\nYou only care about unique values (no duplicates) You need to perform set operations (union, intersection) You want to quickly check if an item exists You\u0026rsquo;re removing duplicates from a collection 5.2 Performance Considerations Data structure choice affects performance. In general:\nLists: O(1) for append/pop at end, O(n) for insert/delete elsewhere Dictionaries: O(1) average for key lookups, insertions, and deletions Sets: O(1) average for membership testing, adding, removing # Example: Different approaches to counting word frequencies text = \u0026#34;to be or not to be that is the question\u0026#34; words = text.split() # Using a list (inefficient for counting) def count_with_list(words): counts = [] for word in words: found = False for item in counts: if item[0] == word: item[1] += 1 found = True break if not found: counts.append([word, 1]) return counts # Using a dictionary (efficient) def count_with_dict(words): counts = {} for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts # Even more concise with collections.Counter from collections import Counter def count_with_counter(words): return Counter(words) # Compare results print(count_with_list(words)) print(count_with_dict(words)) print(dict(count_with_counter(words))) Practice Exercise: Financial Portfolio Tracker Let\u0026rsquo;s apply these data structures by creating a simple portfolio tracker:\ndef portfolio_tracker(): # Initialise portfolio using a dictionary of dictionaries portfolio = {} transactions = [] while True: print(\u0026#34;\\nPortfolio Tracker\u0026#34;) print(\u0026#34;1. Add stock\u0026#34;) print(\u0026#34;2. Record transaction\u0026#34;) print(\u0026#34;3. View portfolio\u0026#34;) print(\u0026#34;4. View transaction history\u0026#34;) print(\u0026#34;5. Top holdings\u0026#34;) print(\u0026#34;6. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-6): \u0026#34;) if choice == \u0026#34;1\u0026#34;: ticker = input(\u0026#34;Enter stock ticker symbol: \u0026#34;).upper() company = input(\u0026#34;Enter company name: \u0026#34;) sector = input(\u0026#34;Enter sector: \u0026#34;) portfolio[ticker] = { \u0026#34;company\u0026#34;: company, \u0026#34;sector\u0026#34;: sector, \u0026#34;shares\u0026#34;: 0, \u0026#34;cost_basis\u0026#34;: 0, \u0026#34;current_price\u0026#34;: float(input(\u0026#34;Enter current price: $\u0026#34;)) } print(f\u0026#34;Added {ticker} to portfolio.\u0026#34;) elif choice == \u0026#34;2\u0026#34;: ticker = input(\u0026#34;Enter stock ticker symbol: \u0026#34;).upper() if ticker not in portfolio: print(f\u0026#34;Error: {ticker} not in portfolio. Add it first.\u0026#34;) continue transaction_type = input(\u0026#34;Buy or sell? \u0026#34;).lower() shares = int(input(\u0026#34;Number of shares: \u0026#34;)) price = float(input(\u0026#34;Price per share: $\u0026#34;)) date = input(\u0026#34;Date (YYYY-MM-DD): \u0026#34;) # Record transaction transaction = (date, ticker, transaction_type, shares, price) transactions.append(transaction) # Update portfolio if transaction_type == \u0026#34;buy\u0026#34;: # Calculate new cost basis current_shares = portfolio[ticker][\u0026#34;shares\u0026#34;] current_basis = portfolio[ticker][\u0026#34;cost_basis\u0026#34;] new_shares = current_shares + shares if new_shares \u0026gt; 0: # Avoid division by zero new_basis = (current_shares * current_basis + shares * price) / new_shares else: new_basis = 0 portfolio[ticker][\u0026#34;shares\u0026#34;] += shares portfolio[ticker][\u0026#34;cost_basis\u0026#34;] = new_basis elif transaction_type == \u0026#34;sell\u0026#34;: if portfolio[ticker][\u0026#34;shares\u0026#34;] \u0026lt; shares: print(\u0026#34;Error: Not enough shares.\u0026#34;) transactions.pop() # Remove the last transaction continue portfolio[ticker][\u0026#34;shares\u0026#34;] -= shares print(f\u0026#34;Transaction recorded. You now have {portfolio[ticker][\u0026#39;shares\u0026#39;]} shares of {ticker}.\u0026#34;) elif choice == \u0026#34;3\u0026#34;: if not portfolio: print(\u0026#34;Portfolio is empty.\u0026#34;) continue print(\u0026#34;\\nCurrent Portfolio:\u0026#34;) print(f\u0026#34;{\u0026#39;Ticker\u0026#39;:\u0026lt;6} {\u0026#39;Company\u0026#39;:\u0026lt;20} {\u0026#39;Sector\u0026#39;:\u0026lt;15} {\u0026#39;Shares\u0026#39;:\u0026lt;8} {\u0026#39;Cost Basis\u0026#39;:\u0026lt;12} {\u0026#39;Current\u0026#39;:\u0026lt;9} {\u0026#39;Value\u0026#39;:\u0026lt;12} {\u0026#39;Gain/Loss\u0026#39;:\u0026lt;10}\u0026#34;) print(\u0026#34;-\u0026#34; * 100) total_value = 0 for ticker, data in portfolio.items(): shares = data[\u0026#34;shares\u0026#34;] if shares \u0026gt; 0: # Only show stocks we still own cost_basis = data[\u0026#34;cost_basis\u0026#34;] current = data[\u0026#34;current_price\u0026#34;] value = shares * current gain_loss = value - (shares * cost_basis) print(f\u0026#34;{ticker:\u0026lt;6} {data[\u0026#39;company\u0026#39;][:20]:\u0026lt;20} {data[\u0026#39;sector\u0026#39;][:15]:\u0026lt;15} {shares:\u0026lt;8} ${cost_basis:\u0026lt;10.2f} ${current:\u0026lt;7.2f} ${value:\u0026lt;10.2f} ${gain_loss:\u0026lt;8.2f}\u0026#34;) total_value += value print(\u0026#34;-\u0026#34; * 100) print(f\u0026#34;Total Portfolio Value: ${total_value:.2f}\u0026#34;) elif choice == \u0026#34;4\u0026#34;: if not transactions: print(\u0026#34;No transactions recorded.\u0026#34;) continue print(\u0026#34;\\nTransaction History:\u0026#34;) print(f\u0026#34;{\u0026#39;Date\u0026#39;:\u0026lt;12} {\u0026#39;Ticker\u0026#39;:\u0026lt;6} {\u0026#39;Type\u0026#39;:\u0026lt;6} {\u0026#39;Shares\u0026#39;:\u0026lt;8} {\u0026#39;Price\u0026#39;:\u0026lt;8} {\u0026#39;Total\u0026#39;:\u0026lt;12}\u0026#34;) print(\u0026#34;-\u0026#34; * 55) for date, ticker, trans_type, shares, price in transactions: total = shares * price print(f\u0026#34;{date:\u0026lt;12} {ticker:\u0026lt;6} {trans_type:\u0026lt;6} {shares:\u0026lt;8} ${price:\u0026lt;6.2f} ${total:\u0026lt;10.2f}\u0026#34;) elif choice == \u0026#34;5\u0026#34;: if not portfolio: print(\u0026#34;Portfolio is empty.\u0026#34;) continue # Use a list to sort holdings by value holdings = [] for ticker, data in portfolio.items(): if data[\u0026#34;shares\u0026#34;] \u0026gt; 0: value = data[\u0026#34;shares\u0026#34;] * data[\u0026#34;current_price\u0026#34;] holdings.append((ticker, data[\u0026#34;company\u0026#34;], value)) # Sort by value (descending) holdings.sort(key=lambda x: x[2], reverse=True) print(\u0026#34;\\nTop Holdings:\u0026#34;) print(f\u0026#34;{\u0026#39;Rank\u0026#39;:\u0026lt;5} {\u0026#39;Ticker\u0026#39;:\u0026lt;6} {\u0026#39;Company\u0026#39;:\u0026lt;20} {\u0026#39;Value\u0026#39;:\u0026lt;12}\u0026#34;) print(\u0026#34;-\u0026#34; * 45) for i, (ticker, company, value) in enumerate(holdings[:5], 1): print(f\u0026#34;{i:\u0026lt;5} {ticker:\u0026lt;6} {company[:20]:\u0026lt;20} ${value:\u0026lt;10.2f}\u0026#34;) elif choice == \u0026#34;6\u0026#34;: print(\u0026#34;Thank you for using Portfolio Tracker!\u0026#34;) break else: print(\u0026#34;Invalid choice. Please try again.\u0026#34;) # Run the application if __name__ == \u0026#34;__main__\u0026#34;: portfolio_tracker() This example demonstrates:\nDictionaries for storing portfolio data Lists for transaction history Tuples for individual transactions Sorting and filtering data Calculating values based on stored data What\u0026rsquo;s Next? Now that we\u0026rsquo;ve covered Python\u0026rsquo;s core data structures, the next post will explore functions, modules, and file I/O—essential tools for organising your code and working with external data.\nStay tuned for Post 5: Functions, Modules \u0026amp; File I/O!\nThis post is part of my journey learning Python. I\u0026rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please reach out.\n","permalink":"https://michaelbrunger.com/python-core-data-structures/","summary":"\u003ch1 id=\"post-4-core-data-structures\"\u003ePost 4: Core Data Structures\u003c/h1\u003e\n\u003cp\u003eWelcome to the fourth post in my Python learning journey. So far, we\u0026rsquo;ve installed Python, set up a development environment, and explored the basic syntax. Now it\u0026rsquo;s time to dive deeper into Python\u0026rsquo;s core data structures; the building blocks you\u0026rsquo;ll use to organise and manipulate data in your programs.\u003c/p\u003e\n\u003cp\u003eIn this post, we\u0026rsquo;ll cover:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLists: Python\u0026rsquo;s versatile sequence type\u003c/li\u003e\n\u003cli\u003eTuples: Immutable collections\u003c/li\u003e\n\u003cli\u003eDictionaries: Key-value mapping\u003c/li\u003e\n\u003cli\u003eSets: Unique value collections\u003c/li\u003e\n\u003cli\u003eChoosing the right data structure\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI\u0026rsquo;ve found these data structures similar to concepts we use every day; lists are like columns in spreadsheets, dictionaries resemble lookup tables, and sets are perfect for tracking unique items like account codes.\u003c/p\u003e","title":"Part 4: Core Data Structures in Python"},{"content":"The KPI Crisis in Modern Business Most organisations are drowning in metrics while starving for insight. According to research by MIT Sloan Management Review, over 70% of executives believe their KPI systems don\u0026rsquo;t provide the strategic guidance they need (Neely \u0026amp; Bourne, 2020). This disconnect illustrates a fundamental problem: despite the prevalence of performance measurement systems, few organisations have metrics that genuinely drive improvement.\nAs David Parmenter explains in his seminal work \u0026ldquo;Key Performance Indicators: Developing, Implementing, and Using Winning KPIs\u0026rdquo; (2015), \u0026ldquo;Most organisations have been measuring the wrong things in the wrong way.\u0026rdquo; The result is what he calls \u0026ldquo;measurement dysfunction\u0026rdquo;—where metrics create perverse incentives, drive suboptimal behaviors, or simply fail to influence performance at all.\nParmenter\u0026rsquo;s Revolutionary KPI Framework What makes Parmenter\u0026rsquo;s approach revolutionary is his fundamental reclassification of performance measures. Unlike traditional approaches that treat all metrics as \u0026ldquo;KPIs,\u0026rdquo; Parmenter establishes a clear taxonomy:\nThe Four Types of Performance Measures Key Result Indicators (KRIs): High-level measures that tell the board how management has performed in a critical success factor or perspective Result Indicators (RIs): Tell you what you have done Performance Indicators (PIs): Tell you what to do Key Performance Indicators (KPIs): Tell you what to do to increase performance dramatically This distinction is critical. As Parmenter notes, \u0026ldquo;The term KPI has been misused for years. Most measures that organisations proudly call KPIs are simply performance indicators at best, and many are simply result indicators masquerading as KPIs\u0026rdquo; (Parmenter, 2015).\nThe 10/80/10 Rule Based on this taxonomy, Parmenter advocates for what he calls the \u0026ldquo;10/80/10 rule\u0026rdquo; for organisational measures:\n10 Key Result Indicators (KRIs) for the board Up to 80 Result Indicators (RIs) and Performance Indicators (PIs) for management 10 Key Performance Indicators (KPIs) for staff This structured approach helps organisations focus on what truly matters while avoiding metric overload.\nThe Seven Characteristics of True KPIs According to Parmenter (2015), genuine KPIs share seven essential characteristics:\nNonfinancial measures: Not expressed in dollars, euros, yen, etc. Measured frequently: Daily or weekly (not monthly or quarterly) Acted upon by senior management: Leadership demonstrates their importance Clear understanding: All staff understand the measure and what corrective action is required Ties to responsibility: Can be tied to a specific individual or team Significant impact: Affects multiple critical success factors Positive impact: Encourages appropriate action with minimal unintended consequences When evaluating potential KPIs, these characteristics provide a valuable litmus test. If a measure fails on multiple criteria, it\u0026rsquo;s likely not a true KPI.\nCommon KPI Mistakes and How to Avoid Them Mistake 1: Focusing Almost Exclusively on Financial Metrics As noted by Robert Kaplan and David Norton in their Balanced Scorecard work (1996), \u0026ldquo;Financial metrics tell you the results of decisions you made 1-3 months ago.\u0026rdquo; They are inherently backward-looking.\nSolution: Parmenter recommends that true KPIs be nonfinancial measures that lead to financial results rather than simply measuring them. For example, measure customer satisfaction (leading indicator) rather than just revenue (lagging indicator).\nMistake 2: Measuring Too Infrequently According to Parmenter (2015), \u0026ldquo;A monthly measure can never be a KPI\u0026hellip; it\u0026rsquo;s simply too old to be relevant for daily or weekly decision making.\u0026rdquo;\nSolution: Create systems that allow for more frequent measurement of critical metrics. With modern technology, many previously monthly metrics can now be tracked weekly or even daily.\nMistake 3: Setting Arbitrary Targets Many organisations set targets without understanding the measure\u0026rsquo;s natural performance range, resulting in what statistician W. Edwards Deming called \u0026ldquo;management by arbitrary numerical goal.\u0026rdquo;\nSolution: Use statistical process control principles to understand natural variation before setting targets. Parmenter suggests at least 15 data points to establish a baseline.\nMistake 4: Measuring Too Many Things A study by Bain \u0026amp; Company found that companies with effective KPI systems measured fewer things—they were focused on what truly mattered (Marr, 2012).\nSolution: Apply Parmenter\u0026rsquo;s 10/80/10 rule rigorously. For every new measure added, consider retiring an existing one.\nMistake 5: Failing to Distinguish Between Different Types of Measures As Parmenter says, \u0026ldquo;When you call everything a KPI, you end up with a dysfunctional measurement system\u0026rdquo; (Parmenter, 2015).\nSolution: Classify each measure using Parmenter\u0026rsquo;s taxonomy and manage each type appropriately.\nImplementing Parmenter\u0026rsquo;s KPI Methodology Step 1: Establish Critical Success Factors Before defining KPIs, organisations must identify their critical success factors (CSFs)—the limited number of areas where satisfactory results will ensure successful performance.\nParmenter recommends a structured workshop approach to identify 5-8 organisational CSFs. These become the foundation for all performance measures.\nStep 2: Develop Balanced Set of Performance Measures Building on Kaplan and Norton\u0026rsquo;s Balanced Scorecard (1996) and Parmenter\u0026rsquo;s refinements, measures should be balanced across six perspectives:\nCustomer satisfaction Financial performance Learning and growth Internal process efficiency Employee satisfaction Environment/community This balanced approach ensures no single aspect of performance is overemphasised at the expense of long-term sustainability.\nStep 3: Create Winning KPIs Parmenter recommends a bottom-up approach to KPI development:\nConvene a cross-functional team to identify potential measures Screen candidates against the seven KPI characteristics Test selected measures for a pilot period Refine based on feedback and observed impact Formalise the final KPI set Step 4: Develop Reporting Mechanisms For KPIs to drive performance, they must be reported effectively. Parmenter advocates for:\nDaily or weekly dashboard updates Exception-based reporting Visual displays that highlight trends Clear action thresholds As noted in his \u0026ldquo;Winning CFO\u0026rdquo; methodology (Parmenter, 2012), \u0026ldquo;The reporting of performance measures should focus on exception reporting rather than a complete snapshot of all measures.\u0026rdquo;\nStep 5: Facilitate Organisational Learning The final step is creating systems that encourage learning and improvement based on KPI results. This includes:\nRegular KPI review sessions Root cause analysis of significant variations Sharing of best practices across teams Continuous refinement of metrics Examples of Winning KPIs vs. Ineffective Measures To illustrate the difference between true KPIs and less effective measures, consider these examples from Parmenter\u0026rsquo;s work:\nTraditional Metrics vs. Winning KPIs Financial Perspective:\nTraditional: Monthly revenue (RI) Winning KPI: Late shipments to key customers (measured daily) Customer Perspective:\nTraditional: Quarterly customer satisfaction score (RI) Winning KPI: Number of customer complaints yesterday (KPI) Internal Process Perspective:\nTraditional: Monthly production efficiency (RI) Winning KPI: Production line downtime in last 24 hours (KPI) Employee Perspective:\nTraditional: Annual employee satisfaction (KRI) Winning KPI: Staff suggestions implemented in past week (KPI) Note how the winning KPIs are measured more frequently and are more actionable than their traditional counterparts.\nCase Study: Transforming KPIs at a Manufacturing Company (Note: This case study is adapted from examples in Parmenter\u0026rsquo;s publications)\nA mid-sized manufacturing company struggled with performance measurement despite having over 100 metrics tracked monthly. After implementing Parmenter\u0026rsquo;s methodology:\nThey identified six critical success factors through facilitated workshops Reduced their measurement set to 10 KRIs, 30 RIs/PIs, and 8 true KPIs Moved key measures from monthly to daily/weekly tracking Implemented visual management boards in each department Established regular performance dialogues around the KPIs Results after six months:\nOn-time delivery improved from 82% to 96% Customer complaints reduced by 45% Production efficiency increased by 15% Employee suggestions implemented rose from 5 to 35 per month The key insight: By measuring fewer things but measuring them correctly, the organisation gained far more insight and impact.\nCreating a KPI Implementation Roadmap Based on Parmenter\u0026rsquo;s \u0026ldquo;Four Foundation Stones\u0026rdquo; methodology (2015), here\u0026rsquo;s a practical roadmap for implementing effective KPIs:\nFoundation Stone 1: Partnership with Staff, Unions, and Third Parties Form a cross-functional KPI team Involve frontline staff in measure selection Train managers in performance coaching Address concerns about measurement openly Foundation Stone 2: Transfer of Power to the Front Line Push decision rights to where information exists Create visual management systems Establish action thresholds and response protocols Empower teams to adjust processes based on KPI signals Foundation Stone 3: Measure and Report Only What Matters Apply the 10/80/10 rule rigorously Report different measures to different audiences Focus on exception reporting Use technology to automate data collection Foundation Stone 4: Source KPIs from Critical Success Factors Identify organisational CSFs Derive department and team CSFs Align KPIs to these critical factors Review alignment quarterly The Financial Controller\u0026rsquo;s Role in KPI Implementation As financial controller, you have a unique opportunity to lead KPI transformation:\nEducation: Help the organisation understand the difference between various types of measures Facilitation: Lead workshops to identify CSFs and potential KPIs Integration: Connect KPIs to planning and budgeting processes Analysis: Provide insight into relationships between lead and lag indicators Technology: Champion systems that enable more frequent measurement As Parmenter notes in \u0026ldquo;The Leading-Edge Manager\u0026rsquo;s Guide to Success\u0026rdquo; (2011), \u0026ldquo;The finance team is uniquely positioned to lead performance measurement initiatives given their analytical skills and organisation-wide perspective.\u0026rdquo;\nSelf-Assessment: How Effective Are Your Current KPIs? Evaluate your current measurement system against these criteria:\nDo your \u0026ldquo;KPIs\u0026rdquo; meet Parmenter\u0026rsquo;s seven characteristics? How frequently are your most important measures updated? Can frontline staff explain how they influence key measures? Do your measures balance across all six perspectives? How many levels of approval are required to act on a KPI signal? Do you distinguish between different types of measures? The more \u0026ldquo;no\u0026rdquo; answers you have, the greater opportunity for improvement using Parmenter\u0026rsquo;s methodology.\nNext Steps for Your KPI Journey Audit current measures: Classify existing metrics into KRIs, RIs, PIs, and KPIs Workshop CSFs: Identify 5-8 organisational critical success factors Pilot better frequency: Select 2-3 metrics to measure more frequently Visual management: Create simple dashboards for team performance dialogues Review and refine: Establish a quarterly KPI review process Conclusion Effective performance measurement isn\u0026rsquo;t about more metrics—it\u0026rsquo;s about better metrics. As Parmenter emphasises, \u0026ldquo;Let\u0026rsquo;s put time, effort, and money into measuring those activities that, when done well, will deliver the results we need\u0026rdquo; (Parmenter, 2015).\nBy applying his systematic approach to KPIs, financial controllers can lead a transformation from measurement as a bureaucratic exercise to measurement as a performance driver.\nIn our next post, we\u0026rsquo;ll explore how to translate these KPI principles into lean financial reporting that executives actually read and use for decision-making.\nReferences Kaplan, R. S., \u0026amp; Norton, D. P. (1996). The Balanced Scorecard: Translating Strategy into Action. Harvard Business School Press.\nMarr, B. (2012). Key Performance Indicators: The 75 Measures Every Manager Needs to Know. Financial Times/Prentice Hall.\nNeely, A., \u0026amp; Bourne, M. (2020). Why Measurement Initiatives Fail. MIT Sloan Management Review.\nParmenter, D. (2011). The Leading-Edge Manager\u0026rsquo;s Guide to Success: Strategies and Better Practices. John Wiley \u0026amp; Sons.\nParmenter, D. (2012). Winning CFOs: Implementing and Applying Better Practices. John Wiley \u0026amp; Sons.\nParmenter, D. (2015). Key Performance Indicators: Developing, Implementing, and Using Winning KPIs (3rd ed.). John Wiley \u0026amp; Sons.\n","permalink":"https://michaelbrunger.com/effective-kpis-drive-business-performance/","summary":"\u003ch2 id=\"the-kpi-crisis-in-modern-business\"\u003eThe KPI Crisis in Modern Business\u003c/h2\u003e\n\u003cp\u003eMost organisations are drowning in metrics while starving for insight. According to research by MIT Sloan Management Review, over 70% of executives believe their KPI systems don\u0026rsquo;t provide the strategic guidance they need (Neely \u0026amp; Bourne, 2020). This disconnect illustrates a fundamental problem: despite the prevalence of performance measurement systems, few organisations have metrics that genuinely drive improvement.\u003c/p\u003e\n\u003cp\u003eAs David Parmenter explains in his seminal work \u0026ldquo;Key Performance Indicators: Developing, Implementing, and Using Winning KPIs\u0026rdquo; (2015), \u0026ldquo;Most organisations have been measuring the wrong things in the wrong way.\u0026rdquo; The result is what he calls \u0026ldquo;measurement dysfunction\u0026rdquo;—where metrics create perverse incentives, drive suboptimal behaviors, or simply fail to influence performance at all.\u003c/p\u003e","title":"KPIs That Actually Drive Performance"},{"content":"Post 3: Python Syntax Fundamentals \u0026amp; Language Features Welcome to the third post in my Python learning journey. In the first two posts, we installed Python and set up a proper development environment. Now it\u0026rsquo;s time to dive into the language itself. This post covers the fundamental building blocks of Python code that I\u0026rsquo;ve been learning.\nWe\u0026rsquo;ll explore:\nVariables and basic data types Operators and expressions Control flow with conditionals and loops List comprehensions and lambdas Iterators and generators Error handling with try/except This post is a bit longer than the previous ones, but these fundamentals form the foundation of everything else in Python, so it\u0026rsquo;s worth taking the time to understand them.\n1. Variables and Basic Data Types Python is dynamically typed, meaning you don\u0026rsquo;t need to declare variable types explicitly. Coming from Excel formulas where everything just works, I found this quite intuitive.\n1.1 Variables and Assignment Variables in Python are created when you first assign a value to them:\n# Creating variables name = \u0026#34;Alex\u0026#34; age = 35 hourly_rate = 45.50 is_python_fun = True Variable names:\nCan contain letters, numbers, and underscores Cannot start with a number Are case-sensitive (rate and Rate are different variables) Should follow the snake_case convention (lowercase with underscores) 1.2 Basic Data Types Python has several built-in data types:\nNumbers # Integers (whole numbers) count = 10 negative_number = -5 # Floating-point (decimals) pi = 3.14159 discount_rate = 0.15 # Complex numbers complex_number = 3 + 4j # Not often used in business applications Strings # Text enclosed in quotes (single or double) first_name = \u0026#34;John\u0026#34; last_name = \u0026#39;Doe\u0026#39; # Multi-line strings use triple quotes address = \u0026#34;\u0026#34;\u0026#34;123 Main Street Anytown, CA 12345\u0026#34;\u0026#34;\u0026#34; # String concatenation full_name = first_name + \u0026#34; \u0026#34; + last_name # \u0026#34;John Doe\u0026#34; # f-strings (Python 3.6+) - my preferred way to format strings greeting = f\u0026#34;Hello, {first_name}! You are {age} years old.\u0026#34; Booleans # True or False values is_active = True has_paid = False # Boolean operations is_valid_customer = is_active and has_paid # False can_contact = is_active or has_paid # True is_not_active = not is_active # False None Type # Represents absence of value (similar to NULL in databases) result = None 1.3 Type Conversion Python can convert between types:\n# String to number age_str = \u0026#34;35\u0026#34; age_num = int(age_str) # 35 as integer price_float = float(\u0026#34;45.50\u0026#34;) # 45.5 as float # Number to string count_str = str(10) # \u0026#34;10\u0026#34; as string # Check type of a variable print(type(age_num)) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 2. Operators and Expressions Python supports various operators for calculations and comparisons.\n2.1 Arithmetic Operators a = 10 b = 3 addition = a + b # 13 subtraction = a - b # 7 multiplication = a * b # 30 division = a / b # 3.3333... (always returns float) floor_division = a // b # 3 (integer division, rounds down) modulus = a % b # 1 (remainder of division) exponent = a ** b # 1000 (10 raised to power of 3) 2.2 Comparison Operators a = 10 b = 3 equal = a == b # False not_equal = a != b # True greater_than = a \u0026gt; b # True less_than = a \u0026lt; b # False greater_or_equal = a \u0026gt;= b # True less_or_equal = a \u0026lt;= b # False 2.3 Assignment Operators # Simple assignment x = 10 # Combined operators x += 5 # Same as x = x + 5 (x becomes 15) x -= 3 # Same as x = x - 3 (x becomes 12) x *= 2 # Same as x = x * 2 (x becomes 24) x /= 4 # Same as x = x / 4 (x becomes 6.0) 3. Control Flow Control flow determines the order in which code executes based on conditions and loops.\n3.1 Conditional Statements (if/elif/else) Python uses indentation (whitespace) to define code blocks:\nage = 25 if age \u0026lt; 18: print(\u0026#34;Minor\u0026#34;) elif age \u0026lt; 65: print(\u0026#34;Adult\u0026#34;) else: print(\u0026#34;Senior\u0026#34;) Multiple conditions:\nincome = 75000 years_employed = 3 if income \u0026gt; 50000 and years_employed \u0026gt;= 2: print(\u0026#34;Loan approved\u0026#34;) elif income \u0026gt; 30000 or years_employed \u0026gt;= 5: print(\u0026#34;Further review needed\u0026#34;) else: print(\u0026#34;Loan denied\u0026#34;) 3.2 Loops For Loops For loops iterate over sequences (lists, strings, etc.):\n# Loop through a list expenses = [1200, 450, 700, 95] total = 0 for expense in expenses: total += expense print(f\u0026#34;Total expenses: ${total}\u0026#34;) # Total expenses: $2445 # Loop with a range for i in range(5): # 0, 1, 2, 3, 4 print(i) # Loop with index and value using enumerate for index, value in enumerate(expenses): print(f\u0026#34;Expense {index+1}: ${value}\u0026#34;) While Loops While loops execute as long as a condition is true:\ncount = 0 while count \u0026lt; 5: print(count) count += 1 # Don\u0026#39;t forget this or you\u0026#39;ll create an infinite loop! # Break and continue number = 0 while True: # Infinite loop number += 1 if number == 3: continue # Skip the rest of this iteration if number == 6: break # Exit the loop entirely print(number) # Prints 1, 2, 4, 5 4. List Comprehensions and Lambdas These are more advanced features that make Python code concise and expressive.\n4.1 List Comprehensions List comprehensions provide a compact way to create lists:\n# Traditional way numbers = [1, 2, 3, 4, 5] squares = [] for n in numbers: squares.append(n * n) print(squares) # [1, 4, 9, 16, 25] # With list comprehension squares = [n * n for n in numbers] print(squares) # [1, 4, 9, 16, 25] # With conditional filtering even_squares = [n * n for n in numbers if n % 2 == 0] print(even_squares) # [4, 16] 4.2 Dictionary and Set Comprehensions Similar syntax works for dictionaries and sets:\n# Dictionary comprehension number_to_square = {n: n * n for n in numbers} print(number_to_square) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25} # Set comprehension (eliminates duplicates) values = [1, 2, 2, 3, 4, 4, 5] unique_values = {v for v in values} print(unique_values) # {1, 2, 3, 4, 5} 4.3 Lambda Functions Lambdas are small anonymous functions defined with the lambda keyword:\n# Traditional function def add(a, b): return a + b # Equivalent lambda function add_lambda = lambda a, b: a + b print(add(2, 3)) # 5 print(add_lambda(2, 3)) # 5 Lambdas are often used with functions like map(), filter(), and sorted():\n# Map applies a function to each item in an iterable numbers = [1, 2, 3, 4, 5] squared = list(map(lambda x: x * x, numbers)) print(squared) # [1, 4, 9, 16, 25] # Filter creates a list of elements for which a function returns True even_numbers = list(filter(lambda x: x % 2 == 0, numbers)) print(even_numbers) # [2, 4] # Sorted with a custom key function employees = [ {\u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;salary\u0026#34;: 60000}, {\u0026#34;name\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;salary\u0026#34;: 50000}, {\u0026#34;name\u0026#34;: \u0026#34;Charlie\u0026#34;, \u0026#34;salary\u0026#34;: 75000} ] sorted_by_salary = sorted(employees, key=lambda emp: emp[\u0026#34;salary\u0026#34;]) print(sorted_by_salary) # Sorts employees by salary 5. Iterators and Generators These features help process data efficiently, especially when working with large datasets.\n5.1 Iterators An iterator is an object that can be iterated (looped) over. Python\u0026rsquo;s for loops work with iterators:\n# Lists, tuples, dictionaries, and sets are all iterable numbers = [1, 2, 3] for num in numbers: # numbers.__iter__() is called implicitly print(num) You can create your own iterator:\n# Manual iteration with iter() and next() numbers = [1, 2, 3] iterator = iter(numbers) print(next(iterator)) # 1 print(next(iterator)) # 2 print(next(iterator)) # 3 # print(next(iterator)) # Would raise StopIteration exception 5.2 Generators Generators are functions that return an iterator using the yield keyword:\ndef count_up_to(max): count = 1 while count \u0026lt;= max: yield count count += 1 # Using the generator counter = count_up_to(5) print(next(counter)) # 1 print(next(counter)) # 2 # Or in a loop for number in count_up_to(3): print(number) # Prints 1, 2, 3 Generators are memory-efficient because they generate values on-demand rather than storing the entire sequence in memory. This is especially useful for large datasets.\n6. Error Handling with try/except Python uses exceptions to handle errors gracefully:\n# Basic try/except try: result = 10 / 0 # Division by zero raises an exception print(result) except ZeroDivisionError: print(\u0026#34;Cannot divide by zero!\u0026#34;) # Handling multiple exception types try: number = int(input(\u0026#34;Enter a number: \u0026#34;)) result = 100 / number print(result) except ValueError: print(\u0026#34;That\u0026#39;s not a valid number!\u0026#34;) except ZeroDivisionError: print(\u0026#34;Cannot divide by zero!\u0026#34;) # Try/except/else/finally try: file = open(\u0026#34;data.txt\u0026#34;, \u0026#34;r\u0026#34;) content = file.read() except FileNotFoundError: print(\u0026#34;File not found!\u0026#34;) else: # Runs if no exception occurred print(f\u0026#34;File content: {content}\u0026#34;) finally: # Always runs, regardless of exception if \u0026#39;file\u0026#39; in locals() and not file.closed: file.close() print(\u0026#34;File closed!\u0026#34;) Practice Exercise: Financial Calculator Let\u0026rsquo;s apply what we\u0026rsquo;ve learned to build a simple financial calculator:\nCreate a program that:\nAsks the user for their monthly income and expenses Calculates their monthly savings Projects savings over time with compound interest Handles invalid inputs gracefully with try/except Here\u0026rsquo;s a starter template:\ndef calculate_savings_projection(monthly_savings, annual_interest_rate, years): # Convert annual interest rate to monthly and decimal monthly_rate = annual_interest_rate / 100 / 12 months = years * 12 # Project savings total = 0 for month in range(1, months + 1): total = total + monthly_savings # Add monthly contribution interest = total * monthly_rate # Calculate interest total = total + interest # Add interest to total # Print yearly totals if month % 12 == 0: print(f\u0026#34;Year {month // 12}: ${total:.2f}\u0026#34;) return total try: income = float(input(\u0026#34;Enter your monthly income: $\u0026#34;)) expenses = float(input(\u0026#34;Enter your monthly expenses: $\u0026#34;)) monthly_savings = income - expenses if monthly_savings \u0026lt;= 0: print(\u0026#34;Your expenses exceed your income. No savings to project.\u0026#34;) else: interest_rate = float(input(\u0026#34;Enter annual interest rate (%): \u0026#34;)) years = int(input(\u0026#34;Enter number of years to project: \u0026#34;)) print(f\u0026#34;\\nMonthly savings: ${monthly_savings:.2f}\u0026#34;) print(f\u0026#34;Projecting growth over {years} years at {interest_rate}% annual interest:\u0026#34;) final_amount = calculate_savings_projection(monthly_savings, interest_rate, years) print(f\u0026#34;\\nFinal savings after {years} years: ${final_amount:.2f}\u0026#34;) except ValueError: print(\u0026#34;Please enter valid numbers only.\u0026#34;) What\u0026rsquo;s Next? Now that we\u0026rsquo;ve covered the syntax fundamentals, the next post will dive into Python\u0026rsquo;s core data structures in more detail. We\u0026rsquo;ll explore lists, tuples, dictionaries, and sets—and when to use each one.\nStay tuned for Post 4: Core Data Structures!\n*This post is part of my journey learning Python. I\u0026rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please reach out\n","permalink":"https://michaelbrunger.com/python-syntax-fundamentals/","summary":"\u003ch1 id=\"post-3-python-syntax-fundamentals--language-features\"\u003ePost 3: Python Syntax Fundamentals \u0026amp; Language Features\u003c/h1\u003e\n\u003cp\u003eWelcome to the third post in my Python learning journey. In the first two posts, we installed Python and set up a proper development environment. Now it\u0026rsquo;s time to dive into the language itself. This post covers the fundamental building blocks of Python code that I\u0026rsquo;ve been learning.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ll explore:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eVariables and basic data types\u003c/li\u003e\n\u003cli\u003eOperators and expressions\u003c/li\u003e\n\u003cli\u003eControl flow with conditionals and loops\u003c/li\u003e\n\u003cli\u003eList comprehensions and lambdas\u003c/li\u003e\n\u003cli\u003eIterators and generators\u003c/li\u003e\n\u003cli\u003eError handling with try/except\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis post is a bit longer than the previous ones, but these fundamentals form the foundation of everything else in Python, so it\u0026rsquo;s worth taking the time to understand them.\u003c/p\u003e","title":"Part 3: Python Syntax Fundamentals \u0026 Language Features"},{"content":"The Stereotype vs. The New Reality For decades, finance professionals—particularly accountants and controllers—have battled the \u0026ldquo;bean counter\u0026rdquo; stereotype: detail-oriented, historically focused, compliance-driven, and somewhat disconnected from the operational realities of the business. This perception, while increasingly outdated, persists in many organisations.\nAs David Parmenter notes in his book \u0026ldquo;The Leading-Edge Manager\u0026rsquo;s Guide to Success\u0026rdquo; (2011), \u0026ldquo;Yesterday\u0026rsquo;s finance team was renowned for producing financial information that was too late, too detailed, and not focused on what matters to the management team.\u0026rdquo; This observation captures the fundamental challenge that modern financial controllers must overcome.\nThe new reality demands something entirely different:\nBean Counter (Traditional Model):\nFocus on transactions and compliance \u0026ldquo;Scorekeeping\u0026rdquo; mentality Historical reporting Technical accounting expertise Risk aversion and control orientation Process standardisation Business Partner (Modern Model):\nFocus on strategy and value creation Forward-looking guidance Predictive analysis and scenario planning Broad business acumen Balanced risk management perspective Innovation and continuous improvement Parmenter\u0026rsquo;s \u0026ldquo;Winning Finance Team\u0026rdquo; Concept David Parmenter has been at the forefront of redefining the finance function\u0026rsquo;s role. In his \u0026ldquo;Winning CFO\u0026rdquo; methodology (Parmenter, 2012), he emphasises that truly effective finance teams operate as partners to the business rather than merely as providers of financial information.\nAccording to Parmenter, the winning finance team:\nSells the vision: Communicates the purpose behind finance initiatives Creates strategic alliances: Builds relationships across the organisation Maintains what\u0026rsquo;s working: Preserves effective practices while innovating Understands the customers: Knows what internal customers genuinely need Delivers \u0026ldquo;wow\u0026rdquo; projects: Implements high-impact initiatives Uses leading-edge methodologies: Employs best practices in performance management This framework provides a valuable roadmap for controllers seeking to reposition themselves from technical specialists to strategic partners.\nThe Four Faces of Finance Leadership Building on Parmenter\u0026rsquo;s work, Deloitte\u0026rsquo;s \u0026ldquo;Four Faces of the CFO\u0026rdquo; framework (Deloitte, 2021) offers another useful perspective on this evolution. While originally focused on CFO roles, it applies equally to controllers and finance managers:\nSteward: Preserving assets, ensuring compliance Operator: Running efficient finance operations Strategist: Helping to shape overall strategy and direction Catalyst: Instilling a financial approach and mindset across the organisation Traditional controllers excel at the first two faces but must develop competencies in the latter two to truly function as business partners. As noted in Deloitte\u0026rsquo;s research, high-performing finance teams spend approximately 60% of their time on strategist and catalyst activities, compared to just 30% for average teams.\nPractical Steps for Transformation 1. Develop Business Acumen Business partnership requires understanding the business beyond its financial statements. As Parmenter emphasises in \u0026ldquo;Winning CFO\u0026rdquo; (2012), finance professionals need to \u0026ldquo;walk in the shoes\u0026rdquo; of operational colleagues:\nSchedule regular operational visits: Spend time understanding how different departments function Learn the industry language: Master the terminology and metrics specific to your industry Study the value chain: Understand how your company creates and delivers value Know your customers: Gain insights into customer needs and behaviors 2. Build Relationships Intentionally According to McKinsey\u0026rsquo;s research on finance excellence (McKinsey \u0026amp; Company, 2020), relationship-building is a critical yet often overlooked aspect of finance transformation:\nMap your stakeholders: Identify key decision-makers and their priorities Establish regular touchpoints: Create structured opportunities for interaction Ask better questions: Focus on understanding business needs rather than just financial results Speak their language: Translate financial concepts into business terms 3. Shift from Reporting to Analysis Parmenter advocates for a fundamental shift in how finance teams allocate their time. In \u0026ldquo;Key Performance Indicators\u0026rdquo; (Parmenter, 2015), he suggests:\nReduce time spent on data compilation by 40-60% Increase time spent on analysis by 30-50% Focus reporting on exceptions and insights rather than comprehensive data This shift requires:\nAutomating routine processes: Implementing technology solutions for data collection and basic reporting Standardising analytics: Creating reusable frameworks for business analysis Developing forward-looking metrics: Building predictive models rather than just historical views 4. Master the Art of Communication Business partners must communicate effectively. As Parmenter emphasises in his \u0026ldquo;Winning KPIs\u0026rdquo; methodology (2015), numbers without context rarely drive action:\nKnow your audience: Tailor information to the recipient\u0026rsquo;s needs and preferences Focus on implications: Explain the \u0026ldquo;so what\u0026rdquo; behind the numbers Use visualisation effectively: Apply principles of data visualisation Tell stories with data: Frame information within relevant business narratives Research by the Corporate Executive Board (now Gartner) found that finance teams who effectively communicate insights are 24% more likely to be viewed as strategic partners.\n5. Lead Change Initiatives To be seen as a business partner, finance must actively drive improvement. In \u0026ldquo;The Leading-Edge Manager\u0026rsquo;s Guide to Success,\u0026rdquo; Parmenter (2011) emphasises the importance of leading \u0026ldquo;breakthrough projects\u0026rdquo;:\nIdentify high-impact opportunities: Focus on initiatives with significant ROI Apply project management discipline: Demonstrate structured implementation capabilities Measure and communicate results: Quantify the value created Build on successes: Use completed projects as springboards for further initiatives Common Challenges in Making the Transition Challenge 1: The Technical Comfort Zone Many finance professionals have built their careers on technical excellence. Stepping outside this comfort zone can be daunting.\nSolution: Start small by volunteering for cross-functional projects that allow you to apply financial expertise in a broader context while gradually developing new skills.\nChallenge 2: Credibility Gaps Operational colleagues may be skeptical of finance\u0026rsquo;s ability to add value beyond compliance and control.\nSolution: As Parmenter suggests in \u0026ldquo;Winning CFO\u0026rdquo; (2012), begin with \u0026ldquo;quick wins\u0026rdquo; that demonstrate tangible value to build credibility for larger initiatives.\nChallenge 3: Time Constraints The daily pressures of financial operations can make it difficult to allocate time to strategic activities.\nSolution: Apply Parmenter\u0026rsquo;s \u0026ldquo;fast close\u0026rdquo; methodology (2013) to streamline month-end processes, freeing up capacity for business partnering.\nChallenge 4: Skill Gaps Business partnering requires capabilities that may not have been developed through traditional accounting training.\nSolution: Invest in targeted development in areas like strategic thinking, influence skills, and business acumen through both formal and experiential learning.\nMeasuring Your Progress How do you know if you\u0026rsquo;re successfully making the transition from bean counter to business partner? Consider these metrics suggested by Parmenter and others:\nTime allocation: % of finance team time spent on analysis vs. transaction processing Meeting invitations: Frequency of inclusion in strategic business discussions Decision impact: % of business decisions influenced by finance input Satisfaction surveys: Ratings from internal customers on finance\u0026rsquo;s value contribution Initiative leadership: # of business improvement projects led by finance Case Study: Finance Transformation at Company XYZ (Note: This is an illustrative example based on Parmenter\u0026rsquo;s work with clients as described in his publications)\nA mid-sized manufacturing company found its finance team trapped in the traditional model—spending 80% of their time on transaction processing and reporting, with minimal time for analysis or business support.\nFollowing Parmenter\u0026rsquo;s methodology, they implemented several key changes:\nAutomated standard reports using dashboard technology Restructured the team to create dedicated business partner roles Implemented a fast close process to complete month-end in 3 days Established regular business review sessions with operational leaders The results were transformative:\nTime spent on reporting decreased from 60% to 30% Analysis time increased from 15% to 45% Internal customer satisfaction with finance increased by 40% Finance-led initiatives delivered $1.2M in cost savings Self-Assessment: Where Are You on the Journey? To assess your current position on the bean counter to business partner spectrum, consider these questions:\nDo operational colleagues proactively seek your input on business decisions? Can you clearly articulate your company\u0026rsquo;s competitive strategy and market position? Have you led or substantially contributed to a business improvement initiative in the past six months? Do your reports focus more on insights and recommendations than data compilation? How often do you spend time in operational areas of the business? Can you explain complex financial concepts in non-technical language? The more \u0026ldquo;yes\u0026rdquo; answers you have, the further along you are in your transformation journey.\nAction Items for Your First 90 Days Based on Parmenter\u0026rsquo;s \u0026ldquo;first 100 days\u0026rdquo; methodology for finance leaders (Parmenter, 2012), consider these priority actions:\nConduct a stakeholder analysis: Identify key business leaders and their priorities Schedule operational visits: Spend time understanding the business firsthand Review your reporting package: Identify opportunities for streamlining and insight enhancement Find a quick win: Identify and implement one high-visibility improvement Build your knowledge base: Dedicate time to understanding your industry and competitive landscape Conclusion: A Mindset Shift The transformation from bean counter to business partner is fundamentally about mindset. As Parmenter emphasises throughout his work, it requires shifting from:\nAccuracy to relevance Compliance to performance Past to future Data to insights Control to enablement Process to outcomes This journey won\u0026rsquo;t happen overnight, but with deliberate focus and consistent action, you can reposition yourself and your team as valued strategic partners rather than mere financial technicians.\nIn our next post, we\u0026rsquo;ll explore Parmenter\u0026rsquo;s approach to Key Performance Indicators and how to develop metrics that actually drive performance rather than just measure it.\nReferences Deloitte. (2021). Four Faces of the CFO. Deloitte Development LLC.\nMcKinsey \u0026amp; Company. (2020). The CFO\u0026rsquo;s Role in Helping Companies Navigate the Coronavirus Crisis. McKinsey \u0026amp; Company.\nParmenter, D. (2011). The Leading-Edge Manager\u0026rsquo;s Guide to Success: Strategies and Better Practices. John Wiley \u0026amp; Sons.\nParmenter, D. (2012). Winning CFOs: Implementing and Applying Better Practices. John Wiley \u0026amp; Sons.\nParmenter, D. (2013). Rapid Month-End Closing for Financial Managers. Wiley-Global Finance.\nParmenter, D. (2015). Key Performance Indicators: Developing, Implementing, and Using Winning KPIs. John Wiley \u0026amp; Sons.\n","permalink":"https://michaelbrunger.com/finance-bean-counter-to-business-partner/","summary":"\u003ch2 id=\"the-stereotype-vs-the-new-reality\"\u003eThe Stereotype vs. The New Reality\u003c/h2\u003e\n\u003cp\u003eFor decades, finance professionals—particularly accountants and controllers—have battled the \u0026ldquo;bean counter\u0026rdquo; stereotype: detail-oriented, historically focused, compliance-driven, and somewhat disconnected from the operational realities of the business. This perception, while increasingly outdated, persists in many organisations.\u003c/p\u003e\n\u003cp\u003eAs David Parmenter notes in his book \u0026ldquo;The Leading-Edge Manager\u0026rsquo;s Guide to Success\u0026rdquo; (2011), \u0026ldquo;Yesterday\u0026rsquo;s finance team was renowned for producing financial information that was too late, too detailed, and not focused on what matters to the management team.\u0026rdquo; This observation captures the fundamental challenge that modern financial controllers must overcome.\u003c/p\u003e","title":"From Bean Counter to Business Partner"},{"content":"Hugo + PaperMod Theme: A Complete Crash Course Introduction Hugo is a blazing fast static site generator written in Go. Combined with the elegant PaperMod theme, it\u0026rsquo;s a powerful solution for creating modern websites, blogs, and documentation. This crash course will guide you through setting up, configuring, and customising your Hugo site with PaperMod. This is how I created my site.\nInstallation Install Hugo First, you need to install Hugo on your system:\nOn macOS (using Homebrew): brew install hugo On Windows (using Chocolatey): choco install hugo -confirm On Linux (Debian/Ubuntu): sudo apt-get install hugo Verify your installation:\nhugo version Tip: you\u0026rsquo;ll need to install Chocolatey as well if not done already.\nCreating a New Site Create a new Hugo site:\nhugo new site mysitename cd mysitename This creates a new Hugo site in a folder named mysitename.\nInstalling the PaperMod Theme You can install the PaperMod theme in two ways:\nMethod 1: Using Git Submodules (Recommended) git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod Method 2: Manual Download Download the theme from GitHub Extract it to the themes/PaperMod directory Basic Configuration Create or modify the config.yml file in your site\u0026rsquo;s root directory:\nbaseURL: \u0026#34;https://yourwebsite.com/\u0026#34; title: \u0026#34;Your Site Title\u0026#34; pagerSize: 5 theme: PaperMod enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false minifyOutput: true params: env: production title: Your Site Title description: \u0026#34;Your site description\u0026#34; keywords: [Blog, Portfolio, PaperMod] author: Your Name DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: auto # dark, light, auto disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false disableScrollToTop: false comments: false hidemeta: false hideSummary: false showtoc: true tocopen: false assets: # disableFingerprinting: true favicon: \u0026#34;/favicon.ico\u0026#34; favicon16x16: \u0026#34;/favicon-16x16.png\u0026#34; favicon32x32: \u0026#34;/favicon-32x32.png\u0026#34; apple_touch_icon: \u0026#34;/apple-touch-icon.png\u0026#34; profileMode: enabled: false title: Your Name subtitle: \u0026#34;Your short bio here\u0026#34; imageUrl: \u0026#34;/images/profile.jpg\u0026#34; imageWidth: 120 imageHeight: 120 buttons: - name: Archives url: archives - name: Tags url: tags socialIcons: - name: twitter url: \u0026#34;https://twitter.com/\u0026#34; - name: github url: \u0026#34;https://github.com/\u0026#34; - name: linkedin url: \u0026#34;https://linkedin.com/in/\u0026#34; cover: hidden: false hiddenInList: false hiddenInSingle: false menu: main: - identifier: categories name: Categories url: /categories/ weight: 10 - identifier: tags name: Tags url: /tags/ weight: 20 - identifier: archives name: Archives url: /archives/ weight: 30 - identifier: search name: Search url: /search/ weight: 40 Content Management Creating Posts Create a new post:\nhugo new posts/my-first-post.md This creates a new file at content/posts/my-first-post.md with default front matter:\n--- title: \u0026#34;My First Post\u0026#34; date: 2023-04-29T10:30:00+00:00 draft: true tags: [\u0026#34;first\u0026#34;] categories: [\u0026#34;example\u0026#34;] --- Your content here... Remember to set draft: false when you\u0026rsquo;re ready to publish.\nFront Matter Options PaperMod supports many front matter options:\n--- title: \u0026#34;My Post Title\u0026#34; date: 2023-04-29 draft: false description: \u0026#34;Description of the post\u0026#34; tags: [\u0026#34;hugo\u0026#34;, \u0026#34;papermod\u0026#34;, \u0026#34;tutorial\u0026#34;] categories: [\u0026#34;web development\u0026#34;] weight: 1 cover: image: \u0026#34;/path/to/image.jpg\u0026#34; alt: \u0026#34;Alternative text\u0026#34; caption: \u0026#34;Image caption\u0026#34; relative: false showToc: true TocOpen: false hidemeta: false comments: false --- Content Structure content/\r├── posts/\r│ ├── post-1.md\r│ └── post-2.md\r├── about.md\r└── projects/\r├── project-1.md\r└── project-2.md Customising PaperMod Creating Homepage Layouts PaperMod offers three homepage layouts:\nDefault (List): Shows a list of posts Profile Mode: Focused on personal info Cover Mode: Shows a full-page cover image To enable Profile Mode, update your config.yml:\nparams: profileMode: enabled: true title: \u0026#34;Your Name\u0026#34; subtitle: \u0026#34;Your bio or tagline\u0026#34; imageUrl: \u0026#34;/images/profile.jpg\u0026#34; buttons: - name: Blog url: posts - name: Projects url: projects Adding Search Functionality Create a search page: hugo new search.md Add this content to search.md: --- title: \u0026#34;Search\u0026#34; layout: \u0026#34;search\u0026#34; summary: \u0026#34;search\u0026#34; placeholder: \u0026#34;Search posts...\u0026#34; --- Add search to your menu in config.yml: menu: main: - identifier: search name: Search url: /search/ weight: 10 Custom CSS Create a file at assets/css/extended/custom.css for your custom styles:\n/* Your custom styles here */ body { /* Custom body styles */ } .post-title { /* Custom post title styles */ } Custom Shortcodes Create custom shortcodes in layouts/shortcodes/:\nFor example, create layouts/shortcodes/notice.html:\n\u0026lt;div class=\u0026#34;notice {{ .Get 0 }}\u0026#34;\u0026gt; {{ .Inner | markdownify }} \u0026lt;/div\u0026gt; Use it in your content:\n{\u0026lt; notice info \u0026gt;} This is an info notice. {\u0026lt; /notice \u0026gt;} Deployment Local Preview Run a local server:\nhugo server -D This starts a server at http://localhost:1313/. The -D flag includes draft posts.\nBuilding for Production Build your site:\nhugo --minify This generates your site in the public/ directory, ready for deployment.\nDeployment Options GitHub Pages Create a .github/workflows/hugo.yml file: name: Deploy Hugo site on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public Set your repository settings to deploy from the gh-pages branch. Netlify Push your Hugo site to a GitHub repository Sign up for Netlify Import your repository Set build command to hugo --minify and publish directory to public Hugo Command Line Flags \u0026amp; Environment Variables Hugo offers numerous command line flags and environment variables that can significantly impact your development workflow and site performance.\nImportant Command Line Flags When using hugo server for local development:\n# Basic development server hugo server # Include draft content hugo server -D # Fast render mode (disable for accurate rendering) hugo server --disableFastRender # Force rebuilds on file changes hugo server --disableLiveReload # Bind to all network interfaces (access from other devices) hugo server --bind=\u0026#34;0.0.0.0\u0026#34; # Specify port hugo server --port=8080 # Watch for changes in theme folder too hugo server --ignoreCache --themesDir=../.. # Full rebuild on changes (slower but more accurate) hugo server --disableFastRender --renderToDisk When building your site for production:\n# Standard build hugo # Minify output hugo --minify # Include expired content hugo --buildExpired # Include future-dated content hugo --buildFuture # Include draft content (generally not for production) hugo --buildDrafts # Specify base URL hugo --baseURL=\u0026#34;https://example.com/\u0026#34; # Verbose output for debugging hugo -v Environment Variables # Set environment HUGO_ENV=production hugo # Change number of parallel workers HUGO_NUMWORKERMULTIPLIER=2 hugo # Cache settings HUGO_CACHEDIR=/path/to/cache hugo # Resource cache HUGO_RESOURCEDIR=/path/to/resources hugo # Disable symlinks in file detection HUGO_DISABLEPATHTOFILEBYDISABLEDSYMPATHY=true hugo # Disable .git directory ignore HUGO_IGNOREGIT=true hugo Performance Optimisation Flags # Enable HTTP/2 server push hugo server --http2 # Disable lazy loading of images hugo --disableLazyLoading # Control image processing concurrency HUGO_IMAGES_PROCESSOR_COUNT=4 hugo Configuration-Based Settings You can also set many of these options in your config.yml:\n# Build options buildDrafts: false buildFuture: false buildExpired: false disableFastRender: false enableGitInfo: true # Performance settings minify: true disableHugoGeneratorInject: true Troubleshooting Common Issues and Solutions Theme Not Showing: Check if the theme is properly installed and referenced in your config.yml\n# Check theme directory ls -la themes/ Taxonomy Pages Missing: Ensure you\u0026rsquo;ve defined taxonomies in your config\ntaxonomies: category: categories tag: tags Images Not Loading: Verify image paths and try using page bundles\nCreate a directory structure:\ncontent/\r└── posts/\r└── my-post/\r├── index.md\r└── images/\r└── featured.jpg Then reference with:\n![Alt text](images/featured.jpg) Hugo Server Error: Clear cache and restart\nhugo mod clean hugo server Advanced Features Adding a Comment System To add Disqus comments:\nUpdate your config.yml: disqusShortname: your-disqus-shortname Enable comments in front matter: --- title: \u0026#34;My Post with Comments\u0026#34; comments: true --- Multilingual Support Update your config.yml:\nlanguageCode: \u0026#34;en-us\u0026#34; defaultContentLanguage: \u0026#34;en\u0026#34; languages: en: languageName: \u0026#34;English\u0026#34; weight: 1 taxonomies: category: categories tag: tags fr: languageName: \u0026#34;Français\u0026#34; weight: 2 taxonomies: category: categories tag: tags Create language-specific content:\ncontent/\r├── posts/\r│ └── hello-world.md # English\r└── fr/\r└── posts/\r└── bonjour-monde.md # French Content Organisation with Page Bundles Page bundles keep content and its resources together:\ncontent/\r└── posts/\r└── my-bundled-post/\r├── index.md\r├── image1.jpg\r└── data.json Reference bundled resources in your content:\n![Featured Image](image1.jpg) Useful Resources Hugo Documentation PaperMod Wiki Hugo Forum PaperMod GitHub Repository Markdown Guide Learn Hugo in Under 2 Hours Conclusion This crash course has provided you with the essential knowledge to get started with Hugo and the PaperMod theme. As you become more comfortable, explore Hugo\u0026rsquo;s documentation and the PaperMod wiki for advanced features and customisation options.\nHugo\u0026rsquo;s strength lies in its flexibility and speed, while PaperMod offers a clean, modern design with excellent performance. Together, they provide an excellent foundation for your website.\nHappy building!\n","permalink":"https://michaelbrunger.com/hugo-papermod-theme/","summary":"\u003ch1 id=\"hugo--papermod-theme-a-complete-crash-course\"\u003eHugo + PaperMod Theme: A Complete Crash Course\u003c/h1\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e is a blazing fast static site generator written in Go. Combined with the elegant \u003ca href=\"https://github.com/adityatelange/hugo-PaperMod\"\u003ePaperMod theme\u003c/a\u003e, it\u0026rsquo;s a powerful solution for creating modern websites, blogs, and documentation. This crash course will guide you through setting up, configuring, and customising your Hugo site with PaperMod. This is how I created my site.\u003c/p\u003e\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\u003ch3 id=\"install-hugo\"\u003eInstall Hugo\u003c/h3\u003e\n\u003cp\u003eFirst, you need to install Hugo on your system:\u003c/p\u003e","title":"Hugo \u0026 PaperMod Theme"},{"content":"The Evolution of Finance Leadership When I earned my chartered accountant qualification, I envisioned a career focused primarily on technical accounting principles, financial reporting, and compliance. Fast forward to today, and the role of a finance manager has evolved into something far more dynamic and strategic than I could have anticipated. This transformation mirrors a broader shift in the finance profession—particularly for those in controller and finance manager positions.\nThe days of the financial controller as a mere \u0026ldquo;bean counter\u0026rdquo; are long behind us. Today\u0026rsquo;s financial controllers are expected to be strategic partners, data analysts, risk managers, technology implementers, and forward-looking advisors. We\u0026rsquo;re tasked not just with reporting what happened financially, but with providing insights that shape what will happen next.\nWhy This Blog Series? This blog series represents my commitment to \u0026ldquo;learning in public\u0026rdquo; as I navigate this evolving landscape. As a finance manager with a strong accounting foundation, I\u0026rsquo;m documenting my journey of growth and discovery—synthesizing insights from thought leaders in the field, particularly David Parmenter, whose practical approaches to finance leadership have been revolutionary.\nThrough these posts, I aim to:\nDistill key concepts from leading finance thinkers into practical, actionable advice Share implementation strategies that work in real-world scenarios Build a community of forward-thinking finance professionals Document my own transformation from technical accountant to strategic finance partner Who is David Parmenter? For those unfamiliar with his work, David Parmenter is a globally recognised expert in financial leadership, performance measures, and management reporting. His methodologies have transformed finance departments around the world, particularly through concepts like:\nDistinguishing between Key Result Indicators (KRIs) and genuine Key Performance Indicators (KPIs) Implementing \u0026ldquo;winning KPIs\u0026rdquo; that actually drive organisational performance Creating lean, focused reporting that executives actually use for decision-making Transitioning from traditional budgeting to rolling forecasts Developing \u0026ldquo;fast close\u0026rdquo; procedures that dramatically reduce month-end processing time Building finance teams that function as true business partners Throughout this series, I\u0026rsquo;ll be drawing extensively on Parmenter\u0026rsquo;s frameworks while also incorporating insights from other thought leaders such as Jeremy Hope, Robin Fraser, Robert Kaplan, and Jack Stack.\nThe Transformation of the Financial Controller Role The evolving expectations of financial controllers reflect broader changes in business:\nTraditional Controller Focus:\nHistorical reporting Transaction processing Compliance and control Budget variances Cost accounting Modern Controller Focus:\nStrategic decision support Business partnership Performance optimisation Predictive analytics Technology enablement Creating sustainable value According to a recent survey by McKinsey, companies with strong finance-business partnerships are 20% more likely to achieve breakthrough performance. Yet many finance departments struggle to make this transition effectively.\nWhat to Expect in This Series Over the coming weeks, I\u0026rsquo;ll be exploring:\nThe strategic partner mindset and how to develop it Performance measurement systems that drive meaningful action Reporting transformation to deliver insights, not just information Beyond budgeting methodologies that increase agility Process improvements that free up time for value-added work Building high-performance finance teams Leading business transformation from the finance office Technology enablement for modern finance functions Each post will combine theoretical frameworks with practical implementation steps, challenges you might face, and metrics to track your progress.\nMy Learning Approach As I mentioned, this series is part of my \u0026ldquo;learn in public\u0026rdquo; journey. I\u0026rsquo;m not presenting myself as the ultimate authority—rather, I\u0026rsquo;m sharing what I\u0026rsquo;m discovering as I implement these concepts in my own role.\nI invite you to join me in this learning journey:\nShare your experiences in the comments Suggest additional resources or experts I should explore Challenge assumptions and offer alternative perspectives Propose topics for deeper exploration Getting Started: Self-Assessment Before diving into the specific methodologies in future posts, I encourage you to consider where your finance function currently stands:\nWhat percentage of your finance team\u0026rsquo;s time is spent on transaction processing versus business partnering? Do your financial reports drive action, or do they simply communicate what happened? How quickly can you close your books at month-end? Does your budgeting process add value proportionate to the time invested? Are your finance team members viewed as strategic advisors by operational colleagues? Your answers to these questions will help you identify which upcoming posts in this series might be most valuable for your situation.\nComing Up Next In our next post, we\u0026rsquo;ll explore the specific mindset and skill shifts required to transition \u0026ldquo;From Bean Counter to Business Partner\u0026rdquo;—examining how traditional accounting expertise can be leveraged to provide strategic insights that drive business success.\nI look forward to embarking on this journey with you as we transform our finance functions into the strategic powerhouses they have the potential to become.\n","permalink":"https://michaelbrunger.com/modern-financial-controller-series-introduction/","summary":"\u003ch2 id=\"the-evolution-of-finance-leadership\"\u003eThe Evolution of Finance Leadership\u003c/h2\u003e\n\u003cp\u003eWhen I earned my chartered accountant qualification, I envisioned a career focused primarily on technical accounting principles, financial reporting, and compliance. Fast forward to today, and the role of a finance manager has evolved into something far more dynamic and strategic than I could have anticipated. This transformation mirrors a broader shift in the finance profession—particularly for those in controller and finance manager positions.\u003c/p\u003e\n\u003cp\u003eThe days of the financial controller as a mere \u0026ldquo;bean counter\u0026rdquo; are long behind us. Today\u0026rsquo;s financial controllers are expected to be strategic partners, data analysts, risk managers, technology implementers, and forward-looking advisors. We\u0026rsquo;re tasked not just with reporting what happened financially, but with providing insights that shape what \u003cem\u003ewill\u003c/em\u003e happen next.\u003c/p\u003e","title":"The Modern Financial Controller: Series Introduction"},{"content":"VS Code Mastery: A Beginner\u0026rsquo;s Guide to Being Productive So you\u0026rsquo;ve downloaded VS Code and opened it up. Now what? In this guide, I\u0026rsquo;ll walk you through everything I\u0026rsquo;ve learned about making VS Code work for you, especially if you\u0026rsquo;re just getting started.\nWhy I Chose VS Code Before getting into the details, let me share why I chose VS Code:\nLightweight enough to open quickly Powerful enough for serious development Enormous extension ecosystem Regular updates with new features Works consistently across Windows, Mac, and Linux Getting Started: The VS Code Interface When you first open VS Code, here\u0026rsquo;s what you\u0026rsquo;re looking at:\nActivity Bar: The vertical bar on the far left with icons for different views Side Bar: Shows different panels like Explorer, Search, and Extensions Editor Area: Where you edit your files (can be split!) Status Bar: At the bottom, showing helpful information Panel: Terminal, problems, output (toggle with Ctrl+J or Cmd+J on Mac) ![VS Code Interface Areas]\nDon\u0026rsquo;t worry if it feels like a lot—we\u0026rsquo;ll break it down piece by piece.\nEssential Keyboard Shortcuts I Use Daily Learning keyboard shortcuts dramatically improved my productivity. Here are the ones I use constantly:\nShortcut (Windows/Linux) Shortcut (Mac) Action Ctrl+P Cmd+P Quick Open file Ctrl+Shift+P Cmd+Shift+P Command Palette Ctrl+, Cmd+, User Settings Ctrl+B Cmd+B Toggle sidebar Ctrl+J Cmd+J Toggle panel (terminal) Ctrl+\\ Cmd+\\ Split editor Ctrl+Tab Cmd+Tab Switch between open files Alt+Up/Down Option+Up/Down Move line up/down Ctrl+D Cmd+D Add selection to next find match Ctrl+Space Cmd+Space Trigger suggestion F12 F12 Go to definition Alt+F12 Option+F12 Peek definition Ctrl+Shift+F Cmd+Shift+F Search across files Ctrl+~ Cmd+~ Open integrated terminal I found that learning just 3-4 shortcuts a week was manageable and made a huge difference over time.\nThe Command Palette: Your Best Friend If I could highlight just one feature, it would be the Command Palette (Ctrl+Shift+P or Cmd+Shift+P on Mac). It gives you access to virtually every command in VS Code.\nTry this right now:\nPress Ctrl+Shift+P (or Cmd+Shift+P on Mac) Type \u0026ldquo;theme\u0026rdquo; Select \u0026ldquo;Color Theme\u0026rdquo; Browse through available themes I use the Command Palette to:\nRun specific commands Change settings Open user/workspace settings Toggle features on/off Format documents And so much more! Pro tip: Commands prefixed with \u0026gt; are VS Code commands, while others are for navigating files or settings.\nFile Navigation That Saved Me Hours Finding files quickly is essential for productivity. Here\u0026rsquo;s how I navigate efficiently:\nQuick Open (Ctrl+P / Cmd+P) Just start typing the filename—it uses fuzzy matching so you don\u0026rsquo;t need the exact name.\nNavigating Inside Files Ctrl+G (Cmd+G on Mac): Go to specific line number Ctrl+Shift+O (Cmd+Shift+O): Navigate to symbols in the current file F12: Jump to definition Alt+F12: Peek definition (shows definition in a popup) Ctrl+Shift+\\: Jump to matching bracket Go Back/Forward Alt+Left/Right (Ctrl+- / Ctrl+Shift+- on Mac): Navigate back and forth through your position history Supercharging Your Editing These editing features have transformed how I write code:\nMulti-Cursor Editing This was a game-changer for me:\nAlt+Click (Option+Click on Mac): Add cursor at mouse position Ctrl+Alt+Up/Down (Cmd+Option+Up/Down): Add cursor above/below Ctrl+D (Cmd+D): Select next occurrence of current selection Ctrl+Shift+L (Cmd+Shift+L): Select all occurrences of current selection Text Manipulation Alt+Up/Down (Option+Up/Down): Move current line up/down Shift+Alt+Up/Down (Shift+Option+Up/Down): Copy line up/down Ctrl+Shift+K (Cmd+Shift+K): Delete line Ctrl+/ (Cmd+/): Toggle line comment Shift+Alt+A (Shift+Option+A): Toggle block comment Ctrl+Space (Cmd+Space): Trigger suggestions I use multi-cursor editing for bulk edits that would otherwise take forever.\nVS Code Extensions That Changed My Workflow Extensions are what make VS Code truly shine. Here are the ones I can\u0026rsquo;t live without:\nProductivity Boosters Prettier: Automatic code formatting ESLint: JavaScript linting GitLens: Enhanced Git capabilities Error Lens: Inline error display Auto Rename Tag: Automatically rename paired HTML/XML tags Path Intellisense: Autocompletes filenames Theme and Appearance Material Icon Theme: Better file icons One Dark Pro: My preferred theme Bracket Pair Colorizer 2: Color-codes matching brackets Language-Specific Extensions Python: Enhanced Python development Jupyter: Jupyter notebook support C/C++: For C language support markdownlint: Linting for markdown files Installing extensions is easy:\nClick the Extensions icon in the Activity Bar (or Ctrl+Shift+X) Search for the extension Click Install I recommend reviewing your extensions periodically and removing ones you don\u0026rsquo;t use to keep VS Code running smoothly.\nIntegrated Terminal: No More Window Switching The integrated terminal (Ctrl+`` or Cmd+`` on Mac) has saved me from constantly switching between windows:\nCreate multiple terminals by clicking the + button Split terminal views with the split button Switch between terminals with the dropdown Rename terminals for better organisation You can configure your default shell in settings:\nOpen Command Palette (Ctrl+Shift+P) Type \u0026ldquo;settings\u0026rdquo; Select \u0026ldquo;Preferences: Open Settings (JSON)\u0026rdquo; Add your preferred terminal settings: \u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;: \u0026#34;PowerShell\u0026#34;, \u0026#34;terminal.integrated.defaultProfile.linux\u0026#34;: \u0026#34;bash\u0026#34;, \u0026#34;terminal.integrated.defaultProfile.osx\u0026#34;: \u0026#34;zsh\u0026#34; Debugging Made Simple VS Code\u0026rsquo;s debugging capabilities eliminate the need for print statements everywhere:\nClick the Run and Debug icon in the Activity Bar Click \u0026ldquo;create a launch.json file\u0026rdquo; Select your environment Key debugging actions:\nF5: Start/Continue F9: Toggle breakpoint F10: Step over F11: Step into Shift+F11: Step out Ctrl+F5: Run without debugging The debug console lets you evaluate expressions and inspect variables in real-time, which was a revelation for me coming from print-based debugging.\nCustomising VS Code to Your Preferences VS Code\u0026rsquo;s customisation options are nearly endless. Here\u0026rsquo;s how I personalised mine:\nSettings.json My essential customisations:\n{ \u0026#34;editor.fontSize\u0026#34;: 14, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Fira Code\u0026#39;, Consolas, \u0026#39;Courier New\u0026#39;, monospace\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;esbenp.prettier-vscode\u0026#34;, \u0026#34;editor.minimap.enabled\u0026#34;: false, \u0026#34;editor.rulers\u0026#34;: [80, 120], \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;workbench.colorTheme\u0026#34;: \u0026#34;One Dark Pro\u0026#34;, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;material-icon-theme\u0026#34;, \u0026#34;terminal.integrated.fontSize\u0026#34;: 14, \u0026#34;files.autoSave\u0026#34;: \u0026#34;onFocusChange\u0026#34;, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;editor.bracketPairColorization.enabled\u0026#34;: true } You can access settings via:\nCtrl+, (Cmd+, on Mac) for the Settings UI Command Palette \u0026gt; \u0026ldquo;Preferences: Open Settings (JSON)\u0026rdquo; for JSON editing Workspace Settings For project-specific settings, create a .vscode folder in your project with:\nsettings.json: Project-specific settings launch.json: Debugging configurations tasks.json: Task configurations extensions.json: Recommended extensions This allows you to have different settings for different projects.\nWorking with Git Integration VS Code\u0026rsquo;s built-in Git support eliminates the need for separate Git clients:\nThe Source Control panel shows changes clearly Inline change markers show what\u0026rsquo;s changed in each file Commit, push, pull, and branch directly from VS Code Resolve merge conflicts with a visual interface To get started with Git:\nOpen a folder that\u0026rsquo;s a Git repository Make some changes Click the Source Control icon in the Activity Bar Stage changes by clicking the + icon Enter a commit message and press Ctrl+Enter to commit Adding GitLens extends these capabilities even further with blame annotations, history browsing, and more.\nSnippets: Stop Typing the Same Code Over and Over Custom snippets have saved me countless hours of typing repetitive code:\nOpen Command Palette \u0026gt; \u0026ldquo;Snippets: Configure User Snippets\u0026rdquo; Select a language or create a global snippet file Add your snippets: \u0026#34;Print to console\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;log\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;console.log(\u0026#39;$1\u0026#39;);\u0026#34;, \u0026#34;$2\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;Log output to console\u0026#34; } Now typing \u0026ldquo;log\u0026rdquo; and pressing Tab will insert console.log(''); with the cursor positioned between the quotes.\nI\u0026rsquo;ve created snippets for common patterns in each language I use.\nRemote Development: Life-Changing Feature Working on remote machines and containers transformed my development workflow:\nInstall the \u0026ldquo;Remote Development\u0026rdquo; extension pack Click the remote indicator in the bottom-left corner Select your remote connection type: SSH: Connect to remote servers WSL: Work in Windows Subsystem for Linux Containers: Work inside Docker containers This lets you use VS Code\u0026rsquo;s full power while code executes in a different environment—perfect for consistent development environments or working with remote servers.\nWorkspace Organisation for Large Projects For complex projects, I use these organisation features:\nMulti-root workspaces: Add multiple folders to a single workspace File explorer groups: Organise folders logically Workspace settings: Override settings for specific projects To create a multi-root workspace:\nOpen a folder Go to File \u0026gt; \u0026ldquo;Add Folder to Workspace\u0026rdquo; Save the workspace file (File \u0026gt; \u0026ldquo;Save Workspace As\u0026hellip;\u0026rdquo;) This approach is perfect for microservice architectures or when working with frontend and backend code simultaneously.\nLesser-Known Features Some features I discovered after using VS Code for a while:\nZen Mode: Ctrl+K Z (Cmd+K Z on Mac) for distraction-free coding Breadcrumbs: Navigate file structure at the top of editors Linked Editing: Edit HTML opening and closing tags simultaneously Emmet: Built-in HTML/CSS abbreviations (try typing div\u0026gt;ul\u0026gt;li*5 and pressing Tab) IntelliSense: Smart autocomplete that learns from your codebase Code Folding: Collapse sections with the arrows in the gutter Split Editor: Ctrl+\\ to edit files side by side Synchronising Settings Across Machines VS Code Settings Sync keeps my environment consistent across computers:\nClick the account icon in the bottom of the Activity Bar Turn on Settings Sync Select what to sync (settings, extensions, keybindings, etc.) Now your customisations follow you to any machine with VS Code installed.\nProblems I\u0026rsquo;ve Encountered (and How I Fixed Them) High Memory Usage Disable unused extensions Set \u0026quot;files.exclude\u0026quot; for large folders you don\u0026rsquo;t need indexed Use \u0026quot;search.exclude\u0026quot; to skip folders during searches Slow Performance Update VS Code to the latest version Try disabling extensions one by one to find the culprit Check for large files that might be slowing things down Language Server Issues Reinstall the language extension Check output panel for error messages Configure language server settings explicitly My Weekly VS Code Learning Habit I made the most progress with VS Code by adopting a simple habit: learn one new feature per week.\nOn a weekly basis:\nOpen the Command Palette Type \u0026ldquo;help\u0026rdquo; and select \u0026ldquo;Interactive Playground\u0026rdquo; Try one new feature or shortcut Practice it throughout the week This incremental approach helped me build confidence without feeling overwhelmed.\nConclusion: VS Code Changed How I Code When I first started using VS Code, I was just using it as a basic text editor. Now, it\u0026rsquo;s become an extension of my thinking process when coding. The features I\u0026rsquo;ve covered in this post have genuinely made me more productive and helped me write better code.\nDon\u0026rsquo;t feel like you need to learn everything at once! Start with the Command Palette and a few shortcuts, then gradually expand your knowledge. Before long, you\u0026rsquo;ll be navigating and editing code with an efficiency.\nResources for Going Further Official VS Code Documentation VS Code Tips and Tricks Keyboard Shortcut Reference Happy coding!\n","permalink":"https://michaelbrunger.com/vscode-mastery/","summary":"\u003ch1 id=\"vs-code-mastery-a-beginners-guide-to-being-productive\"\u003eVS Code Mastery: A Beginner\u0026rsquo;s Guide to Being Productive\u003c/h1\u003e\n\u003cp\u003eSo you\u0026rsquo;ve downloaded VS Code and opened it up. Now what?  In this guide, I\u0026rsquo;ll walk you through everything I\u0026rsquo;ve learned about making VS Code work for you, especially if you\u0026rsquo;re just getting started.\u003c/p\u003e\n\u003ch2 id=\"why-i-chose-vs-code\"\u003eWhy I Chose VS Code\u003c/h2\u003e\n\u003cp\u003eBefore getting into the details, let me share why I chose VS Code:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLightweight enough to open quickly\u003c/li\u003e\n\u003cli\u003ePowerful enough for serious development\u003c/li\u003e\n\u003cli\u003eEnormous extension ecosystem\u003c/li\u003e\n\u003cli\u003eRegular updates with new features\u003c/li\u003e\n\u003cli\u003eWorks consistently across Windows, Mac, and Linux\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"getting-started-the-vs-code-interface\"\u003eGetting Started: The VS Code Interface\u003c/h2\u003e\n\u003cp\u003eWhen you first open VS Code, here\u0026rsquo;s what you\u0026rsquo;re looking at:\u003c/p\u003e","title":"VS Code Mastery"},{"content":"Post 2: Text Editors vs. IDEs for Python Development Welcome to the second post in my Python learning series. Last time, we got Python installed and ran our first code. Now it\u0026rsquo;s time to set up a proper coding environment. Working directly with .py files in Notepad gets tedious quickly, so let\u0026rsquo;s explore better options for writing Python code.\nIn this post, we\u0026rsquo;ll cover:\nThe difference between text editors and IDEs Popular options for Python development Setting up VS Code for Python (my personal choice) Key productivity features that will save you time Running and debugging Python code from your editor 1. Text Editors vs. IDEs: What\u0026rsquo;s the Difference? When I started learning Python, I was confused about whether to use a \u0026ldquo;text editor\u0026rdquo; or an \u0026ldquo;IDE\u0026rdquo;. Here\u0026rsquo;s the simple breakdown:\nText Editors:\nLightweight applications primarily designed for editing text Minimal features out of the box, but often extensible with plugins Faster startup times and lower system resource usage Examples: Notepad++, Sublime Text, Atom Integrated Development Environments (IDEs):\nComprehensive software packages with built-in tools for development Include code completion, debugging, testing, and version control features More resource-intensive but offer productivity benefits Examples: PyCharm, Visual Studio, Eclipse Modern text editors with plugins can blur the line between these categories. For instance, VS Code is technically a text editor but can function like an IDE with the right extensions.\n2. Popular Options for Python Development Here are some commonly used tools for Python programming:\nText Editors Notepad++ (Windows only)\nFree and lightweight Basic syntax highlighting for Python Minimal Python-specific features Good for quick edits but limited for larger projects Sublime Text\nCross-platform (Windows, macOS, Linux) Fast and responsive with large files Package manager for extensions Free to evaluate, $99 license for continued use Atom\nOpen-source and free Highly customisable Good Git integration Can be slower with large projects IDEs Visual Studio Code (VS Code)\nFree, open-source, cross-platform Extensive extension library Lightweight but powerful Strong Python support through extensions My personal choice and what we\u0026rsquo;ll focus on in this post PyCharm\nPython-specific IDE by JetBrains Community (free) and Professional (paid) editions Comprehensive tools designed specifically for Python Steeper learning curve but powerful features Jupyter Notebooks\nInteractive coding environment Great for data analysis and visualisation Documents that combine code, output, and markdown text We\u0026rsquo;ll cover this in detail in a later post After trying several options, I settled on VS Code for its balance of performance and features. It\u0026rsquo;s lightweight enough to run smoothly on my machine but offers robust Python support.\n3. Setting Up VS Code for Python Development If you\u0026rsquo;re following along with me, let\u0026rsquo;s set up VS Code:\n3.1 Download and Install VS Code Go to https://code.visualstudio.com/ Download the installer for your operating system Run the installer with default options 3.2 Install Essential Python Extensions Launch VS Code Click the Extensions icon in the left sidebar (or press Ctrl+Shift+X) Search for and install these extensions: Python by Microsoft (essential) Pylance for improved language support Python Indent for automatic indentation 3.3 Configure Python Interpreter Open a Python file or create a new one (File \u0026gt; New File, then save with .py extension) Click on \u0026ldquo;Select Python Interpreter\u0026rdquo; in the bottom status bar Choose the Python installation you installed in Post 1 3.4 Set Up Code Formatting and Linting These tools help maintain code quality and consistent style:\nInstall the autopep8 formatter:\nOpen a terminal in VS Code (Terminal \u0026gt; New Terminal) Run: pip install autopep8 Configure formatter settings:\nPress Ctrl+Shift+P to open the command palette Type \u0026ldquo;Preferences: Open Settings (JSON)\u0026rdquo; Add these settings: \u0026#34;python.formatting.provider\u0026#34;: \u0026#34;autopep8\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;python.linting.enabled\u0026#34;: true, \u0026#34;python.linting.pylintEnabled\u0026#34;: true Install Pylint for code quality checking:\nIn the terminal, run: pip install pylint 4. Key Productivity Features Here are some features that have saved me hours of time while learning Python:\n4.1 Code Highlighting and IntelliSense VS Code automatically highlights Python syntax and provides IntelliSense (code completion):\nStart typing a Python keyword or function name VS Code shows suggestions as you type Press Tab to complete the suggestion Try it by typing pri and watching it suggest print().\n4.2 Code Snippets Snippets let you insert commonly used code patterns quickly:\nType if and press Tab VS Code inserts the if statement structure Fill in the condition and press Tab to move to the body Other useful snippets: for, def, class, try\n4.3 File Explorer and Multiple Files Having a file explorer helps manage projects with multiple files:\nUse File \u0026gt; Open Folder to open your project directory The left sidebar shows all files in that folder Create new files or folders directly in VS Code 4.4 Integrated Terminal No need to switch between VS Code and Command Prompt:\nPress Ctrl+` (backtick) or use Terminal \u0026gt; New Terminal Run Python code, install packages, or use Git commands 5. Running and Debugging Python Code 5.1 Running Python Files Method 1: Using the Play Button\nOpen a Python file Click the Play icon in the top-right corner Method 2: Using the Terminal\nOpen the integrated terminal (Ctrl+`) Run: python your_file.py 5.2 Introduction to Debugging Debugging helps you find and fix errors in your code:\nSet a breakpoint by clicking in the margin to the left of a line number (a red dot appears) Press F5 or click the Debug icon in the sidebar, then \u0026ldquo;Start Debugging\u0026rdquo; Your code runs until it hits the breakpoint, then pauses Examine variables in the \u0026ldquo;Variables\u0026rdquo; panel Use the debug toolbar to step through code line by line 5.3 Print-Driven Debugging vs. Using a Debugger When I first started coding, I relied heavily on print() statements to understand what was happening in my code:\ndef calculate_total(items): print(f\u0026#34;Items received: {items}\u0026#34;) # Debug print total = sum(items) print(f\u0026#34;Calculated total: {total}\u0026#34;) # Debug print return total While this works, using the debugger is more powerful:\nYou can inspect all variables without modifying code You can pause execution and examine the program state You don\u0026rsquo;t need to remove debug code when you\u0026rsquo;re done Practice Exercise Let\u0026rsquo;s put your new environment to use:\nCreate a new file called calculator.py in VS Code Write a simple function that takes two numbers and an operation (add, subtract, multiply, divide) and returns the result Add proper error handling (e.g., division by zero) Use print statements to test your function with various inputs Example solution (try it yourself first!):\ndef calculate(a, b, operation): if operation == \u0026#34;add\u0026#34;: return a + b elif operation == \u0026#34;subtract\u0026#34;: return a - b elif operation == \u0026#34;multiply\u0026#34;: return a * b elif operation == \u0026#34;divide\u0026#34;: if b == 0: return \u0026#34;Error: Division by zero\u0026#34; return a / b else: return \u0026#34;Error: Unknown operation\u0026#34; # Test the function print(calculate(10, 5, \u0026#34;add\u0026#34;)) # Should print 15 print(calculate(10, 5, \u0026#34;subtract\u0026#34;)) # Should print 5 print(calculate(10, 5, \u0026#34;multiply\u0026#34;)) # Should print 50 print(calculate(10, 5, \u0026#34;divide\u0026#34;)) # Should print 2.0 print(calculate(10, 0, \u0026#34;divide\u0026#34;)) # Should print error message Try using the debugger to step through this code and watch how the variables change.\nWhat\u0026rsquo;s Next? Now that we have our Python development environment set up, we\u0026rsquo;re ready to dive deeper into Python syntax and language features. In the next post, we\u0026rsquo;ll explore variables, data types, control flow, and more fundamental Python concepts.\nStay tuned for Post 3: Python Syntax Fundamentals \u0026amp; Language Features!\nThis post is part of my journey learning Python. I\u0026rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.\n","permalink":"https://michaelbrunger.com/python-foundations-editors-ides/","summary":"\u003ch1 id=\"post-2-text-editors-vs-ides-for-python-development\"\u003ePost 2: Text Editors vs. IDEs for Python Development\u003c/h1\u003e\n\u003cp\u003eWelcome to the second post in my Python learning series. Last time, we got Python installed and ran our first code. Now it\u0026rsquo;s time to set up a proper coding environment. Working directly with \u003ccode\u003e.py\u003c/code\u003e files in Notepad gets tedious quickly, so let\u0026rsquo;s explore better options for writing Python code.\u003c/p\u003e\n\u003cp\u003eIn this post, we\u0026rsquo;ll cover:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe difference between text editors and IDEs\u003c/li\u003e\n\u003cli\u003ePopular options for Python development\u003c/li\u003e\n\u003cli\u003eSetting up VS Code for Python (my personal choice)\u003c/li\u003e\n\u003cli\u003eKey productivity features that will save you time\u003c/li\u003e\n\u003cli\u003eRunning and debugging Python code from your editor\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-text-editors-vs-ides-whats-the-difference\"\u003e1. Text Editors vs. IDEs: What\u0026rsquo;s the Difference?\u003c/h2\u003e\n\u003cp\u003eWhen I started learning Python, I was confused about whether to use a \u0026ldquo;text editor\u0026rdquo; or an \u0026ldquo;IDE\u0026rdquo;. Here\u0026rsquo;s the simple breakdown:\u003c/p\u003e","title":"Part 2: Text Editors vs. IDEs for Python Development"},{"content":"PowerShell Essentials: A Comprehensive Guide Introduction to Command Line Interfaces Before diving into PowerShell specifically, it\u0026rsquo;s important to understand what command-line interfaces are and why they remain essential tools for modern computing.\nWhat is Command Prompt? Command Prompt (cmd.exe) is the traditional command-line interpreter for Windows operating systems. Dating back to MS-DOS, it allows users to interact with their computer by typing text commands rather than using a graphical user interface (GUI). While functional, Command Prompt has significant limitations:\nLimited scripting capabilities Inconsistent command syntax Text-only output format Limited access to Windows system components Why Use a Terminal? You might wonder why, in an age of sophisticated graphical interfaces, command-line terminals remain relevant. Here\u0026rsquo;s why terminals continue to be indispensable tools:\nEfficiency: Experienced users can execute complex operations faster than using GUI equivalents Automation: Commands can be scripted to automate repetitive tasks Remote administration: Servers and remote systems are often managed via command line Resource efficiency: Terminal operations typically use fewer system resources Precision: Commands provide explicit control over system operations Reproducibility: Command sequences can be saved, shared, and executed consistently Enter PowerShell: The Modern Command Line PowerShell represents Microsoft\u0026rsquo;s evolution of the command-line interface, designed to address the limitations of Command Prompt while providing a powerful environment for both casual users and system administrators.\nWhy PowerShell is Superior to Command Prompt PowerShell offers a number of advantages over traditional Command Prompt:\nObject-based pipeline: Commands pass entire objects rather than just text Consistent syntax: Commands follow a Verb-Noun pattern for intuitive learning Extensive .NET integration: Direct access to .NET framework capabilities Rich scripting language: Includes variables, functions, loops, conditions, and error handling Robust module system: Functionality can be extended through modules Remote management: Built-in remoting capabilities for managing distant systems Backward compatibility: Can still run most traditional cmd commands PowerShell has become Microsoft\u0026rsquo;s preferred command-line shell and scripting language, making it an essential skill for Windows administration and automation.\nGetting Started with PowerShell Opening PowerShell You can access PowerShell in several ways:\nSearch for \u0026ldquo;PowerShell\u0026rdquo; in the Windows start menu Right-click the Start button and select \u0026ldquo;Windows PowerShell\u0026rdquo; Press Win+X and select \u0026ldquo;Windows PowerShell\u0026rdquo; For the latest version, install \u0026ldquo;PowerShell 7\u0026rdquo; from the Microsoft Store or GitHub Understanding the PowerShell Interface When you open PowerShell, you\u0026rsquo;ll see a blue console window with a prompt that looks something like:\nPS C:\\Users\\YourUsername\u0026gt; The \u0026ldquo;PS\u0026rdquo; prefix indicates you\u0026rsquo;re in PowerShell, followed by your current directory location.\nEssential PowerShell Concepts Cmdlets: PowerShell Commands PowerShell commands are called \u0026ldquo;cmdlets\u0026rdquo; (pronounced \u0026ldquo;command-lets\u0026rdquo;) and follow a consistent Verb-Noun naming convention:\nGet-Process: Lists running processes Stop-Service: Stops a Windows service New-Item: Creates a new file or directory This standardised naming makes discovering and learning commands more intuitive.\nPipeline: Chaining Commands One of PowerShell\u0026rsquo;s most powerful features is the pipeline operator |, which passes the output of one command as input to another:\nGet-Process | Sort-Object -Property CPU -Descending | Select-Object -First 5 This command gets all processes, sorts them by CPU usage, and displays only the top 5.\nVariables Variables in PowerShell start with $:\n$name = \u0026#34;John\u0026#34; $age = 30 Write-Output \u0026#34;Hello, $name! You are $age years old.\u0026#34; Essential PowerShell Commands Navigation and File System Getting and Changing Location # Display current directory Get-Location # Alias: pwd # Change directory Set-Location C:\\Windows # Aliases: cd, chdir Listing Directory Contents # List items in current directory Get-ChildItem # Aliases: ls, dir # List with details Get-ChildItem -Force # Filter by extension Get-ChildItem -Filter *.txt Working with Files and Directories # Create a new directory New-Item -Path \u0026#34;C:\\temp\\NewFolder\u0026#34; -ItemType Directory # Create a new file New-Item -Path \u0026#34;C:\\temp\\test.txt\u0026#34; -ItemType File # Copy a file Copy-Item \u0026#34;C:\\temp\\test.txt\u0026#34; -Destination \u0026#34;C:\\temp\\test_backup.txt\u0026#34; # Move a file Move-Item \u0026#34;C:\\temp\\test.txt\u0026#34; -Destination \u0026#34;C:\\temp\\NewFolder\\test.txt\u0026#34; # Delete a file Remove-Item \u0026#34;C:\\temp\\test_backup.txt\u0026#34; # Read file content Get-Content \u0026#34;C:\\temp\\NewFolder\\test.txt\u0026#34; Navigating the File System (Useful Aliases) Below are a few useful aliases that I use to navigate the file system\nCommand/Alias Full Command Description Example ls Get-ChildItem Lists files and directories ls or ls -Force (to show hidden items) cd Set-Location Changes directory cd C:\\Users or cd ~ (home directory) pwd Get-Location Shows current directory path pwd mkdir New-Item -ItemType Directory Creates a new directory mkdir NewFolder pushd Push-Location Saves current location and moves to new location pushd C:\\Temp popd Pop-Location Returns to previously saved location popd cat Get-Content Displays file contents cat file.txt touch New-Item Creates a new file touch newfile.txt rm Remove-Item Deletes files or directories rm file.txt or rm -Recurse folder cp Copy-Item Copies files cp file.txt destination mv Move-Item Moves or renames files mv file.txt newname.txt System Information and Management Process Management # List all running processes Get-Process # Find specific processes Get-Process -Name \u0026#34;chrome\u0026#34; # Stop a process Stop-Process -Name \u0026#34;notepad\u0026#34; # Or by ID Stop-Process -Id 1234 Service Management # List all services Get-Service # Get specific service Get-Service -Name \u0026#34;wuauserv\u0026#34; # Windows Update service # Start a service Start-Service -Name \u0026#34;wuauserv\u0026#34; # Stop a service Stop-Service -Name \u0026#34;wuauserv\u0026#34; System Information # Basic system info Get-ComputerInfo # Operating system details Get-CimInstance Win32_OperatingSystem # Hardware information Get-CimInstance Win32_ComputerSystem # Disk information Get-PSDrive Networking Commands # Test network connection Test-NetConnection google.com # Ping a host Test-Connection google.com # Get IP configuration Get-NetIPConfiguration # Get DNS client server addresses Get-DnsClientServerAddress User and Security # Get current user $env:USERNAME # Get all local users Get-LocalUser # Create a new local user New-LocalUser -Name \u0026#34;NewUser\u0026#34; -Description \u0026#34;New user account\u0026#34; -NoPassword # Get user groups Get-LocalGroup Working with PowerShell Help PowerShell includes a comprehensive help system:\n# Get help on a cmdlet Get-Help Get-Process # Get detailed help with examples Get-Help Get-Process -Detailed Get-Help Get-Process -Examples # Update help files Update-Help PowerShell Scripting Basics Script Execution Policy By default, PowerShell restricts running scripts. To check your current policy:\nGet-ExecutionPolicy To change it (requires admin rights):\nSet-ExecutionPolicy RemoteSigned Common policies:\nRestricted: No scripts can run RemoteSigned: Local scripts can run; downloaded scripts need signing Unrestricted: All scripts can run (not recommended) Creating a Basic Script PowerShell scripts use the .ps1 extension. Create a file named hello.ps1:\n# hello.ps1 param( [string]$name = \u0026#34;World\u0026#34; ) Write-Output \u0026#34;Hello, $name!\u0026#34; Run it:\n.\\hello.ps1 .\\hello.ps1 -name \u0026#34;John\u0026#34; Basic Flow Control # If statement $age = 18 if ($age -ge 18) { Write-Output \u0026#34;Adult\u0026#34; } else { Write-Output \u0026#34;Minor\u0026#34; } # Foreach loop $fruits = @(\u0026#34;Apple\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Cherry\u0026#34;) foreach ($fruit in $fruits) { Write-Output \u0026#34;I like $fruit\u0026#34; } # While loop $i = 1 while ($i -le 5) { Write-Output \u0026#34;Count: $i\u0026#34; $i++ } Advanced PowerShell Features Working with Objects PowerShell\u0026rsquo;s object pipeline is powerful. For example, get specific properties:\nGet-Process | Select-Object -Property Name, CPU, ID | Sort-Object -Property CPU -Descending Filtering Objects # Filter processes using CPU more than 10 Get-Process | Where-Object { $_.CPU -gt 10 } # Find large files Get-ChildItem -Path C:\\ -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.Length -gt 1GB } PowerShell Modules Modules extend PowerShell\u0026rsquo;s functionality:\n# List available modules Get-Module -ListAvailable # Import a module Import-Module ActiveDirectory # Find commands in a module Get-Command -Module ActiveDirectory Remote Management PowerShell can manage remote computers:\n# Create a remote session $session = New-PSSession -ComputerName Server01 # Run command on remote computer Invoke-Command -ComputerName Server01 -ScriptBlock { Get-Process } # Enter interactive session Enter-PSSession -ComputerName Server01 PowerShell in Modern Windows Environments PowerShell and Windows Management PowerShell is essential for managing:\nWindows Server environments Active Directory Azure resources Microsoft 365 services Windows Subsystem for Linux (WSL) PowerShell 7 PowerShell 7 is the latest major version, offering:\nCross-platform support (Windows, macOS, Linux) New operators and language features Improved performance Parallel processing with ForEach-Object -Parallel Ternary operator: condition ? true-result : false-result Conclusion PowerShell has evolved from a simple shell into a comprehensive management framework and scripting language. Learning PowerShell fundamentals will dramatically increase your productivity when working with Windows systems and Microsoft services.\nBy understanding these essential commands and concepts, you\u0026rsquo;re now equipped to:\nNavigate the file system efficiently Manage system processes and services Automate repetitive tasks Gather detailed system information Perform remote administration As you continue your PowerShell journey, remember that the built-in help system is your best friend. Use Get-Help liberally, and explore the vast ecosystem of PowerShell modules that can extend your capabilities even further.\nAdditional Resources Microsoft PowerShell Documentation PowerShell GitHub Repository PowerShell.org - Community resources and forums PowerShell in a Month of Lunches - Excellent beginner book ","permalink":"https://michaelbrunger.com/powershell-essentials/","summary":"\u003ch1 id=\"powershell-essentials-a-comprehensive-guide\"\u003ePowerShell Essentials: A Comprehensive Guide\u003c/h1\u003e\n\u003ch2 id=\"introduction-to-command-line-interfaces\"\u003eIntroduction to Command Line Interfaces\u003c/h2\u003e\n\u003cp\u003eBefore diving into PowerShell specifically, it\u0026rsquo;s important to understand what command-line interfaces are and why they remain essential tools for modern computing.\u003c/p\u003e\n\u003ch3 id=\"what-is-command-prompt\"\u003eWhat is Command Prompt?\u003c/h3\u003e\n\u003cp\u003eCommand Prompt (cmd.exe) is the traditional command-line interpreter for Windows operating systems. Dating back to MS-DOS, it allows users to interact with their computer by typing text commands rather than using a graphical user interface (GUI). While functional, Command Prompt has significant limitations:\u003c/p\u003e","title":"Powershell Essentials"},{"content":"Git Crash Course for Beginners: Commands, Workflow \u0026amp; Terminology If you\u0026rsquo;re new to Git, you\u0026rsquo;re about to discover one of the most powerful tools in a developer\u0026rsquo;s toolkit. Git allows you to track changes, collaborate with others, and maintain different versions of your project. This comprehensive guide will take you through everything you need to know to get started with Git on Windows.\nSetting Up Git If you\u0026rsquo;ve already downloaded Git (which you mentioned you have), you\u0026rsquo;re one step ahead! Now let\u0026rsquo;s configure your identity:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; Run these commands once when you first install Git. They\u0026rsquo;ll associate your name and email with every commit you make.\nStarting a Project You have two options when starting with Git:\nCreate a New Repository mkdir my-project cd my-project git init This creates a new folder and initializes it as a Git repository.\nClone an Existing Repository git clone https://github.com/username/repository-name.git cd repository-name This downloads an existing project and its entire version history.\nThe Daily Git Workflow Here\u0026rsquo;s what a typical Git workflow looks like:\n1. Check Status (Run This Frequently) git status This shows what files have changed, what\u0026rsquo;s staged, and what\u0026rsquo;s not. Consider this your dashboard—check it often to understand what\u0026rsquo;s happening in your repository.\n2. Working with Changes Adding Files to the Staging Area\ngit add filename.txt # Add a specific file git add folder/ # Add an entire folder git add . # Add all changes Committing Your Changes\ngit commit -m \u0026#34;Clear description of your changes\u0026#34; Quick Commit for Already Tracked Files\ngit commit -am \u0026#34;Description of changes\u0026#34; 3. Working with Remote Repositories Push Your Changes to GitHub/GitLab/etc.\ngit push origin main Get the Latest Changes\ngit pull origin main See Remote Repository Information\ngit remote -v Add a Remote Repository\ngit remote add origin https://github.com/username/repository-name.git Branch Management Branches let you work on different features or fixes simultaneously.\nCreate and Switch to a New Branch\ngit checkout -b feature-name List All Branches\ngit branch # Local branches git branch -a # All branches including remote Merge a Branch\ngit checkout main # Switch to the target branch git merge feature-name Delete a Branch\ngit branch -d feature-name # Safe delete git branch -D feature-name # Force delete File Operations Discard Changes to a File\ngit checkout -- filename.txt Unstage a File\ngit restore --staged filename.txt Delete a File and Stage the Removal\ngit rm filename.txt Rename a File\ngit mv oldname.txt newname.txt Viewing History View Commit History\ngit log # Full history git log --oneline # Compact history git log --graph --oneline # Visual history View Changes in a Specific Commit\ngit show commit-hash See Changes Between Working Directory and Staging\ngit diff See Staged Changes\ngit diff --staged Fixing Mistakes Amend the Last Commit\ngit commit --amend -m \u0026#34;New commit message\u0026#34; Undo the Last Commit but Keep Changes\ngit reset HEAD~1 Completely Undo Last Commit and Changes\ngit reset --hard HEAD~1 Stash Changes Temporarily\ngit stash # Stash changes git stash pop # Retrieve stashed changes git stash list # List stashes Working with VS Code VS Code has excellent Git integration through its Source Control panel (Ctrl+Shift+G). You can:\nSee modified files Stage changes with a click Commit with a message Push/pull with buttons View diffs visually Resolve merge conflicts Real-World Workflows Adding New Code git status # See what\u0026#39;s changed git add . # Stage all changes git commit -m \u0026#34;Add login feature\u0026#34; # Commit changes git push origin main # Push to remote Fixing a Bug git checkout -b bugfix # Create a branch for your bugfix # Make your changes git add . # Stage changes git commit -m \u0026#34;Fix login validation bug\u0026#34; # Commit git checkout main # Switch back to main git pull origin main # Get latest changes git merge bugfix # Merge your bugfix git push origin main # Push to remote git branch -d bugfix # Delete the branch Deleting Files git rm obsolete-file.txt # Remove and stage deletion git commit -m \u0026#34;Remove obsolete file\u0026#34; # Commit deletion git push origin main # Push to remote Handling Merge Conflicts If a merge creates conflicts:\nOpen conflicted files in VS Code Look for conflict markers (\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;, =======, \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;) Edit to resolve conflicts Save files Run: git add . # Stage resolved files git commit # Commit the merge Git Terminology Glossary Understanding Git\u0026rsquo;s terminology is crucial for mastering the tool. Here\u0026rsquo;s a comprehensive glossary:\nCore Concepts Repository (Repo) - A storage location for your project that contains all files, folders, and the complete history of changes.\nWorking Directory - The files that you\u0026rsquo;re currently working with on your local machine.\nStaging Area (Index) - A middle ground between your working directory and repository where changes are prepared before committing.\nCommit - A snapshot of your repository at a specific point in time, including all tracked changes since the last commit.\nBranch - An independent line of development that allows you to work on features or fixes without affecting the main codebase.\nMain/Master - The default primary branch in your repository (traditionally called \u0026ldquo;master\u0026rdquo;, but \u0026ldquo;main\u0026rdquo; is now more common).\nHEAD - A pointer to the latest commit in your current branch; essentially \u0026ldquo;where you are now\u0026rdquo; in the repository\u0026rsquo;s history.\nClone - A complete copy of a repository, including all files and history.\nFork - A personal copy of someone else\u0026rsquo;s repository stored on your GitHub account.\nActions \u0026amp; Operations Stage - The act of preparing files for a commit by adding them to the staging area.\nCommit - The action of saving staged changes to the repository history.\nPush - Uploading commits from your local repository to a remote repository.\nPull - Downloading commits from a remote repository to your local repository and merging them.\nFetch - Downloading commits from a remote repository without automatically merging them.\nMerge - Combining changes from one branch into another.\nRebase - An alternative to merging that rewrites commit history by moving a branch to a new base commit.\nCheckout - Switching between branches or versions of files.\nStash - Temporarily storing uncommitted changes so you can work on something else.\nStorage Locations Local Repository - The Git repository stored on your computer.\nRemote Repository - A Git repository stored on a server or service (like GitHub, GitLab, Bitbucket).\nOrigin - The default name Git gives to the remote repository from which you cloned.\nUpstream - The original repository that you forked from (commonly used in open-source projects).\nConnection \u0026amp; Synchronization Remote - A connection to another repository, usually on a server.\nTracking Branch - A local branch that has a direct relationship to a remote branch.\nUpstream Branch - The remote branch that your local branch is tracking.\nChanges \u0026amp; Differences Modified - Files that have been changed but not yet staged.\nStaged - Files that have been added to the staging area and are ready to be committed.\nUntracked - Files in your working directory that Git isn\u0026rsquo;t monitoring.\nDiff - The difference between two versions of a file or sets of files.\nPatch - A file containing changes between versions that can be applied to another codebase.\nConflict Resolution Merge Conflict - Occurs when Git cannot automatically resolve differences between two sets of changes.\nConflict Markers - Special notation (\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;, =======, \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;) inserted by Git to show conflicting sections in files.\nResolution - The process of manually editing files to resolve conflicts between different versions.\nVersion References Hash/SHA - A unique identifier (e.g., a1b2c3d4...) for each commit in Git.\nTag - A named pointer to a specific commit, typically used for release versions.\nHEAD~n - A relative reference to the nth commit before HEAD.\nAdvanced Concepts Detached HEAD - A state where you\u0026rsquo;re viewing a specific commit rather than a branch.\nCherry-pick - Applying a specific commit from one branch to another.\nSubmodule - A repository embedded within another repository.\nGitignore - A file that tells Git which files or folders to ignore in a project.\nHook - Scripts that run automatically at certain points in Git\u0026rsquo;s execution.\nReflog - A log of where your HEAD and branches have been.\nFast-forward - A simplified merge that occurs when the target branch hasn\u0026rsquo;t changed since the feature branch was created.\nPractical Terminology Pull Request (PR) - On platforms like GitHub, a request to merge changes from one branch to another, usually with code review.\nCode Review - The process of examining code changes before they\u0026rsquo;re merged.\nBranch Protection - Rules that prevent certain actions on important branches without proper authorization.\nContinuous Integration (CI) - Automated testing that runs whenever code is pushed to a repository.\nContinuous Deployment (CD) - Automated deployment of code that passes CI tests.\nConclusion Git can seem intimidating at first, but with practice, these commands and concepts will become second nature. The key is to use Git regularly, starting with simple operations and gradually incorporating more advanced features into your workflow.\nRemember, Git is designed to be a safety net for your code. Don\u0026rsquo;t be afraid to experiment—you can always recover your work if something goes wrong. Happy coding!\n","permalink":"https://michaelbrunger.com/introduction-to-git/","summary":"\u003ch1 id=\"git-crash-course-for-beginners-commands-workflow--terminology\"\u003eGit Crash Course for Beginners: Commands, Workflow \u0026amp; Terminology\u003c/h1\u003e\n\u003cp\u003eIf you\u0026rsquo;re new to Git, you\u0026rsquo;re about to discover one of the most powerful tools in a developer\u0026rsquo;s toolkit. Git allows you to track changes, collaborate with others, and maintain different versions of your project. This comprehensive guide will take you through everything you need to know to get started with Git on Windows.\u003c/p\u003e\n\u003ch2 id=\"setting-up-git\"\u003eSetting Up Git\u003c/h2\u003e\n\u003cp\u003eIf you\u0026rsquo;ve already downloaded Git (which you mentioned you have), you\u0026rsquo;re one step ahead! Now let\u0026rsquo;s configure your identity:\u003c/p\u003e","title":"Introduction to Git"},{"content":"Post 1: Getting Started with Python on Windows Welcome to the first post in my Python learning series. As I learn Python myself, I\u0026rsquo;ll be documenting my journey here. This first post covers the essentials to get you up and running with Python on Windows:\nWhat Python is and why it\u0026rsquo;s worth learning Installing Python on Windows (with step-by-step instructions) Quick install notes for macOS \u0026amp; Linux users Writing your first \u0026ldquo;Hello, World!\u0026rdquo; program Using the Python interactive shell 1. What Is Python (and Why Learn It)? Python is a high-level, interpreted programming language that\u0026rsquo;s gained enormous popularity for good reason. After looking into various languages, I chose to learn Python because:\nReadability: Its clean syntax uses indentation and fewer symbols than languages like C++ or Java, making code easier to understand Versatility: It\u0026rsquo;s used across multiple domains from web development (Django, Flask) to data analysis (NumPy, pandas) and automation Package ecosystem: PyPI (Python Package Index) hosts over 400,000 third-party packages that extend Python\u0026rsquo;s capabilities Community support: Extensive documentation, forums, and tutorials make finding help straightforward For me as a finance professional, Python\u0026rsquo;s data analysis capabilities are particularly valuable, but its applications stretch across many fields.\n2. Installing Python on Windows Here\u0026rsquo;s how to get Python installed on Windows 10/11:\n2.1 Download the Installer Visit the official Python download page: https://www.python.org/downloads/windows Click the button for the latest stable release (currently Python 3.11.x) 2.2 Run the Installer Locate and double-click the downloaded file (typically named python-3.x.x-amd64.exe) IMPORTANT: Check the box that says \u0026ldquo;Add Python 3.x to PATH\u0026rdquo; at the bottom of the installer This allows you to run Python from any directory in Command Prompt Click \u0026ldquo;Install Now\u0026rdquo; for the standard installation, or \u0026ldquo;Customise installation\u0026rdquo; if you want to change specific options 2.3 Verify the Installation Open Command Prompt (press Win + R, type cmd, and hit Enter) Type the following command and press Enter: python --version You should see output like: Python 3.11.4 (Your version number might differ) 3. Quick Notes for macOS \u0026amp; Linux macOS:\nMany Macs come with Python 2.7 preinstalled, but you\u0026rsquo;ll want Python 3 The simplest approach is using Homebrew: brew install python Alternatively, download the installer from python.org Linux:\nMost Linux distributions include Python For Ubuntu/Debian: sudo apt update sudo apt install python3 python3-pip For complete instructions, see the official Python documentation:\nmacOS: https://docs.python.org/3/using/mac.html Linux: https://docs.python.org/3/using/unix.html 4. Your First \u0026ldquo;Hello, World!\u0026rdquo; Script Time to write your first Python program:\nIn Command Prompt, navigate to a folder where you want to create your script:\ncd C:\\Users\\YourUsername\\Documents Create a new file named hello.py using any text editor (Notepad, VS Code, etc.)\nType this line in the file:\nprint(\u0026#34;Hello, World!\u0026#34;) Save the file, then run it by typing in Command Prompt:\npython hello.py You should see:\nHello, World! Congratulations—you\u0026rsquo;ve written and executed your first Python program!\n5. Exploring the Python Interactive Shell Python comes with an interactive shell (also called a REPL—Read-Evaluate-Print Loop) that lets you test code snippets immediately:\nIn Command Prompt, simply type:\npython You\u0026rsquo;ll see the Python prompt (\u0026gt;\u0026gt;\u0026gt;) where you can type code directly:\n\u0026gt;\u0026gt;\u0026gt; 2 + 2 4 \u0026gt;\u0026gt;\u0026gt; name = \u0026#34;Python\u0026#34; \u0026gt;\u0026gt;\u0026gt; print(f\u0026#34;I\u0026#39;m learning {name}!\u0026#34;) I\u0026#39;m learning Python! Try some basic math:\n\u0026gt;\u0026gt;\u0026gt; 5 * 7 35 \u0026gt;\u0026gt;\u0026gt; 10 / 2 5.0 To exit, type:\n\u0026gt;\u0026gt;\u0026gt; exit() Or press Ctrl+Z followed by Enter on Windows.\nThe interactive shell is excellent for quick experiments and calculations without creating a file.\nPractice Exercise Before moving on, try this quick exercise:\nCreate a new Python file named greeting.py Write code that: Assigns your name to a variable Prints a greeting that includes your name Run the script to see the output Example solution (don\u0026rsquo;t peek until you\u0026rsquo;ve tried!):\nname = \u0026#34;Alex\u0026#34; print(f\u0026#34;Nice to meet you, {name}!\u0026#34;) What\u0026rsquo;s Next? Now that you have Python installed and have run your first code, you\u0026rsquo;re ready to:\nExplore text editors and IDEs that will make coding more efficient (coming in Post 2) Learn Python syntax fundamentals to build more complex programs Begin solving real problems with your new skills Stay tuned for Post 2: Text Editors vs. IDEs for Python Development!\nThis post is part of my journey learning Python. I\u0026rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.\n","permalink":"https://michaelbrunger.com/python-foundations-getting-started/","summary":"\u003ch1 id=\"post-1-getting-started-with-python-on-windows\"\u003ePost 1: Getting Started with Python on Windows\u003c/h1\u003e\n\u003cp\u003eWelcome to the first post in my Python learning series. As I learn Python myself, I\u0026rsquo;ll be documenting my journey here. This first post covers the essentials to get you up and running with Python on Windows:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWhat Python is and why it\u0026rsquo;s worth learning\u003c/li\u003e\n\u003cli\u003eInstalling Python on Windows (with step-by-step instructions)\u003c/li\u003e\n\u003cli\u003eQuick install notes for macOS \u0026amp; Linux users\u003c/li\u003e\n\u003cli\u003eWriting your first \u0026ldquo;Hello, World!\u0026rdquo; program\u003c/li\u003e\n\u003cli\u003eUsing the Python interactive shell\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-what-is-python-and-why-learn-it\"\u003e1. What Is Python (and Why Learn It)?\u003c/h2\u003e\n\u003cp\u003ePython is a high-level, interpreted programming language that\u0026rsquo;s gained enormous popularity for good reason. After looking into various languages, I chose to learn Python because:\u003c/p\u003e","title":"Part 1: Getting Started with Python on Windows"},{"content":"My Python Learning Journey Welcome to my Python learning series! As a finance professional exploring programming, I\u0026rsquo;m documenting my entire journey through 17 posts that take you from absolute beginner to building practical applications.\nWhat to Expect from This Series This series is designed for fellow finance professionals and beginners who want to learn Python in a practical, step-by-step manner. Each post builds on previous concepts while introducing new skills.\nSeries Overview Here\u0026rsquo;s what we\u0026rsquo;ll cover throughout the 17 posts:\nFoundations (Posts 1–6) 1. Getting Started with Python on Windows What is Python, why learn it, and where it\u0026rsquo;s used Installing Python (step‑by‑step Windows installer with screenshots) Quick pointers for macOS/Linux installs Your first \u0026ldquo;Hello, World!\u0026rdquo; script Exploring the interactive REPL (shell) 2. Text Editors vs. IDEs for Python Development Lightweight editors (Notepad++, Sublime) vs. full IDEs (VS Code, PyCharm) Setting up VS Code for Python (extensions, linting, auto‑format) Code highlighting, IntelliSense/autocomplete, and snippets Running and debugging code from your editor Quick intro to IDE‑based breakpoints vs. print‑driven debugging 3. Python Syntax Fundamentals \u0026amp; Language Features Variables, data types (numbers, strings, booleans) and operators Indentation and control flow (if/elif/else, loops) Comprehensions \u0026amp; lambdas: list/dict/set comprehensions, map/filter, anonymous functions Iterators \u0026amp; generators: the iterator protocol, writing your own with yield Basic error handling: try/except, else/finally 4. Core Data Structures Lists: creation, indexing, slicing, methods Tuples: immutability, packing/unpacking Dictionaries: key–value access, common methods Sets: uniqueness, union/intersection/difference Choosing the right structure for the task 5. Functions, Modules \u0026amp; File I/O Defining and calling functions (def, return, positional vs. keyword args) Variable scope and namespaces Organising code into modules and packages Exploring the Standard Library (math, random, datetime, os, sys) Reading from/writing to text files with open() and the with statement 6. Virtual Environments \u0026amp; Packaging Why virtual environments matter (avoiding dependency conflicts) Creating/activating/deactivating venv on Windows (and notes for macOS/Linux) Managing packages with pip: install, freeze, requirements.txt Basic packaging: project structure, setup.py/pyproject.toml essentials Publishing to PyPI with twine and versioning best practices Professional Best Practices (Posts 7–9) 7. Code Quality \u0026amp; Collaboration Version control fundamentals with Git \u0026amp; GitHub (clone, commit, push, pull requests) Writing clean, PEP 8‑compliant code; linting with flake8 Auto‑formatting with black and organising imports with isort Writing docstrings (Google vs. NumPy style) and auto‑generating docs (Sphinx overview) 8. Testing \u0026amp; Debugging Unit testing basics with unittest and pytest (assertions, test discovery) Fixtures in pytest and intro to TDD workflows Raising and defining custom exceptions (raise, subclassing Exception) Using the debugger: pdb commands and IDE‑based breakpoints Structured logging with the logging module (levels, handlers, formatting) 9. Command‑Line Tools \u0026amp; Automation Building CLI scripts with argparse: positional args, flags, help text Packaging entry points (console_scripts) for installable commands Automating file/folder tasks (os, shutil): renaming, organising, backups Automating GUI interactions with PyAutoGUI (keyboard/mouse control) Putting it all together in a sample automation project Core Tools \u0026amp; Data (Posts 10–13) 10. The Python Ecosystem \u0026amp; Interactive Data Workflows Clarify package vs. environment managers: pip vs. conda vs. Anaconda When and why to choose each (lightweight vs. data‑science bundles) Installing and exploring Anaconda Navigator Jupyter Notebooks: installing via pip/Anaconda, notebook anatomy (code vs. Markdown), basic plots inline 11. NumPy Fundamentals for Numerical Data Installing NumPy The ndarray: creation, indexing, slicing Vectorized operations and broadcasting rules Performance comparison vs. pure Python lists 12. Data Analysis with pandas Installing pandas Understanding Series and DataFrame objects Reading data (CSV, Excel), inspecting and summarising Selection, filtering, grouping, transformation Handling missing data 13. Data Visualisation Basics Matplotlib core: line, scatter, bar, histogram plots Customising labels, titles, legends Seaborn intro: statistical plot types (boxplot, heatmap) Saving figures to files for reports Intermediate Applications (Posts 14–17) 14. Introduction to Object‑Oriented Programming (OOP) Classes vs. objects, attributes vs. methods The init constructor and self Encapsulation, inheritance and polymorphism (simple examples) Why OOP matters: organising and reusing code 15. Web Development Foundations Option A: Flask (lightweight): setting up, routes, templates, serving static files Option B: Django (full‑featured): project/app structure, admin interface, ORM intro Option C: Web Scraping: requests + BeautifulSoup for HTML parsing Deploying your first minimal web app on a free hosting platform (e.g., Heroku) 16. Building Simple GUI Applications with Tkinter Installing/importing Tkinter (built‑in) Creating windows, labels, buttons, entry widgets Layout managers (pack, grid) A hands‑on mini‑project: e.g., basic calculator or temperature converter 17. Next Steps \u0026amp; Advanced Topics Concurrency \u0026amp; async: when to use threads vs. processes (threading, multiprocessing), intro to asyncio End‑to‑end mini‑project ideas (combine web, data, GUI, testing) Recommended books, courses, blogs, and community resources Tips for staying sharp: code challenges, open‑source contribution, local meetups ","permalink":"https://michaelbrunger.com/python-learning-path/","summary":"\u003ch2 id=\"my-python-learning-journey\"\u003eMy Python Learning Journey\u003c/h2\u003e\n\u003cp\u003eWelcome to my Python learning series! As a finance professional exploring programming, I\u0026rsquo;m documenting my entire journey through 17 posts that take you from absolute beginner to building practical applications.\u003c/p\u003e\n\u003ch2 id=\"what-to-expect-from-this-series\"\u003eWhat to Expect from This Series\u003c/h2\u003e\n\u003cp\u003eThis series is designed for fellow finance professionals and beginners who want to learn Python in a practical, step-by-step manner. Each post builds on previous concepts while introducing new skills.\u003c/p\u003e","title":"Python Learning Path: From Fundamentals to Intermediate Applications"}]