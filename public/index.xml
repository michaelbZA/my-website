<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Welcome to My Website on Michael Brunger</title><link>https://michaelbrunger.com/</link><description>Recent content in Welcome to My Website on Michael Brunger</description><image><title>Michael Brunger</title><url>https://michaelbrunger.com/site-feature-image.jpg</url><link>https://michaelbrunger.com/site-feature-image.jpg</link></image><generator>Hugo -- 0.146.7</generator><language>en-GB</language><atom:link href="https://michaelbrunger.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Daily Brief - Friday, May 30th, 2025</title><link>https://michaelbrunger.com/briefs/2025-05-30/</link><pubDate>Fri, 30 May 2025 13:33:26 +0000</pubDate><guid>https://michaelbrunger.com/briefs/2025-05-30/</guid><description>Daily intelligence brief covering tech, AI, politics, UK and world news</description><content:encoded><![CDATA[<h1 id="daily-intelligence-brief">Daily Intelligence Brief</h1>
<p><em>Friday, May 30th, 2025</em></p>
<h2 id="executive-summary">Executive Summary</h2>
<p>In recent developments, a US federal judge ruled that Google violated antitrust laws, marking a significant blow to Big Tech monopolies and potentially reshaping the search engine market. This comes amid growing scrutiny of tech leaders, with reports highlighting Elon Musk&rsquo;s increased drug use during the 2024 US presidential campaign, raising concerns about corporate governance. Internationally, Ukraine has hesitated to commit to new talks with Russia, underscoring ongoing geopolitical tensions, while in the UK, former Sinn FÃ©in leader Gerry Adams won a libel case against the BBC, reflecting sensitivities around historical political violence. These events signal heightened regulatory pressures and political uncertainties that could influence global markets and alliances.</p>
<p>Additionally, US defense advancements, such as the unveiling of the MV-75 tiltrotor aircraft to replace the Black Hawk, emphasize military modernization amid strategic threats. Economic highlights include a massive bonus for Ryanair&rsquo;s CEO, amid probes into political figures like Nashville&rsquo;s mayor for blocking immigration enforcement, pointing to broader themes of leadership accountability and fiscal disparities.</p>
<h2 id="key-trends--sentiment">Key Trends &amp; Sentiment</h2>
<ul>
<li><strong>Key Emerging Trends</strong>: 1. Increased regulatory scrutiny of tech monopolies, as seen in the Google antitrust ruling, potentially leading to more breakups or reforms. 2. Heightened focus on leadership fitness in politics and business, exemplified by allegations of cognitive decline in US administration and Elon Musk&rsquo;s personal controversies.</li>
<li><strong>Significant Sentiment Shifts</strong>: 1. Growing negative sentiment toward Big Tech, with public and regulatory backlash intensifying trust issues. 2. Polarized views on political accountability, as evidenced by reactions to libel cases and immigration probes, shifting from neutral to highly critical in media discourse.</li>
<li><strong>Key Future Implication</strong>: Antitrust actions against tech giants could spur innovation in competitive markets, but may also disrupt user experiences and global supply chains if remedies are aggressive.</li>
</ul>
<h2 id="key-developments">Key Developments</h2>
<ol>
<li>
<p><strong>Tech &amp; AI Developments</strong><br>
The most significant development is the US court&rsquo;s ruling that Google is a monopolist, violating the Sherman Act in its search dominance. This could lead to structural changes in the tech sector. Immediate market impact includes a dip in Google&rsquo;s stock and heightened investor uncertainty. Significance: High. (52 words)</p>
</li>
<li>
<p><strong>UK Political News</strong><br>
Gerry Adams&rsquo; libel victory against the BBC over allegations of sanctioning a murder highlights ongoing sensitivities around Northern Ireland&rsquo;s Troubles. Key party reactions include Sinn FÃ©in&rsquo;s defense of Adams and calls for media accountability from opposition groups. This underscores persistent political divisions. Significance: Medium. (58 words)</p>
</li>
<li>
<p><strong>Global Affairs</strong><br>
Ukraine&rsquo;s reluctance to engage in new Russia talks without seeing proposals reflects stalled diplomacy in the ongoing conflict. Regional implications include heightened tensions in Europe and potential escalations involving NATO allies. This development risks broader instability in Eastern Europe. Significance: High. (52 words)</p>
</li>
<li>
<p><strong>Economic &amp; Financial Updates</strong><br>
Ryanair CEO Michael O&rsquo;Leary&rsquo;s bonus exceeding â‚¬100m, tied to performance targets, highlights executive compensation disparities. Policy impacts include potential scrutiny from regulators on corporate incentives amid economic inequality debates. This could influence investor sentiment in aviation. Significance: Medium. (56 words)</p>
</li>
<li>
<p><strong>Climate &amp; Environment</strong><br>
No major environmental development emerged, but discussions on reversing the obesity epidemic indirectly touch on health-environment links, such as sustainable food systems. Policy changes are minimal, with calls for integrated health initiatives. This lack of progress signals ongoing challenges in global sustainability efforts. Significance: Low. (55 words)</p>
</li>
<li>
<p><strong>Security &amp; Defense</strong><br>
The US Army&rsquo;s unveiling of the MV-75 tiltrotor aircraft to replace the Black Hawk enhances rapid deployment capabilities against strategic threats. Defense implications include improved operational readiness and modernization, potentially deterring adversaries. This strengthens US military posture globally. Significance: High. (54 words)</p>
</li>
</ol>
<h2 id="key-takeaways">Key Takeaways</h2>
<ul>
<li><strong>Most Important Implications</strong>: 1. The Google antitrust ruling could fragment tech markets, fostering competition but risking innovation slowdowns. 2. Escalating global affairs, like Ukraine-Russia tensions, may lead to increased military alliances and economic sanctions. 3. Heightened scrutiny of political and corporate leaders, as in the Adams case and Musk reports, could erode public trust and prompt governance reforms.</li>
<li><strong>Developments to Watch</strong>: 1. Remedies in the Google case, which could reshape digital advertising. 2. Ukraine&rsquo;s response to Russian proposals, potentially altering European security dynamics. (108 words)</li>
</ul>
<p>(Total word count: 542)</p>
<h2 id="source-articles">Source Articles</h2>
<h3 id="bbc-news-">BBC News âšª</h3>
<p><strong><a href="https://www.bbc.com/news/articles/ceqg138lzr3o">Gerry Adams wins libel case against the BBC</a></strong><br>
<em>30/05/2025</em></p>
<p>The former Sinn FÃ©in leader was seeking damages over a story in which an anonymous contributor alleged he sanctioned the murder of Denis Donaldson&hellip;.</p>
<h3 id="fox-news-">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/politics/new-book-exposes-bidens-scripted-cabinet-meetings-amid-alleged-cognitive-decline-cover-up">New book exposes Biden&rsquo;s &lsquo;scripted&rsquo; Cabinet meetings amid alleged cognitive decline cover-up</a></strong><br>
<em>30/05/2025</em></p>
<p>Jake Tapper and Alex Thompson&rsquo;s &ldquo;Original Sin&rdquo; details former President Joe Biden&rsquo;s shrinking inner circle and limited access that raised concerns abo&hellip;</p>
<h3 id="the-verge-">The Verge âšª</h3>
<p><strong><a href="https://www.theverge.com/23869483/us-v-google-search-antitrust-case-updates">US v. Google: all the news from the search antitrust showdown</a></strong><br>
<em>30/05/2025</em></p>
<p>On August 5th, 2024, Judge Amit Mehta ruled in the case of United States of America v. Google, saying, â€œâ€¦the court reaches the following conclusion: G&hellip;</p>
<h3 id="techcrunch-">TechCrunch âšª</h3>
<p><strong><a href="https://techcrunch.com/2025/05/30/report-elon-musks-drug-use-ramped-up-during-the-2024-presidential-campaign/">Report: Elon Muskâ€™s drug use ramped up during the 2024 presidential campaign</a></strong><br>
<em>30/05/2025</em></p>
<p>Elon Musk increased his drug taking during the 2024 presidential campaign in which he donated around $270 million to help elect Donald Trump&hellip;.</p>
<h3 id="the-hindu-">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/cities/Hyderabad/enrolment-goes-up-in-telangana-but-learning-outcomes-and-jobs-remain-a-concern-finds-survey/article69637498.ece">Enrolment goes up in Telangana but learning outcomes and jobs remain a concern, finds survey</a></strong><br>
<em>30/05/2025</em></p>
<p>The Cabinet will work toward allocating more funds to address the pending issues, says minister&hellip;</p>
<h3 id="the-hindu--1">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/andhra-pradesh/need-to-align-schemes-with-niti-aayogs-sdgs-says-lanka-dinakar/article69637038.ece">Need to align schemes with NITI Aayogâ€™s SDGs, says Lanka Dinakar </a></strong><br>
<em>30/05/2025</em></p>
<p>The chairperson of the 20-Point Programme Implementation insists on seamless integration of data across websites and dashboards, and working in tune w&hellip;</p>
<h3 id="the-hindu--2">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/telangana/back-to-back-demonstrations-against-the-waqf-act/article69634133.ece">Back-to-back protests against the Waqf Act  </a></strong><br>
<em>30/05/2025</em></p>
<h3 id="the-hindu--3">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/bsf-troops-foil-pakistani-intruders-attempt-to-cross-the-international-border-in-pathankot/article69637813.ece">BSF troops foil Pakistani intruder&rsquo;s attempt to cross the International Border in Pathankot</a></strong><br>
<em>30/05/2025</em></p>
<p>In another operation on May 24, Border Security Forces neutralised a Pakistani intruder attempting to enter Indian territory in Banaskantha district, &hellip;</p>
<h3 id="the-hindu--4">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/tamil-nadu/stalin-condoles-death-of-vaikos-sister-saroja-justice-pon-bhaskaran/article69637192.ece">Stalin condoles death of Vaikoâ€™s sister Saroja, Justice Pon. Bhaskaran </a></strong><br>
<em>30/05/2025</em></p>
<p>He also visited the residence of Saroja and paid homage to her mortal remains&hellip;</p>
<h3 id="al-jazeera-">Al Jazeera âšª</h3>
<p><strong><a href="https://www.aljazeera.com/video/newsfeed/2025/5/30/what-to-know-about-mexicos-first-of-its-kind-judicial-elections?traffic_source=rss">What to know about Mexicoâ€™s first-of-its-kind judicial elections</a></strong><br>
<em>30/05/2025</em></p>
<p>Mexico will become the first country with judges selected entirely by public vote. Al Jazeera&rsquo;s John Holman explains&hellip;.</p>
<h3 id="fox-news--1">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/politics/move-over-black-hawk-army-unveils-mv-75-tiltrotor-aircraft-replace-iconic-assault-chopper">Move over, Black Hawk: Army unveils the MV-75, tiltrotor aircraft to replace iconic assault chopper</a></strong><br>
<em>30/05/2025</em></p>
<p>The MV-75, a tiltrotor aircraft, will replace the Black Hawk, boosting the U.S. Army&rsquo;s rapid deployment and modernization efforts against strategic th&hellip;</p>
<h3 id="fox-news--2">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/politics/scoop-top-congressional-committees-launch-probe-nashville-mayor-accused-blocking-ice">SCOOP: Top congressional committees launch probe into Nashville mayor accused of blocking ICE</a></strong><br>
<em>30/05/2025</em></p>
<p>The House Judiciary Committee and House Homeland Security Committee are launching a probe into Nashville Mayor Freddie O&rsquo;Connell&hellip;.</p>
<h3 id="the-verge--1">The Verge âšª</h3>
<p><strong><a href="https://www.theverge.com/nintendo/675590/nintendo-switch-pokemon-home-legends-za-generation-x">Nintendoâ€™s Switch era took PokÃ©mon collecting to the next level</a></strong><br>
<em>30/05/2025</em></p>
<p>Though the first Nintendo Switch era of PokÃ©mon games was undeniably rocky at times, it brought the series&rsquo; trading and organization systems into a ne&hellip;</p>
<h3 id="al-jazeera--1">Al Jazeera âšª</h3>
<p><strong><a href="https://www.aljazeera.com/program/the-stream/2025/5/30/can-we-reverse-the-obesity-epidemic?traffic_source=rss">Can we reverse the obesity epidemic?</a></strong><br>
<em>30/05/2025</em></p>
<p>We look at why ourÂ waistlines are expanding at an alarming rate&hellip;.</p>
<h3 id="fox-news--3">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/us/teen-from-allen-texas-wins-scripps-national-spelling-bee-eclaircissement">Teen from Allen, Texas wins Scripps National Spelling Bee with &rsquo;eclaircissement&rsquo;</a></strong><br>
<em>30/05/2025</em></p>
<p>Texas teenager Faizan Zaki won the 2025 Scripps National Spelling Bee after correctly spelling &ldquo;Ã©claircissement&rdquo; in the 21st round of the competition&hellip;.</p>
<h3 id="al-jazeera--2">Al Jazeera âšª</h3>
<p><strong><a href="https://www.aljazeera.com/news/2025/5/30/liverpool-parade-crash-driver-appears-in-uk-court?traffic_source=rss">Liverpool parade crash driver appears in UK court</a></strong><br>
<em>30/05/2025</em></p>
<p>A total of 79 people were injured after a car drove into a crowd after Liverpool Football Club&rsquo;s trophy parade&hellip;.</p>
<h3 id="fox-news--4">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/sports/nba-great-charles-barkley-shades-knicks-spike-lee-after-new-york-staves-off-elimination-game-5-victory">NBA great Charles Barkley shades Knicks, Spike Lee after New York staves off elimination with Game 5 victory</a></strong><br>
<em>30/05/2025</em></p>
<p>The New York Knicks defeated the Indiana Pacers in Game 5 of the Eastern Conference finals Thursday night, but Charles Barkley threw shade on the thei&hellip;</p>
<h3 id="al-jazeera--3">Al Jazeera âšª</h3>
<p><strong><a href="https://www.aljazeera.com/news/2025/5/30/ukraine-yet-to-commit-to-new-round-of-russia-talks-in-istanbul?traffic_source=rss">Ukraine yet to commit to new round of Russia talks in Istanbul</a></strong><br>
<em>30/05/2025</em></p>
<p>Foreign Minister Andrii Sybiha says Ukraine wants to see document outlining Russia&rsquo;s proposals before sending team&hellip;.</p>
<h3 id="bbc-news--1">BBC News âšª</h3>
<p><strong><a href="https://www.bbc.com/news/articles/cyvmgv25dg4o">Ryanair boss on target for bonus worth more than â‚¬100m</a></strong><br>
<em>30/05/2025</em></p>
<p>Michael Oâ€™Leary is set to earn a bonus worth more than â‚¬100m (Â£84m) after clearing a key performance target&hellip;.</p>
<h3 id="al-jazeera--4">Al Jazeera âšª</h3>
<p><strong><a href="https://www.aljazeera.com/opinions/2025/5/30/from-hunter-to-hoover-how-clemency-became-a-circus?traffic_source=rss">From Hunter to Hoover: How clemency became a circus</a></strong><br>
<em>30/05/2025</em></p>
<p>Biden and Trumpâ€™s clemency decisions reveal a justice system shaped by nepotism and spectacle, not fairness&hellip;.</p>
<hr>
<p><strong>Source Balance</strong>: This brief includes perspectives from left-leaning, center/neutral, and right-leaning sources to provide balanced coverage.</p>
<p><strong>Sources</strong>: BBC News, Fox News, The Verge, TechCrunch, The Hindu, Al Jazeera</p>
]]></content:encoded></item><item><title>Part 5: Functions, Modules &amp; File I/O in Python</title><link>https://michaelbrunger.com/python-functions-modules-file-io/</link><pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-functions-modules-file-io/</guid><description>Learn how to define and use functions, organize code into modules, leverage Python&amp;#39;s Standard Library, and perform file operations for reading and writing data.</description><content:encoded><![CDATA[<h1 id="functions-modules--file-io-in-python">Functions, Modules &amp; File I/O in Python</h1>
<p>These next concepts incredibly useful for organising code and working with external data. Let&rsquo;s explore how Python handles functions, modules, and file operations - all essential skills for financial analysis and reporting.</p>
<h2 id="defining-and-calling-functions">Defining and Calling Functions</h2>
<p>Functions are reusable blocks of code that perform specific tasks. They help keep your code DRY (Don&rsquo;t Repeat Yourself) and make it more maintainable.</p>
<h3 id="basic-function-syntax">Basic Function Syntax</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">function_name</span>(parameters):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Docstring explaining what the function does.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Function body</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result  <span style="color:#75715e"># Optional</span>
</span></span></code></pre></div><p>Here&rsquo;s a simple function that calculates compound interest:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_compound_interest</span>(principal, rate, time, compounds_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate compound interest.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        principal: Initial investment amount
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        rate: Annual interest rate (as decimal, e.g., 0.05 for 5%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        time: Time period in years
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        compounds_per_year: Number of times interest compounds per year (default=1)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        The final amount after compound interest
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> principal <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> rate<span style="color:#f92672">/</span>compounds_per_year)<span style="color:#f92672">**</span>(compounds_per_year<span style="color:#f92672">*</span>time)
</span></span></code></pre></div><p>Let&rsquo;s call this function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Calculate investment growth at 5% interest, compounded quarterly for 10 years</span>
</span></span><span style="display:flex;"><span>initial_investment <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>final_amount <span style="color:#f92672">=</span> calculate_compound_interest(
</span></span><span style="display:flex;"><span>    principal<span style="color:#f92672">=</span>initial_investment, 
</span></span><span style="display:flex;"><span>    rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>, 
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, 
</span></span><span style="display:flex;"><span>    compounds_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>initial_investment<span style="color:#e6db74">}</span><span style="color:#e6db74"> will grow to $</span><span style="color:#e6db74">{</span>final_amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> after 10 years&#34;</span>)
</span></span></code></pre></div><p><strong>Output:</strong></p>
<pre tabindex="0"><code>$10000 will grow to $16470.09 after 10 years
</code></pre><h3 id="function-arguments">Function Arguments</h3>
<p>Python offers flexible ways to handle function arguments:</p>
<h4 id="positional-vs-keyword-arguments">Positional vs. Keyword Arguments</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Positional arguments (order matters)</span>
</span></span><span style="display:flex;"><span>result1 <span style="color:#f92672">=</span> calculate_compound_interest(<span style="color:#ae81ff">10000</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Keyword arguments (order doesn&#39;t matter)</span>
</span></span><span style="display:flex;"><span>result2 <span style="color:#f92672">=</span> calculate_compound_interest(
</span></span><span style="display:flex;"><span>    rate<span style="color:#f92672">=</span><span style="color:#ae81ff">0.05</span>,
</span></span><span style="display:flex;"><span>    principal<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>,
</span></span><span style="display:flex;"><span>    compounds_per_year<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h4 id="default-parameter-values">Default Parameter Values</h4>
<p>In our function, <code>compounds_per_year=1</code> provides a default value if not specified:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using the default compounds_per_year (annual compounding)</span>
</span></span><span style="display:flex;"><span>annual_result <span style="color:#f92672">=</span> calculate_compound_interest(<span style="color:#ae81ff">10000</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;With annual compounding: $</span><span style="color:#e6db74">{</span>annual_result<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h4 id="variable-number-of-arguments">Variable Number of Arguments</h4>
<p>For functions that need to accept varying numbers of arguments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># *args collects extra positional arguments as a tuple</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sum_all_values</span>(<span style="color:#f92672">*</span>args):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Sum any number of values.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum(args)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># **kwargs collects extra keyword arguments as a dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_financial_report</span>(report_date, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Create a financial report with flexible data points.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    report <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;date&#34;</span>: report_date}
</span></span><span style="display:flex;"><span>    report<span style="color:#f92672">.</span>update(kwargs)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> report
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example usage</span>
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> sum_all_values(<span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">300</span>, <span style="color:#ae81ff">75</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total: $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>report <span style="color:#f92672">=</span> create_financial_report(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;2025-04-28&#34;</span>,
</span></span><span style="display:flex;"><span>    revenue<span style="color:#f92672">=</span><span style="color:#ae81ff">150000</span>,
</span></span><span style="display:flex;"><span>    expenses<span style="color:#f92672">=</span><span style="color:#ae81ff">95000</span>,
</span></span><span style="display:flex;"><span>    net_profit<span style="color:#f92672">=</span><span style="color:#ae81ff">55000</span>,
</span></span><span style="display:flex;"><span>    profit_margin<span style="color:#f92672">=</span><span style="color:#ae81ff">0.37</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(report)
</span></span></code></pre></div><h2 id="variable-scope-and-namespaces">Variable Scope and Namespaces</h2>
<p>Understanding scope is crucial for debugging and writing clean code.</p>
<h3 id="local-vs-global-scope">Local vs. Global Scope</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>total_assets <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000000</span>  <span style="color:#75715e"># Global variable</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roi</span>(profit):
</span></span><span style="display:flex;"><span>    investment <span style="color:#f92672">=</span> <span style="color:#ae81ff">100000</span>  <span style="color:#75715e"># Local variable</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> profit <span style="color:#f92672">/</span> investment <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># investment is not accessible here</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total assets: $</span><span style="color:#e6db74">{</span>total_assets<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> calculate_roi(<span style="color:#ae81ff">25000</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;ROI: </span><span style="color:#e6db74">{</span>roi<span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span></code></pre></div><p>Local variables exist only within their function. Global variables can be accessed inside functions, but to modify them, you need the <code>global</code> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">5000</span>  <span style="color:#75715e"># Global variable</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">deposit</span>(amount):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> balance  <span style="color:#75715e"># Tell Python we want to modify the global variable</span>
</span></span><span style="display:flex;"><span>    balance <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> balance
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">withdraw</span>(amount):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> balance
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> balance <span style="color:#f92672">&gt;=</span> amount:
</span></span><span style="display:flex;"><span>        balance <span style="color:#f92672">-=</span> amount
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> balance
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Insufficient funds&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Initial balance: $</span><span style="color:#e6db74">{</span>balance<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>deposit(<span style="color:#ae81ff">1000</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;After deposit: $</span><span style="color:#e6db74">{</span>balance<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>withdraw(<span style="color:#ae81ff">2000</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;After withdrawal: $</span><span style="color:#e6db74">{</span>balance<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="namespaces">Namespaces</h3>
<p>Python uses namespaces to organise names and avoid conflicts. Each module, function, and class has its own namespace.</p>
<h2 id="organising-code-into-modules-and-packages">Organising Code into Modules and Packages</h2>
<p>As your financial scripts grow, organising code becomes essential.</p>
<h3 id="modules">Modules</h3>
<p>A module is simply a <code>.py</code> file containing code. Let&rsquo;s create a financial utilities module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># financial_utils.py</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_roi</span>(profit, investment):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate Return on Investment as a percentage.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (profit <span style="color:#f92672">/</span> investment) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_npv</span>(cash_flows, discount_rate):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate Net Present Value of a series of cash flows.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cash_flows: List of cash flows, where index 0 is the initial investment (negative)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        discount_rate: Discount rate as decimal (e.g., 0.1 for 10%)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    npv <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> t, cash_flow <span style="color:#f92672">in</span> enumerate(cash_flows):
</span></span><span style="display:flex;"><span>        npv <span style="color:#f92672">+=</span> cash_flow <span style="color:#f92672">/</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> discount_rate) <span style="color:#f92672">**</span> t
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> npv
</span></span></code></pre></div><p>To use this module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># main.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> financial_utils
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate ROI</span>
</span></span><span style="display:flex;"><span>investment <span style="color:#f92672">=</span> <span style="color:#ae81ff">50000</span>
</span></span><span style="display:flex;"><span>profit <span style="color:#f92672">=</span> <span style="color:#ae81ff">12500</span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> financial_utils<span style="color:#f92672">.</span>calculate_roi(profit, investment)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;ROI: </span><span style="color:#e6db74">{</span>roi<span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate NPV of a project</span>
</span></span><span style="display:flex;"><span>cash_flows <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">100000</span>, <span style="color:#ae81ff">30000</span>, <span style="color:#ae81ff">35000</span>, <span style="color:#ae81ff">45000</span>, <span style="color:#ae81ff">50000</span>]  <span style="color:#75715e"># Initial investment + 4 years of returns</span>
</span></span><span style="display:flex;"><span>npv <span style="color:#f92672">=</span> financial_utils<span style="color:#f92672">.</span>calculate_npv(cash_flows, <span style="color:#ae81ff">0.08</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;NPV: $</span><span style="color:#e6db74">{</span>npv<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>You can also import specific functions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> financial_utils <span style="color:#f92672">import</span> calculate_roi, calculate_npv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Now use without the module prefix</span>
</span></span><span style="display:flex;"><span>roi <span style="color:#f92672">=</span> calculate_roi(<span style="color:#ae81ff">12500</span>, <span style="color:#ae81ff">50000</span>)
</span></span></code></pre></div><h3 id="packages">Packages</h3>
<p>Packages are directories containing multiple modules. They require an <code>__init__.py</code> file (which can be empty) to be recognised as packages.</p>
<pre tabindex="0"><code>finance_package/
â”œâ”€â”€ __init__.py
â”œâ”€â”€ analysis.py
â”œâ”€â”€ reporting.py
â””â”€â”€ utils.py
</code></pre><p>Using packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Import specific modules from a package</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> finance_package <span style="color:#f92672">import</span> analysis, reporting
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Import specific functions from a module in a package</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> finance_package.utils <span style="color:#f92672">import</span> calculate_roi
</span></span></code></pre></div><h2 id="exploring-the-standard-library">Exploring the Standard Library</h2>
<p>Python comes with a rich standard library. Here are some modules particularly useful for financial applications:</p>
<h3 id="math-module">Math Module</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> math
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate loan payment using the PMT formula</span>
</span></span><span style="display:flex;"><span>principal <span style="color:#f92672">=</span> <span style="color:#ae81ff">250000</span>
</span></span><span style="display:flex;"><span>annual_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.04</span>  <span style="color:#75715e"># 4%</span>
</span></span><span style="display:flex;"><span>years <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>monthly_rate <span style="color:#f92672">=</span> annual_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>num_payments <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Monthly payment formula</span>
</span></span><span style="display:flex;"><span>payment <span style="color:#f92672">=</span> principal <span style="color:#f92672">*</span> (monthly_rate <span style="color:#f92672">*</span> math<span style="color:#f92672">.</span>pow(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate, num_payments)) <span style="color:#f92672">/</span> (math<span style="color:#f92672">.</span>pow(<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> monthly_rate, num_payments) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Monthly mortgage payment: $</span><span style="color:#e6db74">{</span>payment<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="random-module">Random Module</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Simulate stock price movements (very simplified)</span>
</span></span><span style="display:flex;"><span>starting_price <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>daily_volatility <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.015</span>  <span style="color:#75715e"># 1.5%</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prices <span style="color:#f92672">=</span> [starting_price]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> day <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">30</span>):
</span></span><span style="display:flex;"><span>    change <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>normalvariate(<span style="color:#ae81ff">0</span>, daily_volatility)
</span></span><span style="display:flex;"><span>    new_price <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> change)
</span></span><span style="display:flex;"><span>    prices<span style="color:#f92672">.</span>append(new_price)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Starting price: $</span><span style="color:#e6db74">{</span>starting_price<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Ending price: $</span><span style="color:#e6db74">{</span>prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;30-day return: </span><span style="color:#e6db74">{</span>(prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">/</span>prices[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span><span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%&#34;</span>)
</span></span></code></pre></div><h3 id="datetime-module">Datetime Module</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime, timedelta
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate business days between dates</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">business_days_between</span>(start_date, end_date):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Count business days between two dates (excluding weekends).&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    days <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    current_date <span style="color:#f92672">=</span> start_date
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> current_date <span style="color:#f92672">&lt;=</span> end_date:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Monday = 0, Sunday = 6</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> current_date<span style="color:#f92672">.</span>weekday() <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>:  <span style="color:#75715e"># Only count weekdays (0-4)</span>
</span></span><span style="display:flex;"><span>            days <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        current_date <span style="color:#f92672">+=</span> timedelta(days<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> days
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate days until fiscal year end</span>
</span></span><span style="display:flex;"><span>today <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
</span></span><span style="display:flex;"><span>fiscal_year_end <span style="color:#f92672">=</span> datetime(today<span style="color:#f92672">.</span>year, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">31</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> today <span style="color:#f92672">&gt;</span> fiscal_year_end:
</span></span><span style="display:flex;"><span>    fiscal_year_end <span style="color:#f92672">=</span> datetime(today<span style="color:#f92672">.</span>year <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">31</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>business_days <span style="color:#f92672">=</span> business_days_between(today, fiscal_year_end)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Business days until fiscal year end: </span><span style="color:#e6db74">{</span>business_days<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="os-and-sys-modules">OS and Sys Modules</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the current working directory (useful for file paths)</span>
</span></span><span style="display:flex;"><span>current_dir <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getcwd()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Current directory: </span><span style="color:#e6db74">{</span>current_dir<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List all Excel files in the current directory</span>
</span></span><span style="display:flex;"><span>excel_files <span style="color:#f92672">=</span> [file <span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir() <span style="color:#66d9ef">if</span> file<span style="color:#f92672">.</span>endswith((<span style="color:#e6db74">&#39;.xlsx&#39;</span>, <span style="color:#e6db74">&#39;.xls&#39;</span>))]
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Excel files found:&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> excel_files:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;- </span><span style="color:#e6db74">{</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get Python version and platform information</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Python version: </span><span style="color:#e6db74">{</span>sys<span style="color:#f92672">.</span>version<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Platform: </span><span style="color:#e6db74">{</span>sys<span style="color:#f92672">.</span>platform<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h2 id="reading-fromwriting-to-text-files">Reading from/Writing to Text Files</h2>
<p>File operations are essential for financial data analysis, reporting, and automation.</p>
<h3 id="opening-and-closing-files">Opening and Closing Files</h3>
<p>The basic pattern is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Open a file in read mode</span>
</span></span><span style="display:flex;"><span>file <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;data.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Do something with the file</span>
</span></span><span style="display:flex;"><span>content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Close the file</span>
</span></span><span style="display:flex;"><span>file<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>However, this approach has problems if an error occurs before <code>close()</code>. The preferred way is using the <code>with</code> statement:</p>
<h3 id="the-with-statement">The with Statement</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Automatically handles proper closing of the file</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;data.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># File processing here</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># File is automatically closed when the block ends</span>
</span></span></code></pre></div><h3 id="reading-text-files">Reading Text Files</h3>
<p>Let&rsquo;s work with a sample CSV file containing financial transactions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Sample contents of transactions.csv:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># date,description,amount</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-15,Office supplies,-129.99</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-18,Client payment,1500.00</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-22,Software subscription,-49.99</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2025-01-30,Consulting fees,2750.00</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Read the entire file as a single string</span>
</span></span><span style="display:flex;"><span>    content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;File contents:&#34;</span>)
</span></span><span style="display:flex;"><span>    print(content)
</span></span></code></pre></div><p>Reading line by line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Skip header</span>
</span></span><span style="display:flex;"><span>    header <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>readline()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Initialise counters</span>
</span></span><span style="display:flex;"><span>    total_income <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    total_expenses <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process each transaction</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Remove whitespace and split by comma</span>
</span></span><span style="display:flex;"><span>        date, description, amount <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;,&#39;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Convert amount to float</span>
</span></span><span style="display:flex;"><span>        amount <span style="color:#f92672">=</span> float(amount)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> amount <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            total_income <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            total_expenses <span style="color:#f92672">+=</span> amount
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total income: $</span><span style="color:#e6db74">{</span>total_income<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total expenses: $</span><span style="color:#e6db74">{</span>total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Net cash flow: $</span><span style="color:#e6db74">{</span>total_income <span style="color:#f92672">+</span> total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="writing-to-text-files">Writing to Text Files</h3>
<p>Let&rsquo;s create a simple financial report:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Sample transaction data</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-15&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Office supplies&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">129.99</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-18&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Client payment&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#ae81ff">1500.00</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-22&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Software subscription&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">49.99</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;date&#34;</span>: <span style="color:#e6db74">&#34;2025-01-30&#34;</span>, <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Consulting fees&#34;</span>, <span style="color:#e6db74">&#34;amount&#34;</span>: <span style="color:#ae81ff">2750.00</span>}
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Calculate summary statistics</span>
</span></span><span style="display:flex;"><span>total_income <span style="color:#f92672">=</span> sum(t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> transactions <span style="color:#66d9ef">if</span> t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>total_expenses <span style="color:#f92672">=</span> sum(t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> transactions <span style="color:#66d9ef">if</span> t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>net_cash_flow <span style="color:#f92672">=</span> total_income <span style="color:#f92672">+</span> total_expenses
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Write the report to a file</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;financial_report.txt&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> report_file:
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;MONTHLY FINANCIAL REPORT</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;======================</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;TRANSACTION DETAILS:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;-----------------</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> transactions:
</span></span><span style="display:flex;"><span>        amount_str <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;$</span><span style="color:#e6db74">{</span>abs(t[<span style="color:#e6db74">&#39;amount&#39;</span>])<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> t[<span style="color:#e6db74">&#34;amount&#34;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            amount_str <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;-</span><span style="color:#e6db74">{</span>amount_str<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>t[<span style="color:#e6db74">&#39;date&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">{</span>t[<span style="color:#e6db74">&#39;description&#39;</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">20</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">{</span>amount_str<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">SUMMARY:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;--------</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Income:    $</span><span style="color:#e6db74">{</span>total_income<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Expenses:  $</span><span style="color:#e6db74">{</span>total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    report_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Net Cash Flow:   $</span><span style="color:#e6db74">{</span>net_cash_flow<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Financial report generated: financial_report.txt&#34;</span>)
</span></span></code></pre></div><h3 id="handling-different-file-modes">Handling Different File Modes</h3>
<ul>
<li><code>'r'</code>: Read (default)</li>
<li><code>'w'</code>: Write (creates new file or truncates existing)</li>
<li><code>'a'</code>: Append (adds to end of file)</li>
<li><code>'r+'</code>: Read and write</li>
<li><code>'b'</code>: Binary mode (used with other modes, e.g., <code>'rb'</code>)</li>
</ul>
<h2 id="working-with-csv-files">Working with CSV Files</h2>
<p>While you can process CSV files manually as shown above, Python&rsquo;s <code>csv</code> module makes it easier:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> csv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reading CSV</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;transactions.csv&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    csv_reader <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>DictReader(file)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process each row as a dictionary</span>
</span></span><span style="display:flex;"><span>    transactions <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> csv_reader:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Convert amount from string to float</span>
</span></span><span style="display:flex;"><span>        row[<span style="color:#e6db74">&#39;amount&#39;</span>] <span style="color:#f92672">=</span> float(row[<span style="color:#e6db74">&#39;amount&#39;</span>])
</span></span><span style="display:flex;"><span>        transactions<span style="color:#f92672">.</span>append(row)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Loaded </span><span style="color:#e6db74">{</span>len(transactions)<span style="color:#e6db74">}</span><span style="color:#e6db74"> transactions&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Writing CSV</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;budget_forecast.csv&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>, newline<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Define column headers</span>
</span></span><span style="display:flex;"><span>    fieldnames <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;month&#39;</span>, <span style="color:#e6db74">&#39;revenue&#39;</span>, <span style="color:#e6db74">&#39;expenses&#39;</span>, <span style="color:#e6db74">&#39;profit&#39;</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create CSV writer</span>
</span></span><span style="display:flex;"><span>    csv_writer <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>DictWriter(file, fieldnames<span style="color:#f92672">=</span>fieldnames)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Write header row</span>
</span></span><span style="display:flex;"><span>    csv_writer<span style="color:#f92672">.</span>writeheader()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Write data rows</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Simple forecast model (for demonstration)</span>
</span></span><span style="display:flex;"><span>        revenue <span style="color:#f92672">=</span> <span style="color:#ae81ff">15000</span> <span style="color:#f92672">+</span> (month <span style="color:#f92672">*</span> <span style="color:#ae81ff">500</span>)  <span style="color:#75715e"># Increasing monthly</span>
</span></span><span style="display:flex;"><span>        expenses <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span> <span style="color:#f92672">+</span> (month <span style="color:#f92672">*</span> <span style="color:#ae81ff">200</span>)  <span style="color:#75715e"># Increasing but slower</span>
</span></span><span style="display:flex;"><span>        profit <span style="color:#f92672">=</span> revenue <span style="color:#f92672">-</span> expenses
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        csv_writer<span style="color:#f92672">.</span>writerow({
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;month&#39;</span>: <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;2025-</span><span style="color:#e6db74">{</span>month<span style="color:#e6db74">:</span><span style="color:#e6db74">02d</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;revenue&#39;</span>: revenue,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;expenses&#39;</span>: expenses,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;profit&#39;</span>: profit
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Budget forecast generated: budget_forecast.csv&#34;</span>)
</span></span></code></pre></div><h2 id="practical-example-expense-analyser">Practical Example: Expense Analyser</h2>
<p>Let&rsquo;s combine everything we&rsquo;ve learned into a practical financial tool that:</p>
<ol>
<li>Reads expense data from a CSV file</li>
<li>Categorises and analyses expenses</li>
<li>Generates a report with summary statistics</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> csv
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">load_expenses</span>(filename):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Load expense data from a CSV file.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    expenses <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(filename, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>        reader <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>DictReader(file)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> reader:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Convert amount to float and date to datetime</span>
</span></span><span style="display:flex;"><span>            row[<span style="color:#e6db74">&#39;amount&#39;</span>] <span style="color:#f92672">=</span> float(row[<span style="color:#e6db74">&#39;amount&#39;</span>])
</span></span><span style="display:flex;"><span>            row[<span style="color:#e6db74">&#39;date&#39;</span>] <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>strptime(row[<span style="color:#e6db74">&#39;date&#39;</span>], <span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>            expenses<span style="color:#f92672">.</span>append(row)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> expenses
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">categorize_expenses</span>(expenses):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Group expenses by category.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    categories <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>        category <span style="color:#f92672">=</span> expense[<span style="color:#e6db74">&#39;category&#39;</span>]
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> category <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> categories:
</span></span><span style="display:flex;"><span>            categories[category] <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        categories[category]<span style="color:#f92672">.</span>append(expense)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> categories
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_category_totals</span>(categories):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Calculate total amount for each expense category.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    totals <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> category, expenses <span style="color:#f92672">in</span> categories<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        totals[category] <span style="color:#f92672">=</span> sum(expense[<span style="color:#e6db74">&#39;amount&#39;</span>] <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> expenses)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> totals
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_expense_report</span>(expenses, categories, totals, output_file):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Generate a detailed expense report.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    total_expenses <span style="color:#f92672">=</span> sum(totals<span style="color:#f92672">.</span>values())
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write header</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;EXPENSE ANALYSIS REPORT</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;======================</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write summary</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Expenses: $</span><span style="color:#e6db74">{</span>total_expenses<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Number of Transactions: </span><span style="color:#e6db74">{</span>len(expenses)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Date Range: </span><span style="color:#e6db74">{</span>min(e[<span style="color:#e6db74">&#39;date&#39;</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> expenses)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> to </span><span style="color:#e6db74">{</span>max(e[<span style="color:#e6db74">&#39;date&#39;</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> expenses)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write category breakdown</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;EXPENSE BREAKDOWN BY CATEGORY</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;----------------------------</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Sort categories by total amount (descending)</span>
</span></span><span style="display:flex;"><span>        sorted_categories <span style="color:#f92672">=</span> sorted(totals<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> sorted_categories:
</span></span><span style="display:flex;"><span>            percentage <span style="color:#f92672">=</span> (amount <span style="color:#f92672">/</span> total_expenses) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">20</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> (</span><span style="color:#e6db74">{</span>percentage<span style="color:#e6db74">:</span><span style="color:#e6db74">.1f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">%)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Write transaction details for each category</span>
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">DETAILED TRANSACTIONS BY CATEGORY</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;--------------------------------</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> sorted_categories:
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#f92672">.</span>upper()<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;-&#39;</span> <span style="color:#f92672">*</span> len(category)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Sort expenses by date</span>
</span></span><span style="display:flex;"><span>            sorted_expenses <span style="color:#f92672">=</span> sorted(categories[category], key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#e6db74">&#39;date&#39;</span>])
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> sorted_expenses:
</span></span><span style="display:flex;"><span>                date_str <span style="color:#f92672">=</span> expense[<span style="color:#e6db74">&#39;date&#39;</span>]<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>                file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>date_str<span style="color:#e6db74">}</span><span style="color:#e6db74"> | </span><span style="color:#e6db74">{</span>expense[<span style="color:#e6db74">&#39;description&#39;</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">30</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> | $</span><span style="color:#e6db74">{</span>expense[<span style="color:#e6db74">&#39;amount&#39;</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Add category subtotal</span>
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;SUBTOTAL:&#39;</span><span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">41</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Usage example (assuming we have an expenses.csv file)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Check if the input file exists</span>
</span></span><span style="display:flex;"><span>    input_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;expenses.csv&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(input_file):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error: File &#39;</span><span style="color:#e6db74">{</span>input_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; not found.&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Creating a sample expense file for demonstration...&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create a sample file for demonstration</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(input_file, <span style="color:#e6db74">&#39;w&#39;</span>, newline<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>            writer <span style="color:#f92672">=</span> csv<span style="color:#f92672">.</span>writer(file)
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;category&#39;</span>, <span style="color:#e6db74">&#39;description&#39;</span>, <span style="color:#e6db74">&#39;amount&#39;</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-05&#39;</span>, <span style="color:#e6db74">&#39;Office&#39;</span>, <span style="color:#e6db74">&#39;Printer paper&#39;</span>, <span style="color:#ae81ff">24.99</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-10&#39;</span>, <span style="color:#e6db74">&#39;Software&#39;</span>, <span style="color:#e6db74">&#39;Accounting software&#39;</span>, <span style="color:#ae81ff">89.99</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-15&#39;</span>, <span style="color:#e6db74">&#39;Office&#39;</span>, <span style="color:#e6db74">&#39;Desk organiser&#39;</span>, <span style="color:#ae81ff">32.50</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-18&#39;</span>, <span style="color:#e6db74">&#39;Travel&#39;</span>, <span style="color:#e6db74">&#39;Client meeting transportation&#39;</span>, <span style="color:#ae81ff">45.75</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-22&#39;</span>, <span style="color:#e6db74">&#39;Software&#39;</span>, <span style="color:#e6db74">&#39;Cloud storage subscription&#39;</span>, <span style="color:#ae81ff">9.99</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-25&#39;</span>, <span style="color:#e6db74">&#39;Meals&#39;</span>, <span style="color:#e6db74">&#39;Team lunch&#39;</span>, <span style="color:#ae81ff">87.50</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-01-29&#39;</span>, <span style="color:#e6db74">&#39;Office&#39;</span>, <span style="color:#e6db74">&#39;Printer ink&#39;</span>, <span style="color:#ae81ff">65.85</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-02-03&#39;</span>, <span style="color:#e6db74">&#39;Travel&#39;</span>, <span style="color:#e6db74">&#39;Conference registration&#39;</span>, <span style="color:#ae81ff">299.00</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-02-07&#39;</span>, <span style="color:#e6db74">&#39;Meals&#39;</span>, <span style="color:#e6db74">&#39;Client dinner&#39;</span>, <span style="color:#ae81ff">125.40</span>])
</span></span><span style="display:flex;"><span>            writer<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;2025-02-15&#39;</span>, <span style="color:#e6db74">&#39;Software&#39;</span>, <span style="color:#e6db74">&#39;Data analysis tool&#39;</span>, <span style="color:#ae81ff">149.99</span>])
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Sample file &#39;</span><span style="color:#e6db74">{</span>input_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; created.&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Process the expense data</span>
</span></span><span style="display:flex;"><span>    expenses <span style="color:#f92672">=</span> load_expenses(input_file)
</span></span><span style="display:flex;"><span>    categories <span style="color:#f92672">=</span> categorize_expenses(expenses)
</span></span><span style="display:flex;"><span>    totals <span style="color:#f92672">=</span> calculate_category_totals(categories)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Generate the report</span>
</span></span><span style="display:flex;"><span>    output_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;expense_report.txt&#39;</span>
</span></span><span style="display:flex;"><span>    generate_expense_report(expenses, categories, totals, output_file)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Expense report generated: </span><span style="color:#e6db74">{</span>output_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>This script demonstrates:</p>
<ul>
<li>Function definitions with docstrings</li>
<li>File I/O with the <code>with</code> statement</li>
<li>CSV processing</li>
<li>Module imports and usage</li>
<li>Error handling</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Functions, modules, and file I/O form the backbone of most Python applications, especially for financial tasks. By mastering these concepts, you&rsquo;ll be well-equipped to build tools for financial analysis, reporting, and automation.</p>
<p>In the next post, we&rsquo;ll explore virtual environments and package management, which will help you manage dependencies for larger projects.</p>
<p><strong>Practice Exercise:</strong> Try extending the expense analyser to calculate monthly trends or generate a simple visualisation of spending by category. This will help reinforce the concepts we&rsquo;ve covered while building something useful for your financial toolkit.</p>
]]></content:encoded></item><item><title>Daily Brief - Thursday, May 29th, 2025</title><link>https://michaelbrunger.com/briefs/2025-05-29/</link><pubDate>Thu, 29 May 2025 14:35:29 +0000</pubDate><guid>https://michaelbrunger.com/briefs/2025-05-29/</guid><description>Daily intelligence brief covering tech, AI, politics, UK and world news</description><content:encoded><![CDATA[<h1 id="daily-intelligence-brief">Daily Intelligence Brief</h1>
<p><em>Thursday, May 29th, 2025</em></p>
<h2 id="executive-summary">Executive Summary</h2>
<p>In the past 24 hours, key developments spanned technology, global health crises, and economic shifts. Meta AI has surged to one billion monthly active users, doubling its user base in just months and underscoring the rapid adoption of AI tools. Meanwhile, economic uncertainty persists with the U.S. dollar weakening due to trade tensions and soft data, while a cholera outbreak in Sudan has claimed 70 lives, highlighting ongoing humanitarian challenges in war-torn regions. In India, heavy rains are disrupting agriculture and prompting disaster responses, and security vulnerabilities in Windows PCs raise concerns about digital defenses. These events signal broader trends in AI expansion and regulatory pressures, with potential implications for global markets and public health.</p>
<h2 id="key-trends--sentiment">Key Trends &amp; Sentiment</h2>
<ul>
<li><strong>Key Emerging Trends</strong>: 1) Rapid growth in AI adoption, as seen with Meta AI&rsquo;s user milestone, indicating a surge in consumer-facing AI integration. 2) Increasing economic volatility, driven by trade uncertainties and regulatory burdens, as evidenced by dollar fluctuations and California&rsquo;s landfill issues.</li>
<li><strong>Significant Sentiment Shifts</strong>: 1) A shift toward optimism in tech innovation, with bootstrapped successes like Thinkst Canary gaining traction without VC funding. 2) Growing frustration with over-regulation, as Fox News reports highlight public discontent over costs in sectors like waste management.</li>
<li><strong>Key Future Implication</strong>: AI&rsquo;s mainstreaming could accelerate digital transformation but heighten concerns over privacy and job displacement, necessitating proactive policy frameworks.</li>
</ul>
<h2 id="key-developments">Key Developments</h2>
<h3 id="1-tech--ai-developments">1. Tech &amp; AI Developments</h3>
<p>Meta AI&rsquo;s announcement of reaching one billion monthly active users marks a major breakthrough in AI accessibility, doubling from 500 million in September 2024. This rapid growth enhances Meta&rsquo;s ecosystem dominance and could drive further innovation in user engagement. Immediate market impact includes boosted investor confidence in AI stocks, potentially spurring competition.<br>
<em>Significance: High</em> (62 words)</p>
<h3 id="2-uk-political-news">2. UK Political News</h3>
<p>No significant UK-specific policy changes or announcements emerged from the articles reviewed. Discussions centered on U.S. and Indian affairs, with potential Democratic contenders for 2028 noted elsewhere, but lacking direct UK relevance. Party reactions were absent in the coverage.<br>
<em>Significance: Low</em> (48 words)</p>
<h3 id="3-global-affairs">3. Global Affairs</h3>
<p>Sudan&rsquo;s report of 70 cholera deaths in Khartoum over two days underscores the escalating humanitarian crisis amid ongoing war, centered in the capital. This development highlights the strain on health systems and could exacerbate regional instability in East Africa, prompting international aid calls.<br>
<em>Significance: High</em> (52 words)</p>
<h3 id="4-economic--financial-updates">4. Economic &amp; Financial Updates</h3>
<p>The U.S. dollar&rsquo;s drop amid renewed trade uncertainty and soft economic data reflects heightened market volatility, as reported by Yahoo Finance. This movement could influence global trade dynamics, with policy impacts including potential Federal Reserve rate adjustments to stabilize currencies.<br>
<em>Significance: High</em> (54 words)</p>
<h3 id="5-climate--environment">5. Climate &amp; Environment</h3>
<p>Heavy rains in India have severely impacted pineapple farmers, with raw fruit prices dropping to â‚¹13â€“15 per kg due to flooding and reduced yields. This development emphasizes climate vulnerability in agriculture, potentially leading to policy changes in disaster management and crop support.<br>
<em>Significance: Medium</em> (51 words)</p>
<h3 id="6-security--defense">6. Security &amp; Defense</h3>
<p>A new tool, Defendnot, bypasses Microsoft Defender on Windows PCs by registering a fake antivirus, exposing critical vulnerabilities in the system. This development raises alarms about endpoint security, with defense implications including urgent patches and enhanced cybersecurity protocols.<br>
<em>Significance: High</em> (53 words)</p>
<h2 id="key-takeaways">Key Takeaways</h2>
<ul>
<li><strong>Most Important Implications</strong>: 1) AI&rsquo;s explosive growth, like Meta&rsquo;s milestone, could reshape digital economies but amplify ethical risks. 2) Economic uncertainty, such as the dollar&rsquo;s decline, may lead to tighter global trade policies, affecting inflation and consumer costs. 3) Health crises in conflict zones, like Sudan&rsquo;s cholera outbreak, underscore the need for sustained international intervention to prevent wider instability.</li>
<li><strong>Developments to Watch</strong>: 1) AI user metrics and regulatory responses, given ongoing expansions. 2) Escalating environmental impacts on agriculture, as climate events intensify.</li>
</ul>
<h2 id="source-articles">Source Articles</h2>
<h3 id="the-hindu-">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/cities/bangalore/encroachments-hindering-rainwater-flow-will-be-removed-under-disaster-act-dk-shivakumar/article69632985.ece">Encroachments hindering rainwater flow will be removed under Disaster Act: D.K. ShivakumarÂ </a></strong><br>
<em>29/05/2025</em></p>
<h3 id="the-hindu--1">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/karnataka/cpim-stages-protest-in-kalaburagi-against-bjp-mlcs-remarks-on-deputy-commissioner-fouzia-taranum/article69633853.ece">CPI(M) stages protest in Kalaburagi against BJP MLC&rsquo;s Remarks on Deputy Commissioner Fouzia Taranum</a></strong><br>
<em>29/05/2025</em></p>
<h3 id="the-hindu--2">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/kerala/arrangements-in-full-swing-for-pravesanotsavam-minister/article69633797.ece">Arrangements in full swing for Pravesanotsavam: Minister</a></strong><br>
<em>29/05/2025</em></p>
<p>Chief Minister Pinarayi Vijayan to inaugurate Pravesanotsavam at Government Higher Secondary School, Kalavoor, Alappuzha&hellip;</p>
<h3 id="the-hindu--3">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/kerala/heavy-rain-takes-a-toll-on-pineapple-farmers/article69629368.ece">Heavy rain takes a toll on pineapple farmers</a></strong><br>
<em>29/05/2025</em></p>
<p>While raw fruit was selling for â‚¹21â€“23 a kg, ripe fruit fetched only â‚¹13â€“15&hellip;</p>
<h3 id="the-hindu--4">The Hindu âšª</h3>
<p><strong><a href="https://www.thehindu.com/news/national/kerala/factor-in-ugc-norms-court-rulings-while-amending-anti-ragging-rules-kerala-hc/article69633723.ece">Factor in UGC norms, court rulings while amending anti-ragging rules: Kerala HC   </a></strong><br>
<em>29/05/2025</em></p>
<p>There are constraints in initiating criminal action against ragging as per current norms, observes court&hellip;</p>
<h3 id="yahoo-finance-">Yahoo Finance âšª</h3>
<p><strong><a href="https://finance.yahoo.com/news/dollar-steadies-treasuries-drop-trump-090708298.html">Dollar Drops on Renewed Trade Uncertainty, Soft Economic Data</a></strong><br>
<em>29/05/2025</em></p>
<h3 id="fox-news-">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/entertainment/todd-chrisley-jokes-about-prison-he-reunites-daughter-savannah">Todd Chrisley jokes about prison as he reunites with daughter Savannah</a></strong><br>
<em>29/05/2025</em></p>
<p>Hours after Todd Chrisley was released from federal prison, his daughter Savannah Chrisley shared a sneak peek of her dad&rsquo;s physique as the reunited p&hellip;</p>
<h3 id="techcrunch-">TechCrunch âšª</h3>
<p><strong><a href="https://techcrunch.com/2025/05/29/a-decade-in-bootstrapped-thinkst-canary-reaches-20m-in-arr-without-vc-funding/">A decade in, bootstrapped Thinkst Canary reaches $20M in ARR without VC funding</a></strong><br>
<em>29/05/2025</em></p>
<p>Reflecting on 10 years since its launch, the honeypot maker explains why the company did not take on any VC funding&hellip;.</p>
<h3 id="yahoo-finance--1">Yahoo Finance âšª</h3>
<p><strong><a href="https://finance.yahoo.com/news/goldman-sachs-says-deal-outlook-140604182.html">Goldman Sachs says deal outlook is good, but timing is uncertain</a></strong><br>
<em>29/05/2025</em></p>
<h3 id="techcrunch--1">TechCrunch âšª</h3>
<p><strong><a href="https://techcrunch.com/2025/05/29/meta-ai-now-has-1b-monthly-active-users/">Meta AI now has 1B monthly active users</a></strong><br>
<em>29/05/2025</em></p>
<p>Meta AI now has one billion monthly active users across its apps, CEO Mark Zuckerberg said at the company&rsquo;s annual shareholder meeting on Wednesday, a&hellip;</p>
<h3 id="al-jazeera-">Al Jazeera âšª</h3>
<p><strong><a href="https://www.aljazeera.com/news/2025/5/29/sudan-reports-70-cholera-deaths-in-khartoum-in-two-days?traffic_source=rss">Sudan reports 70 cholera deaths in Khartoum in two days</a></strong><br>
<em>29/05/2025</em></p>
<p>Cholera outbreak is centred around the capital city, Khartoum, which has been devastated by more than two years of war&hellip;.</p>
<h3 id="fox-news--1">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/opinion/rotten-regulations-even-your-trash-cant-escape-californias-red-tape">Rotten regulations: Even your trash can&rsquo;t escape California&rsquo;s red tape</a></strong><br>
<em>29/05/2025</em></p>
<p>California&rsquo;s landfill closure due to regulations raises trash removal costs, highlighting the impact of over-regulation on residents and businesses&hellip;.</p>
<h3 id="fox-news--2">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/politics/20-democrats-who-may-try-succeed-trump-2028-presidential-election">21 Democrats who may try to succeed Trump in the 2028 presidential election</a></strong><br>
<em>29/05/2025</em></p>
<p>Here is a very early look at the Democratic Party politicians considered to be potential 2028 presidential contenders in the next race for the White H&hellip;</p>
<h3 id="fox-news--3">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/tech/windows-pcs-risk-new-tool-disarms-built-in-security">Windows PCs at risk as new tool disarms built-in security</a></strong><br>
<em>29/05/2025</em></p>
<p>Discover how Defendnot bypasses Microsoft Defender by registering a fake antivirus, exposing vulnerabilities in Windows&rsquo; antivirus management system&hellip;.</p>
<h3 id="fox-news--4">Fox News ðŸ”´</h3>
<p><strong><a href="https://www.foxnews.com/sports/pgas-jake-knapp-not-fan-golf-ball-rollback-he-promotes-new-pxg-driver-giveaway">PGA&rsquo;s Jake Knapp &rsquo;not a fan&rsquo; of golf ball rollback as he promotes new PXG driver giveaway</a></strong><br>
<em>29/05/2025</em></p>
<p>PGA Tour player Jake Knapp used his buttery driver swing to shoot a 59 earlier this year, so it makes sense why he is opposed of rolling back technolo&hellip;</p>
<h3 id="techcrunch--2">TechCrunch âšª</h3>
<p><strong><a href="https://techcrunch.com/2025/05/29/7-days-until-doors-open-at-techcrunch-sessions-ai/">7 days until doors open at TechCrunch Sessions: AI</a></strong><br>
<em>29/05/2025</em></p>
<p>We&rsquo;re on the final stretch! TechCrunch Sessions: AI kicks off in just 7 days. Main stage and breakout sessions feature AI leaders from Google Cloud, A&hellip;</p>
<h3 id="the-verge-">The Verge âšª</h3>
<p><strong><a href="https://www.theverge.com/games/674523/animal-crossing-new-horizons-nintendo-switch-live-service">Animal Crossing: New Horizons was a glimpse at Nintendo&rsquo;s online future</a></strong><br>
<em>29/05/2025</em></p>
<p>Tiger Borgia, a content creator focused on cozy games, has been pulling weeds in Animal Crossing: New Horizons for over five years.
Given the current&hellip;</p>
<h3 id="the-verge--1">The Verge âšª</h3>
<p><strong><a href="https://www.theverge.com/decoder-podcast-with-nilay-patel/676106/bad-company-private-equity-megan-greenwell-book-interview">How private equity kills companies and communities</a></strong><br>
<em>29/05/2025</em></p>
<p>Today, I&rsquo;m talking with Megan Greenwell, a former top editor at Wired and Deadspin, about her new book Bad Company: Private Equity and the Death of th&hellip;</p>
<h3 id="the-verge--2">The Verge âšª</h3>
<p><strong><a href="https://www.theverge.com/news/676241/blink-launches-second-gen-video-doorbell-with-person-detection">Blink&rsquo;s budget buzzer gets some worthwhile upgrades</a></strong><br>
<em>29/05/2025</em></p>
<p>Blink launched the second generation of its video doorbell this week.</p>
<p>Amazon&rsquo;s budget security camera company, Blink, has launched the second generat&hellip;</p>
<h3 id="yahoo-finance--2">Yahoo Finance âšª</h3>
<p><strong><a href="https://www.barrons.com/articles/stock-movers-6e3e19cb?siteid=yhoof2&amp;yptr=yahoo">These Stocks Are Moving the Most Today: Nvidia, Apple, HP Inc., Tesla, C3.ai, e.l.f. Beauty, SentinelOne, and More</a></strong><br>
<em>29/05/2025</em></p>
<hr>
<p><strong>Source Balance</strong>: This brief includes perspectives from left-leaning, center/neutral, and right-leaning sources to provide balanced coverage.</p>
<p><strong>Sources</strong>: The Hindu, Yahoo Finance, Fox News, TechCrunch, Al Jazeera, The Verge</p>
]]></content:encoded></item><item><title>Lean Financial Reporting That Executives Actually Read</title><link>https://michaelbrunger.com/lean-financial-reporting-executive-dashboard/</link><pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/lean-financial-reporting-executive-dashboard/</guid><description>Creating concise, actionable financial reports using Parmenter&amp;#39;s one-page methodology</description><content:encoded><![CDATA[<h2 id="the-reporting-paradox">The Reporting Paradox</h2>
<p>Finance teams often find themselves caught in a frustrating paradox: they invest enormous effort into producing detailed reports that executives barely read. A survey by Financial Executives International found that finance departments spend up to 30% of their time on report preparation, yet 65% of executives admit to reading only summaries or conclusions (FEI, 2023).</p>
<p>As David Parmenter observes in &ldquo;Winning CFOs: Implementing and Applying Better Practices&rdquo; (2012), &ldquo;Most finance teams are producing a monthly financial pack that is more like a doorstop than a decision support tool.&rdquo; This disconnect wastes valuable resources and misses the critical opportunity for finance to influence decision-making.</p>
<h2 id="the-parmenter-approach-to-lean-reporting">The Parmenter Approach to Lean Reporting</h2>
<p>David Parmenter&rsquo;s reporting methodology represents a radical departure from traditional financial reporting practices. At its core is a simple but powerful principle: &ldquo;Report the numbers that matter in a way that triggers action&rdquo; (Parmenter, 2012).</p>
<h3 id="core-elements-of-parmenters-reporting-framework">Core Elements of Parmenter&rsquo;s Reporting Framework</h3>
<ol>
<li><strong>One-page reporting</strong>: Distilling complex information to a single page</li>
<li><strong>Exception reporting</strong>: Highlighting only significant variances</li>
<li><strong>Visual impact</strong>: Using graphs, charts, and visual cues instead of tables</li>
<li><strong>Forward focus</strong>: Emphasising forecasts over historical results</li>
<li><strong>Timeliness</strong>: Delivering information when it can still influence decisions</li>
</ol>
<p>As Parmenter states, &ldquo;A finance team should aim to replace their fifty-page monthly report with a series of one-page reports&rdquo; (Parmenter, 2010). This approach aligns with cognitive research showing decision-makers can effectively process limited information at onceâ€”typically 5-9 data points (Miller, 1956).</p>
<h2 id="why-traditional-financial-reports-fail">Why Traditional Financial Reports Fail</h2>
<h3 id="problem-1-information-overload">Problem 1: Information Overload</h3>
<p>Traditional reports often provide exhaustive detail, overwhelming readers. Research by the American Psychological Association found that excessive information actually impairs decision quality (Schwartz, 2016).</p>
<p>According to Edward Tufte, information design expert, &ldquo;There is no more powerful way to selectively destroy information than to present too much of it&rdquo; (Tufte, 2001).</p>
<h3 id="problem-2-format-over-function">Problem 2: Format Over Function</h3>
<p>Many reports follow accounting formats rather than decision-making formats. Parmenter notes, &ldquo;Traditional reports are structured for accountants, not for operational decision-makers&rdquo; (Parmenter, 2010).</p>
<h3 id="problem-3-backward-focus">Problem 3: Backward Focus</h3>
<p>Most financial reports emphasise what happened rather than what should happen next. As noted by Hope and Fraser in &ldquo;Beyond Budgeting&rdquo; (2003), &ldquo;Traditional reporting is like driving by looking in the rearview mirror.&rdquo;</p>
<h3 id="problem-4-delayed-delivery">Problem 4: Delayed Delivery</h3>
<p>Monthly cycles create inherent information lags. By the time data is reported, the opportunity for timely intervention has often passed. Parmenter emphasises that &ldquo;A late report, no matter how detailed, is of limited value&rdquo; (Parmenter, 2010).</p>
<h3 id="problem-5-limited-context">Problem 5: Limited Context</h3>
<p>Numbers without context rarely drive action. Research by the Corporate Executive Board found that executives value contextual insights more than raw data (CEB, 2018).</p>
<h2 id="parmenters-one-page-reporting-methodology">Parmenter&rsquo;s One-Page Reporting Methodology</h2>
<h3 id="the-dashboard-approach">The Dashboard Approach</h3>
<p>At the center of Parmenter&rsquo;s methodology is the dashboard conceptâ€”a single-page visual summary focused on critical metrics. In &ldquo;Key Performance Indicators&rdquo; (2015), he outlines specific design principles:</p>
<ol>
<li><strong>5-second rule</strong>: Key messages should be absorbed in 5 seconds</li>
<li><strong>Trend emphasis</strong>: Show patterns over time, not just current values</li>
<li><strong>Exception highlighting</strong>: Use colour and formatting to flag issues</li>
<li><strong>Standardised layout</strong>: Consistent positioning of information</li>
<li><strong>Forward projection</strong>: Include forecast elements</li>
</ol>
<h3 id="the-report-in-one-page-structure">The &ldquo;Report in One Page&rdquo; Structure</h3>
<p>Parmenter recommends a specific one-page format (Parmenter, 2012):</p>
<ul>
<li><strong>Top section</strong>: 3-5 critical KRIs with trend lines (25% of page)</li>
<li><strong>Middle section</strong>: 4-6 exception highlights requiring attention (50% of page)</li>
<li><strong>Bottom section</strong>: Brief narrative highlighting key insights (25% of page)</li>
</ul>
<p>This structure has been empirically tested to match executive information consumption patterns (Parmenter, 2015).</p>
<h2 id="implementing-lean-reporting-a-step-by-step-approach">Implementing Lean Reporting: A Step-by-Step Approach</h2>
<h3 id="step-1-identify-information-needs">Step 1: Identify Information Needs</h3>
<p>Begin by understanding what decisions your reports should inform. As financial reporting expert Randall Bolten notes in &ldquo;Painting with Numbers&rdquo; (2012), &ldquo;Effective reporting starts with understanding how the information will be used.&rdquo;</p>
<ul>
<li><strong>Conduct stakeholder interviews</strong>: What decisions do they make monthly/weekly?</li>
<li><strong>Review meeting minutes</strong>: What recurring questions arise?</li>
<li><strong>Analyse information requests</strong>: What ad-hoc analyses are frequently requested?</li>
</ul>
<h3 id="step-2-audit-current-reports">Step 2: Audit Current Reports</h3>
<p>Before creating new reports, evaluate existing ones. Parmenter recommends a structured audit (Parmenter, 2012):</p>
<ul>
<li><strong>Volume analysis</strong>: Count pages, charts, tables in current reporting</li>
<li><strong>Usage tracking</strong>: Monitor which sections are referenced in meetings</li>
<li><strong>Time allocation</strong>: Track preparation time for each report element</li>
<li><strong>Decision impact</strong>: Identify which reports have triggered action</li>
</ul>
<h3 id="step-3-design-prototype-dashboards">Step 3: Design Prototype Dashboards</h3>
<p>Following Parmenter&rsquo;s one-page methodology, create prototype dashboards for each major reporting area:</p>
<ul>
<li><strong>Executive summary</strong>: Overall organisational performance</li>
<li><strong>Operational dashboards</strong>: Department-specific metrics</li>
<li><strong>Project trackers</strong>: Status of major initiatives</li>
<li><strong>Cash performance</strong>: Treasury and working capital</li>
</ul>
<p>Use visualisation best practices as outlined by data visualisation expert Stephen Few in &ldquo;Information Dashboard Design&rdquo; (2006): minimise chart junk, use appropriate chart types, and ensure visual clarity.</p>
<h3 id="step-4-implement-exception-reporting">Step 4: Implement Exception Reporting</h3>
<p>Exception reportingâ€”highlighting only significant variancesâ€”is central to Parmenter&rsquo;s approach. Implement this by:</p>
<ul>
<li><strong>Establishing thresholds</strong>: Define what constitutes a significant variance</li>
<li><strong>Creating alerts</strong>: Develop visual indicators for exceptions</li>
<li><strong>Automating detection</strong>: Use technology to flag exceptions automatically</li>
</ul>
<p>As Parmenter emphasises, &ldquo;Executives don&rsquo;t need to know everything is fineâ€”they need to know what requires their attention&rdquo; (Parmenter, 2012).</p>
<h3 id="step-5-build-forecasting-elements">Step 5: Build Forecasting Elements</h3>
<p>Expand reporting from historical focus to include forward-looking elements. According to Steve Player and Steve Morlidge in &ldquo;Future Ready&rdquo; (2010), effective forecasts share these characteristics:</p>
<ul>
<li><strong>Rolling horizon</strong>: Always maintain same forecast distance</li>
<li><strong>Driver-based</strong>: Built on operational rather than financial drivers</li>
<li><strong>Scenario-enabled</strong>: Show range of possible outcomes</li>
<li><strong>Frequently updated</strong>: Refresh as new information becomes available</li>
</ul>
<h3 id="step-6-create-delivery-cadence">Step 6: Create Delivery Cadence</h3>
<p>Implement appropriate reporting frequencies based on metric volatility and decision timelines. Parmenter suggests (2015):</p>
<ul>
<li><strong>Daily</strong>: Critical operational metrics (production, sales, cash)</li>
<li><strong>Weekly</strong>: Performance indicators and project status</li>
<li><strong>Monthly</strong>: KRIs and financial summaries</li>
<li><strong>Quarterly</strong>: Strategic reviews and trend analysis</li>
</ul>
<h3 id="step-7-continuously-improve">Step 7: Continuously Improve</h3>
<p>Implement a formal feedback mechanism to refine reporting. As Parmenter notes, &ldquo;The perfect dashboard is never created on the first attempt&rdquo; (Parmenter, 2012).</p>
<h2 id="case-study-transforming-financial-reporting-at-a-retail-chain">Case Study: Transforming Financial Reporting at a Retail Chain</h2>
<p><em>(Note: This case study is adapted from examples in Parmenter&rsquo;s publications)</em></p>
<p>A multi-location retail business struggled with information overload. Their monthly reporting package exceeded 45 pages and took 15 days to produce after month-end. Following Parmenter&rsquo;s methodology:</p>
<ol>
<li>They interviewed key decision-makers about information needs</li>
<li>Created three one-page dashboards (executive, store operations, inventory)</li>
<li>Implemented a 3-tier reporting system:
<ul>
<li>Daily sales and inventory report (automated)</li>
<li>Weekly performance dashboard (Tuesday delivery)</li>
<li>Monthly executive summary (5 days after month-end)</li>
</ul>
</li>
</ol>
<p>Results after implementation:</p>
<ul>
<li>Report preparation time decreased by 70%</li>
<li>Executive engagement with financial information increased</li>
<li>Decision response time improved from weeks to days</li>
<li>Finance team redirected 25 hours per month to analysis</li>
</ul>
<h2 id="visual-design-principles-for-financial-information">Visual Design Principles for Financial Information</h2>
<p>Effective reporting isn&rsquo;t just about contentâ€”it&rsquo;s about presentation. Drawing from Edward Tufte&rsquo;s &ldquo;Visual Display of Quantitative Information&rdquo; (2001) and Stephen Few&rsquo;s work, consider these design principles:</p>
<h3 id="1-signal-to-noise-ratio">1. Signal-to-Noise Ratio</h3>
<p>Eliminate what Tufte calls &ldquo;chart junk&rdquo;â€”decorative elements that don&rsquo;t convey information:</p>
<ul>
<li>Remove grid lines unless essential</li>
<li>Eliminate 3D effects</li>
<li>Minimise text labels</li>
<li>Use subtle background colours if any</li>
</ul>
<h3 id="2-choose-appropriate-chart-types">2. Choose Appropriate Chart Types</h3>
<p>Different data requires different visualisation:</p>
<ul>
<li><strong>Time series</strong>: Line charts</li>
<li><strong>Composition</strong>: Stacked bar charts</li>
<li><strong>Comparison</strong>: Side-by-side bars</li>
<li><strong>Correlation</strong>: Scatter plots</li>
<li><strong>Distribution</strong>: Histograms</li>
</ul>
<p>As Few notes, &ldquo;The most common reporting mistake is using the wrong chart type for the data&rdquo; (Few, 2006).</p>
<h3 id="3-colour-psychology">3. Colour Psychology</h3>
<p>Use colour strategically:</p>
<ul>
<li>Red/yellow/green for performance indicators</li>
<li>Blue for neutral information</li>
<li>Consistent colour scheme across all reports</li>
<li>No more than 5-7 colours total</li>
</ul>
<h3 id="4-typography-matters">4. Typography Matters</h3>
<p>Text elements should enhance readability:</p>
<ul>
<li>Use sans-serif fonts for screen display</li>
<li>Establish clear hierarchy with font sizes</li>
<li>Left-align most text</li>
<li>Right-align numbers for comparison</li>
</ul>
<h2 id="technology-enablers-for-lean-reporting">Technology Enablers for Lean Reporting</h2>
<p>Modern tools make Parmenter&rsquo;s approach more achievable than ever:</p>
<h3 id="data-visualisation-software">Data Visualisation Software</h3>
<p>Tools like Tableau, Power BI, and Qlik provide:</p>
<ul>
<li>Interactive dashboards</li>
<li>Data exploration capabilities</li>
<li>Automated refreshes</li>
<li>Exception highlighting</li>
</ul>
<h3 id="cloud-based-analytics">Cloud-Based Analytics</h3>
<p>Cloud platforms offer advantages for distributed organisations:</p>
<ul>
<li>Real-time data access</li>
<li>Mobile compatibility</li>
<li>Collaborative analysis</li>
<li>Centralised data governance</li>
</ul>
<h3 id="automated-data-integration">Automated Data Integration</h3>
<p>ETL (Extract, Transform, Load) tools reduce manual effort:</p>
<ul>
<li>Scheduled data refreshes</li>
<li>Cross-system integration</li>
<li>Data cleansing automation</li>
<li>Validation rules</li>
</ul>
<h2 id="the-financial-controllers-role-in-reporting-transformation">The Financial Controller&rsquo;s Role in Reporting Transformation</h2>
<p>As financial controller, you are uniquely positioned to lead this transformation:</p>
<ol>
<li><strong>Challenge the status quo</strong>: Question every report and every page</li>
<li><strong>Champion clarity</strong>: Advocate for users who need actionable information</li>
<li><strong>Bridge functions</strong>: Connect financial data to operational context</li>
<li><strong>Implement standards</strong>: Create reporting templates and guidelines</li>
<li><strong>Measure impact</strong>: Track how reporting changes influence decisions</li>
</ol>
<p>As Parmenter emphasises in &ldquo;The Leading-Edge Manager&rsquo;s Guide to Success&rdquo; (2011), &ldquo;The finance team should be the organisation&rsquo;s leader in information presentation.&rdquo;</p>
<h2 id="common-implementation-challenges">Common Implementation Challenges</h2>
<h3 id="challenge-1-the-more-detail-mindset">Challenge 1: The &ldquo;More Detail&rdquo; Mindset</h3>
<p>Some stakeholders believe more information is always better.</p>
<p><strong>Solution</strong>: Parmenter suggests creating a &ldquo;drill-down&rdquo; capabilityâ€”maintain the one-page summary but enable access to supporting detail on request.</p>
<h3 id="challenge-2-weve-always-done-it-this-way">Challenge 2: &ldquo;We&rsquo;ve Always Done It This Way&rdquo;</h3>
<p>Organisational inertia often preserves ineffective reporting.</p>
<p><strong>Solution</strong>: Implement pilot projects with receptive stakeholders to demonstrate value, then use success stories to drive broader adoption.</p>
<h3 id="challenge-3-system-limitations">Challenge 3: System Limitations</h3>
<p>Legacy systems may not support modern visualisation.</p>
<p><strong>Solution</strong>: Begin with manual dashboard creation while building the case for technology investment based on time savings.</p>
<h3 id="challenge-4-skill-gaps">Challenge 4: Skill Gaps</h3>
<p>Many finance teams lack data visualisation expertise.</p>
<p><strong>Solution</strong>: Invest in targeted training on visualisation principles and tools. As Parmenter notes, &ldquo;This skill development pays immediate dividends&rdquo; (Parmenter, 2012).</p>
<h2 id="self-assessment-how-lean-is-your-reporting">Self-Assessment: How Lean Is Your Reporting?</h2>
<p>Evaluate your current reporting against these criteria:</p>
<ol>
<li>How many pages is your primary monthly financial report?</li>
<li>What percentage of reported metrics are discussed in management meetings?</li>
<li>How many days after period-end is your reporting available?</li>
<li>What ratio of charts/graphics to tables exists in your reporting?</li>
<li>Do your reports contain forward-looking elements?</li>
<li>How often are reports actually referenced for decisions?</li>
</ol>
<p>The more your answers diverge from Parmenter&rsquo;s recommendations, the greater your opportunity for improvement.</p>
<h2 id="action-plan-for-your-next-60-days">Action Plan for Your Next 60 Days</h2>
<p>Based on Parmenter&rsquo;s implementation methodology (2012), consider these immediate actions:</p>
<ol>
<li><strong>Select one critical report</strong> to transform as a pilot</li>
<li><strong>Interview three key users</strong> about their information needs</li>
<li><strong>Create a one-page prototype</strong> using the Parmenter structure</li>
<li><strong>Run parallel reporting</strong> (old and new) for one cycle</li>
<li><strong>Gather feedback</strong> and refine</li>
<li><strong>Document time savings</strong> and decision impact</li>
<li><strong>Extend approach</strong> to additional reports</li>
</ol>
<h2 id="conclusion-from-reporting-to-insight">Conclusion: From Reporting to Insight</h2>
<p>The transformation from traditional reporting to Parmenter&rsquo;s lean approach represents a fundamental shift in how finance delivers value. As he notes, &ldquo;It&rsquo;s not about producing less informationâ€”it&rsquo;s about producing more insight&rdquo; (Parmenter, 2015).</p>
<p>By embracing these principles, financial controllers can escape the reporting treadmill and position finance as a true source of decision support.</p>
<p>In our next post, we&rsquo;ll explore how to move beyond traditional budgeting to implement rolling forecasts that increase organisational agility and improve resource allocation.</p>
<h2 id="references">References</h2>
<p>Bolten, R. (2012). <em>Painting with Numbers: Presenting Financials and Other Numbers So People Will Understand You</em>. Wiley.</p>
<p>Corporate Executive Board (CEB). (2018). <em>Finance Function Effectiveness Survey</em>. Gartner.</p>
<p>Few, S. (2006). <em>Information Dashboard Design: The Effective Visual Communication of Data</em>. O&rsquo;Reilly Media.</p>
<p>Financial Executives International (FEI). (2023). <em>Financial Reporting Practices Survey</em>. Financial Executives Research Foundation.</p>
<p>Hope, J., &amp; Fraser, R. (2003). <em>Beyond Budgeting: How Managers Can Break Free from the Annual Performance Trap</em>. Harvard Business Press.</p>
<p>Miller, G. A. (1956). The magical number seven, plus or minus two: Some limits on our capacity for processing information. <em>Psychological Review, 63</em>(2), 81â€“97.</p>
<p>Parmenter, D. (2010). <em>Key Performance Indicators: Developing, Implementing, and Using Winning KPIs (2nd ed.)</em>. John Wiley &amp; Sons.</p>
<p>Parmenter, D. (2011). <em>The Leading-Edge Manager&rsquo;s Guide to Success: Strategies and Better Practices</em>. John Wiley &amp; Sons.</p>
<p>Parmenter, D. (2012). <em>Winning CFOs: Implementing and Applying Better Practices</em>. John Wiley &amp; Sons.</p>
<p>Parmenter, D. (2015). <em>Key Performance Indicators: Developing, Implementing, and Using Winning KPIs (3rd ed.)</em>. John Wiley &amp; Sons.</p>
<p>Player, S., &amp; Morlidge, S. (2010). <em>Future Ready: How to Master Business Forecasting</em>. Wiley.</p>
<p>Schwartz, B. (2016). The Paradox of Choice: Why More Is Less. <em>Ecco Press</em>.</p>
<p>Tufte, E. R. (2001). <em>The Visual Display of Quantitative Information (2nd ed.)</em>. Graphics Press.</p>
]]></content:encoded></item><item><title>Part 4: Core Data Structures in Python</title><link>https://michaelbrunger.com/python-core-data-structures/</link><pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-core-data-structures/</guid><description>Explore Python&amp;#39;s essential data structures: lists, tuples, dictionaries, and sets. Learn creation methods, manipulation techniques, and guidelines for choosing the right structure for your tasks.</description><content:encoded><![CDATA[<h1 id="post-4-core-data-structures">Post 4: Core Data Structures</h1>
<p>Welcome to the fourth post in my Python learning journey. So far, we&rsquo;ve installed Python, set up a development environment, and explored the basic syntax. Now it&rsquo;s time to dive deeper into Python&rsquo;s core data structures; the building blocks you&rsquo;ll use to organise and manipulate data in your programs.</p>
<p>In this post, we&rsquo;ll cover:</p>
<ol>
<li>Lists: Python&rsquo;s versatile sequence type</li>
<li>Tuples: Immutable collections</li>
<li>Dictionaries: Key-value mapping</li>
<li>Sets: Unique value collections</li>
<li>Choosing the right data structure</li>
</ol>
<p>I&rsquo;ve found these data structures similar to concepts we use every day; lists are like columns in spreadsheets, dictionaries resemble lookup tables, and sets are perfect for tracking unique items like account codes.</p>
<hr>
<h2 id="1-lists">1. Lists</h2>
<p>Lists are ordered, mutable (changeable) collections that can contain items of different types. They&rsquo;re perhaps the most commonly used data structure in Python.</p>
<h3 id="11-creating-lists">1.1 Creating Lists</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty list</span>
</span></span><span style="display:flex;"><span>empty_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List with initial values</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>mixed_data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">42</span>, <span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#66d9ef">True</span>, <span style="color:#ae81ff">3.14</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating a list with the list() constructor</span>
</span></span><span style="display:flex;"><span>chars <span style="color:#f92672">=</span> list(<span style="color:#e6db74">&#34;Python&#34;</span>)  <span style="color:#75715e"># [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List of repeated values</span>
</span></span><span style="display:flex;"><span>zeros <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">5</span>  <span style="color:#75715e"># [0, 0, 0, 0, 0]</span>
</span></span></code></pre></div><h3 id="12-accessing-list-elements">1.2 Accessing List Elements</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">450</span>, <span style="color:#ae81ff">700</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">800</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Indexing (zero-based)</span>
</span></span><span style="display:flex;"><span>first_expense <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 1200</span>
</span></span><span style="display:flex;"><span>last_expense <span style="color:#f92672">=</span> expenses[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># 800</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Slicing [start:end:step] - end index is exclusive</span>
</span></span><span style="display:flex;"><span>first_three <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">3</span>]  <span style="color:#75715e"># [1200, 450, 700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Shorthand for starting from beginning</span>
</span></span><span style="display:flex;"><span>first_three <span style="color:#f92672">=</span> expenses[:<span style="color:#ae81ff">3</span>]   <span style="color:#75715e"># [1200, 450, 700]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Shorthand for going to the end</span>
</span></span><span style="display:flex;"><span>last_three <span style="color:#f92672">=</span> expenses[<span style="color:#ae81ff">2</span>:]    <span style="color:#75715e"># [700, 95, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Negative indices count from the end</span>
</span></span><span style="display:flex;"><span>last_two <span style="color:#f92672">=</span> expenses[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>:]     <span style="color:#75715e"># [95, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step value</span>
</span></span><span style="display:flex;"><span>every_other <span style="color:#f92672">=</span> expenses[::<span style="color:#ae81ff">2</span>]  <span style="color:#75715e"># [1200, 700, 800]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reverse a list</span>
</span></span><span style="display:flex;"><span>reversed_expenses <span style="color:#f92672">=</span> expenses[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># [800, 95, 700, 450, 1200]</span>
</span></span></code></pre></div><h3 id="13-modifying-lists">1.3 Modifying Lists</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>departments <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Finance&#34;</span>, <span style="color:#e6db74">&#34;Marketing&#34;</span>, <span style="color:#e6db74">&#34;IT&#34;</span>, <span style="color:#e6db74">&#34;Operations&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Changing an element</span>
</span></span><span style="display:flex;"><span>departments[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Digital Marketing&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Adding elements</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#34;HR&#34;</span>)  <span style="color:#75715e"># Adds to the end</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;Sales&#34;</span>)  <span style="color:#75715e"># Inserts at specific position</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Removing elements</span>
</span></span><span style="display:flex;"><span>departments<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#34;IT&#34;</span>)  <span style="color:#75715e"># Removes first occurrence of value</span>
</span></span><span style="display:flex;"><span>popped_item <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>pop()  <span style="color:#75715e"># Removes and returns last item</span>
</span></span><span style="display:flex;"><span>popped_item <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># Removes item at index 1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> departments[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># Removes item at index 0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Extending lists</span>
</span></span><span style="display:flex;"><span>dept1 <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Finance&#34;</span>, <span style="color:#e6db74">&#34;HR&#34;</span>]
</span></span><span style="display:flex;"><span>dept2 <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;IT&#34;</span>, <span style="color:#e6db74">&#34;Operations&#34;</span>]
</span></span><span style="display:flex;"><span>dept1<span style="color:#f92672">.</span>extend(dept2)  <span style="color:#75715e"># dept1 now contains [&#34;Finance&#34;, &#34;HR&#34;, &#34;IT&#34;, &#34;Operations&#34;]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternative: concatenation</span>
</span></span><span style="display:flex;"><span>all_depts <span style="color:#f92672">=</span> dept1 <span style="color:#f92672">+</span> dept2  <span style="color:#75715e"># Creates a new list</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding elements</span>
</span></span><span style="display:flex;"><span>position <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;HR&#34;</span>)  <span style="color:#75715e"># Raises ValueError if not found</span>
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> departments<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;Finance&#34;</span>)  <span style="color:#75715e"># Counts occurrences of value</span>
</span></span></code></pre></div><h3 id="14-useful-list-operations">1.4 Useful List Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sorting</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>sort()  <span style="color:#75715e"># Modifies the list in-place: [1, 2, 5, 8, 9]</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>sort(reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)  <span style="color:#75715e"># Descending order: [9, 8, 5, 2, 1]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># If you don&#39;t want to modify the original list</span>
</span></span><span style="display:flex;"><span>sorted_numbers <span style="color:#f92672">=</span> sorted(numbers)  <span style="color:#75715e"># Returns a new sorted list</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reversing</span>
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>reverse()  <span style="color:#75715e"># Modifies the list in-place</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding min/max</span>
</span></span><span style="display:flex;"><span>minimum <span style="color:#f92672">=</span> min(numbers)
</span></span><span style="display:flex;"><span>maximum <span style="color:#f92672">=</span> max(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sum of all elements</span>
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> sum(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Checking membership</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">in</span> numbers:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Found 5 in the list!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List comprehension (filtering and transforming)</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> [x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> numbers <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>doubled <span style="color:#f92672">=</span> [x <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> numbers]
</span></span></code></pre></div><h3 id="15-nested-lists-2d-lists">1.5 Nested Lists (2D Lists)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Quarterly expenses by department</span>
</span></span><span style="display:flex;"><span>quarterly_expenses <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">1500</span>, <span style="color:#ae81ff">1100</span>, <span style="color:#ae81ff">1800</span>],  <span style="color:#75715e"># Finance</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">900</span>, <span style="color:#ae81ff">950</span>, <span style="color:#ae81ff">1025</span>, <span style="color:#ae81ff">1150</span>],    <span style="color:#75715e"># Marketing</span>
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">850</span>, <span style="color:#ae81ff">880</span>, <span style="color:#ae81ff">920</span>, <span style="color:#ae81ff">980</span>]       <span style="color:#75715e"># IT</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accessing elements</span>
</span></span><span style="display:flex;"><span>finance_q1 <span style="color:#f92672">=</span> quarterly_expenses[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 1200</span>
</span></span><span style="display:flex;"><span>marketing_q3 <span style="color:#f92672">=</span> quarterly_expenses[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">2</span>]  <span style="color:#75715e"># 1025</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Looping through a 2D list</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> department <span style="color:#f92672">in</span> quarterly_expenses:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> department:
</span></span><span style="display:flex;"><span>        print(expense, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>    print()  <span style="color:#75715e"># New line after each department</span>
</span></span></code></pre></div><hr>
<h2 id="2-tuples">2. Tuples</h2>
<p>Tuples are similar to lists but are immutable (cannot be changed after creation). They&rsquo;re commonly used for fixed collections of items.</p>
<h3 id="21-creating-tuples">2.1 Creating Tuples</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty tuple</span>
</span></span><span style="display:flex;"><span>empty_tuple <span style="color:#f92672">=</span> ()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tuple with values</span>
</span></span><span style="display:flex;"><span>coordinates <span style="color:#f92672">=</span> (<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>person <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#ae81ff">30</span>, <span style="color:#e6db74">&#34;Developer&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Single-item tuple needs a comma</span>
</span></span><span style="display:flex;"><span>single_item <span style="color:#f92672">=</span> (<span style="color:#ae81ff">42</span>,)  <span style="color:#75715e"># Without comma, it&#39;s just a number in parentheses</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tuple packing (no parentheses needed)</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#e6db74">&#34;Manager&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating with tuple() constructor</span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> tuple(<span style="color:#e6db74">&#34;abc&#34;</span>)  <span style="color:#75715e"># (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span>
</span></span></code></pre></div><h3 id="22-accessing-tuple-elements">2.2 Accessing Tuple Elements</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>coordinates <span style="color:#f92672">=</span> (<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Similar to list indexing and slicing</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> coordinates[<span style="color:#ae81ff">0</span>]  <span style="color:#75715e"># 10</span>
</span></span><span style="display:flex;"><span>last <span style="color:#f92672">=</span> coordinates[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># 50</span>
</span></span><span style="display:flex;"><span>subset <span style="color:#f92672">=</span> coordinates[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">4</span>]  <span style="color:#75715e"># (20, 30, 40)</span>
</span></span></code></pre></div><h3 id="23-tuple-operations">2.3 Tuple Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#e6db74">&#34;Manager&#34;</span>, <span style="color:#e6db74">&#34;HR&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Count and index (like lists)</span>
</span></span><span style="display:flex;"><span>age_pos <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>index(<span style="color:#ae81ff">35</span>)
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;Manager&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Concatenation</span>
</span></span><span style="display:flex;"><span>more_info <span style="color:#f92672">=</span> employee <span style="color:#f92672">+</span> (<span style="color:#e6db74">&#34;Full-time&#34;</span>,)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Unpacking (very useful feature!)</span>
</span></span><span style="display:flex;"><span>name, age, role, department <span style="color:#f92672">=</span> employee
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returning multiple values from a function (using tuple unpacking)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_employee_stats</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">85000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name, age, salary <span style="color:#f92672">=</span> get_employee_stats()
</span></span></code></pre></div><h3 id="24-why-use-tuples">2.4 Why Use Tuples?</h3>
<ol>
<li><strong>Immutability</strong> - Values can&rsquo;t be changed accidentally</li>
<li><strong>Hashable</strong> - Can be used as dictionary keys (lists cannot)</li>
<li><strong>Slightly more efficient</strong> than lists for fixed data</li>
<li><strong>Signal intent</strong> - Using a tuple indicates the data shouldn&rsquo;t change</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Using tuples as dictionary keys (not possible with lists)</span>
</span></span><span style="display:flex;"><span>locations <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">40.7128</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">74.0060</span>): <span style="color:#e6db74">&#34;New York&#34;</span>,
</span></span><span style="display:flex;"><span>    (<span style="color:#ae81ff">34.0522</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">118.2437</span>): <span style="color:#e6db74">&#34;Los Angeles&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<h2 id="3-dictionaries">3. Dictionaries</h2>
<p>Dictionaries store data as key-value pairs, providing fast lookups by key. They&rsquo;re unordered in Python versions before 3.7 and preserve insertion order in 3.7+.</p>
<h3 id="31-creating-dictionaries">3.1 Creating Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty dictionary</span>
</span></span><span style="display:flex;"><span>empty_dict <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dictionary with initial key-value pairs</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane Smith&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;age&#34;</span>: <span style="color:#ae81ff">35</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternative creation with dict() constructor</span>
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> dict(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Jane Smith&#34;</span>, age<span style="color:#f92672">=</span><span style="color:#ae81ff">35</span>, department<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Finance&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating from sequences of pairs</span>
</span></span><span style="display:flex;"><span>items <span style="color:#f92672">=</span> [(<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Jane&#34;</span>), (<span style="color:#e6db74">&#34;age&#34;</span>, <span style="color:#ae81ff">35</span>)]
</span></span><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> dict(items)
</span></span></code></pre></div><h3 id="32-accessing-dictionary-values">3.2 Accessing Dictionary Values</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane Smith&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;age&#34;</span>: <span style="color:#ae81ff">35</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Access by key</span>
</span></span><span style="display:flex;"><span>name <span style="color:#f92672">=</span> employee[<span style="color:#e6db74">&#34;name&#34;</span>]  <span style="color:#75715e"># &#34;Jane Smith&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># KeyError if key doesn&#39;t exist</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># salary = employee[&#34;bonus&#34;]  # Raises KeyError</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using get() method (safer, returns None or default value if key not found)</span>
</span></span><span style="display:flex;"><span>bonus <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;bonus&#34;</span>)  <span style="color:#75715e"># None</span>
</span></span><span style="display:flex;"><span>bonus <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;bonus&#34;</span>, <span style="color:#ae81ff">0</span>)  <span style="color:#75715e"># Returns 0 if key not found</span>
</span></span></code></pre></div><h3 id="33-modifying-dictionaries">3.3 Modifying Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employee <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Jane&#34;</span>, <span style="color:#e6db74">&#34;department&#34;</span>: <span style="color:#e6db74">&#34;Finance&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Adding or updating values</span>
</span></span><span style="display:flex;"><span>employee[<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">35</span>  <span style="color:#75715e"># Add new key-value pair</span>
</span></span><span style="display:flex;"><span>employee[<span style="color:#e6db74">&#34;name&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Jane Smith&#34;</span>  <span style="color:#75715e"># Update existing value</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Removing items</span>
</span></span><span style="display:flex;"><span>removed_value <span style="color:#f92672">=</span> employee<span style="color:#f92672">.</span>pop(<span style="color:#e6db74">&#34;age&#34;</span>)  <span style="color:#75715e"># Removes and returns value</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> employee[<span style="color:#e6db74">&#34;department&#34;</span>]  <span style="color:#75715e"># Removes key-value pair</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Clearing all items</span>
</span></span><span style="display:flex;"><span>employee<span style="color:#f92672">.</span>clear()  <span style="color:#75715e"># Empty dictionary {}</span>
</span></span></code></pre></div><h3 id="34-useful-dictionary-operations">3.4 Useful Dictionary Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;rent&#34;</span>: <span style="color:#ae81ff">1200</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;utilities&#34;</span>: <span style="color:#ae81ff">250</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;groceries&#34;</span>: <span style="color:#ae81ff">400</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;entertainment&#34;</span>: <span style="color:#ae81ff">150</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all keys</span>
</span></span><span style="display:flex;"><span>keys <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>keys()  <span style="color:#75715e"># dict_keys([&#39;rent&#39;, &#39;utilities&#39;, &#39;groceries&#39;, &#39;entertainment&#39;])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all values</span>
</span></span><span style="display:flex;"><span>values <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>values()  <span style="color:#75715e"># dict_values([1200, 250, 400, 150])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all key-value pairs as tuples</span>
</span></span><span style="display:flex;"><span>items <span style="color:#f92672">=</span> expenses<span style="color:#f92672">.</span>items()  <span style="color:#75715e"># dict_items([(&#39;rent&#39;, 1200), (&#39;utilities&#39;, 250), ...])</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Iterating over a dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>key<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>expenses[key]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Better way to iterate over keys and values</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>category<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if key exists</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;rent&#34;</span> <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Rent is accounted for&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merging dictionaries (Python 3.9+)</span>
</span></span><span style="display:flex;"><span>monthly <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;rent&#34;</span>: <span style="color:#ae81ff">1200</span>, <span style="color:#e6db74">&#34;utilities&#34;</span>: <span style="color:#ae81ff">250</span>}
</span></span><span style="display:flex;"><span>occasional <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;repairs&#34;</span>: <span style="color:#ae81ff">100</span>, <span style="color:#e6db74">&#34;insurance&#34;</span>: <span style="color:#ae81ff">80</span>}
</span></span><span style="display:flex;"><span>all_expenses <span style="color:#f92672">=</span> monthly <span style="color:#f92672">|</span> occasional  <span style="color:#75715e"># Python 3.9+</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Merging dictionaries (earlier versions)</span>
</span></span><span style="display:flex;"><span>all_expenses <span style="color:#f92672">=</span> {<span style="color:#f92672">**</span>monthly, <span style="color:#f92672">**</span>occasional}  <span style="color:#75715e"># Unpacking syntax</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dictionary comprehension</span>
</span></span><span style="display:flex;"><span>doubled_expenses <span style="color:#f92672">=</span> {k: v <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items()}
</span></span><span style="display:flex;"><span>large_expenses <span style="color:#f92672">=</span> {k: v <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> expenses<span style="color:#f92672">.</span>items() <span style="color:#66d9ef">if</span> v <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">200</span>}
</span></span></code></pre></div><h3 id="35-nested-dictionaries">3.5 Nested Dictionaries</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Department budget by quarter and category</span>
</span></span><span style="display:flex;"><span>department_budget <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Finance&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q1&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">50000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">10000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">5000</span>},
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q2&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">52000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">8000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">6000</span>}
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;IT&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q1&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">60000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">20000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">3000</span>},
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Q2&#34;</span>: {<span style="color:#e6db74">&#34;salaries&#34;</span>: <span style="color:#ae81ff">65000</span>, <span style="color:#e6db74">&#34;equipment&#34;</span>: <span style="color:#ae81ff">15000</span>, <span style="color:#e6db74">&#34;travel&#34;</span>: <span style="color:#ae81ff">2000</span>}
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accessing nested values</span>
</span></span><span style="display:flex;"><span>finance_q1_salaries <span style="color:#f92672">=</span> department_budget[<span style="color:#e6db74">&#34;Finance&#34;</span>][<span style="color:#e6db74">&#34;Q1&#34;</span>][<span style="color:#e6db74">&#34;salaries&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Safely accessing nested values</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pprint  <span style="color:#75715e"># Pretty print module for better display of nested structures</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop through nested dictionary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> dept, quarters <span style="color:#f92672">in</span> department_budget<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>dept<span style="color:#e6db74">}</span><span style="color:#e6db74"> Department:&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> quarter, categories <span style="color:#f92672">in</span> quarters<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;  </span><span style="color:#e6db74">{</span>quarter<span style="color:#e6db74">}</span><span style="color:#e6db74">:&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> category, amount <span style="color:#f92672">in</span> categories<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;    </span><span style="color:#e6db74">{</span>category<span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="4-sets">4. Sets</h2>
<p>Sets are unordered collections of unique elements. They&rsquo;re perfect for removing duplicates and performing mathematical set operations.</p>
<h3 id="41-creating-sets">4.1 Creating Sets</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Empty set (can&#39;t use {} as that creates an empty dictionary)</span>
</span></span><span style="display:flex;"><span>empty_set <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set with initial values</span>
</span></span><span style="display:flex;"><span>fruits <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;apple&#34;</span>, <span style="color:#e6db74">&#34;banana&#34;</span>, <span style="color:#e6db74">&#34;cherry&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creating a set from a list (removes duplicates)</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> set([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>])  <span style="color:#75715e"># {1, 2, 3, 4, 5}</span>
</span></span><span style="display:flex;"><span>unique_chars <span style="color:#f92672">=</span> set(<span style="color:#e6db74">&#34;mississippi&#34;</span>)  <span style="color:#75715e"># {&#39;m&#39;, &#39;i&#39;, &#39;s&#39;, &#39;p&#39;}</span>
</span></span></code></pre></div><h3 id="42-set-operations">4.2 Set Operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>employees_dept_a <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Jess&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;David&#34;</span>}
</span></span><span style="display:flex;"><span>employees_dept_b <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;David&#34;</span>, <span style="color:#e6db74">&#34;Eve&#34;</span>, <span style="color:#e6db74">&#34;Frank&#34;</span>}
</span></span><span style="display:flex;"><span>candidates <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Eve&#34;</span>, <span style="color:#e6db74">&#34;Grace&#34;</span>, <span style="color:#e6db74">&#34;Heidi&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add and remove elements</span>
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>add(<span style="color:#e6db74">&#34;Grace&#34;</span>)
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#34;Bob&#34;</span>)  <span style="color:#75715e"># Raises KeyError if not found</span>
</span></span><span style="display:flex;"><span>employees_dept_a<span style="color:#f92672">.</span>discard(<span style="color:#e6db74">&#34;Bob&#34;</span>)  <span style="color:#75715e"># No error if not found</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set operations</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Union (all employees)</span>
</span></span><span style="display:flex;"><span>all_employees <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">|</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>all_employees <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>union(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Intersection (employees in both departments)</span>
</span></span><span style="display:flex;"><span>in_both_depts <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">&amp;</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>in_both_depts <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>intersection(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Difference (employees in A but not in B)</span>
</span></span><span style="display:flex;"><span>only_in_a <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">-</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>only_in_a <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>difference(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Symmetric difference (employees in either dept but not both)</span>
</span></span><span style="display:flex;"><span>in_one_dept <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">^</span> employees_dept_b
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>in_one_dept <span style="color:#f92672">=</span> employees_dept_a<span style="color:#f92672">.</span>symmetric_difference(employees_dept_b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Subset and superset</span>
</span></span><span style="display:flex;"><span>is_subset <span style="color:#f92672">=</span> employees_dept_a <span style="color:#f92672">&lt;=</span> employees_dept_b  <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>is_proper_subset <span style="color:#f92672">=</span> candidates <span style="color:#f92672">&lt;</span> all_employees  <span style="color:#75715e"># True (candidates is a proper subset of all_employees)</span>
</span></span></code></pre></div><h3 id="43-common-set-uses">4.3 Common Set Uses</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Removing duplicates from a list</span>
</span></span><span style="display:flex;"><span>transactions <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1001</span>, <span style="color:#ae81ff">1002</span>, <span style="color:#ae81ff">1001</span>, <span style="color:#ae81ff">1003</span>, <span style="color:#ae81ff">1002</span>, <span style="color:#ae81ff">1004</span>]
</span></span><span style="display:flex;"><span>unique_transactions <span style="color:#f92672">=</span> list(set(transactions))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Membership testing (very efficient for large datasets)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;Jess&#34;</span> <span style="color:#f92672">in</span> employees_dept_a:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Jess works in Department A&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Finding common elements</span>
</span></span><span style="display:flex;"><span>customer_ids <span style="color:#f92672">=</span> {<span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">105</span>}
</span></span><span style="display:flex;"><span>premium_ids <span style="color:#f92672">=</span> {<span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">106</span>}
</span></span><span style="display:flex;"><span>common_ids <span style="color:#f92672">=</span> customer_ids <span style="color:#f92672">&amp;</span> premium_ids
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set comprehensions</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> {x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>}  <span style="color:#75715e"># {0, 2, 4, 6, 8}</span>
</span></span></code></pre></div><hr>
<h2 id="5-choosing-the-right-data-structure">5. Choosing the Right Data Structure</h2>
<p>Selecting the appropriate data structure can make your code more efficient and readable. Here&rsquo;s a quick guide:</p>
<h3 id="51-when-to-use-each-structure">5.1 When to Use Each Structure</h3>
<p><strong>Use Lists when:</strong></p>
<ul>
<li>You need an ordered collection</li>
<li>Items might need to be changed, added, or removed</li>
<li>You need to store duplicate values</li>
<li>You need to maintain insertion order</li>
</ul>
<p><strong>Use Tuples when:</strong></p>
<ul>
<li>You have a fixed collection that shouldn&rsquo;t change</li>
<li>You want to return multiple values from a function</li>
<li>You need elements that can serve as dictionary keys</li>
<li>You want to ensure data integrity (immutability)</li>
</ul>
<p><strong>Use Dictionaries when:</strong></p>
<ul>
<li>You need key-value mapping (lookups by key)</li>
<li>You want fast lookups by a specific identifier</li>
<li>You&rsquo;re working with named attributes or properties</li>
<li>You need to count occurrences of items</li>
</ul>
<p><strong>Use Sets when:</strong></p>
<ul>
<li>You only care about unique values (no duplicates)</li>
<li>You need to perform set operations (union, intersection)</li>
<li>You want to quickly check if an item exists</li>
<li>You&rsquo;re removing duplicates from a collection</li>
</ul>
<h3 id="52-performance-considerations">5.2 Performance Considerations</h3>
<p>Data structure choice affects performance. In general:</p>
<ul>
<li><strong>Lists</strong>: O(1) for append/pop at end, O(n) for insert/delete elsewhere</li>
<li><strong>Dictionaries</strong>: O(1) average for key lookups, insertions, and deletions</li>
<li><strong>Sets</strong>: O(1) average for membership testing, adding, removing</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Example: Different approaches to counting word frequencies</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;to be or not to be that is the question&#34;</span>
</span></span><span style="display:flex;"><span>words <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using a list (inefficient for counting)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_list</span>(words):
</span></span><span style="display:flex;"><span>    counts <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> words:
</span></span><span style="display:flex;"><span>        found <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> counts:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> item[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> word:
</span></span><span style="display:flex;"><span>                item[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                found <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> found:
</span></span><span style="display:flex;"><span>            counts<span style="color:#f92672">.</span>append([word, <span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> counts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using a dictionary (efficient)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_dict</span>(words):
</span></span><span style="display:flex;"><span>    counts <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> words:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> word <span style="color:#f92672">in</span> counts:
</span></span><span style="display:flex;"><span>            counts[word] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            counts[word] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> counts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Even more concise with collections.Counter</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_with_counter</span>(words):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Counter(words)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compare results</span>
</span></span><span style="display:flex;"><span>print(count_with_list(words))
</span></span><span style="display:flex;"><span>print(count_with_dict(words))
</span></span><span style="display:flex;"><span>print(dict(count_with_counter(words)))
</span></span></code></pre></div><hr>
<h2 id="practice-exercise-financial-portfolio-tracker">Practice Exercise: Financial Portfolio Tracker</h2>
<p>Let&rsquo;s apply these data structures by creating a simple portfolio tracker:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">portfolio_tracker</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Initialise portfolio using a dictionary of dictionaries</span>
</span></span><span style="display:flex;"><span>    portfolio <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    transactions <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Portfolio Tracker&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;1. Add stock&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;2. Record transaction&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;3. View portfolio&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;4. View transaction history&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;5. Top holdings&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;6. Exit&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        choice <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter your choice (1-6): &#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;1&#34;</span>:
</span></span><span style="display:flex;"><span>            ticker <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter stock ticker symbol: &#34;</span>)<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>            company <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter company name: &#34;</span>)
</span></span><span style="display:flex;"><span>            sector <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter sector: &#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            portfolio[ticker] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;company&#34;</span>: company,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;sector&#34;</span>: sector,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;shares&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;cost_basis&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;current_price&#34;</span>: float(input(<span style="color:#e6db74">&#34;Enter current price: $&#34;</span>))
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Added </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> to portfolio.&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;2&#34;</span>:
</span></span><span style="display:flex;"><span>            ticker <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter stock ticker symbol: &#34;</span>)<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ticker <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Error: </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74"> not in portfolio. Add it first.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            transaction_type <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Buy or sell? &#34;</span>)<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>            shares <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Number of shares: &#34;</span>))
</span></span><span style="display:flex;"><span>            price <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Price per share: $&#34;</span>))
</span></span><span style="display:flex;"><span>            date <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Date (YYYY-MM-DD): &#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Record transaction</span>
</span></span><span style="display:flex;"><span>            transaction <span style="color:#f92672">=</span> (date, ticker, transaction_type, shares, price)
</span></span><span style="display:flex;"><span>            transactions<span style="color:#f92672">.</span>append(transaction)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Update portfolio</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> transaction_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;buy&#34;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Calculate new cost basis</span>
</span></span><span style="display:flex;"><span>                current_shares <span style="color:#f92672">=</span> portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>]
</span></span><span style="display:flex;"><span>                current_basis <span style="color:#f92672">=</span> portfolio[ticker][<span style="color:#e6db74">&#34;cost_basis&#34;</span>]
</span></span><span style="display:flex;"><span>                new_shares <span style="color:#f92672">=</span> current_shares <span style="color:#f92672">+</span> shares
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> new_shares <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:  <span style="color:#75715e"># Avoid division by zero</span>
</span></span><span style="display:flex;"><span>                    new_basis <span style="color:#f92672">=</span> (current_shares <span style="color:#f92672">*</span> current_basis <span style="color:#f92672">+</span> shares <span style="color:#f92672">*</span> price) <span style="color:#f92672">/</span> new_shares
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                    new_basis <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">+=</span> shares
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;cost_basis&#34;</span>] <span style="color:#f92672">=</span> new_basis
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> transaction_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;sell&#34;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">&lt;</span> shares:
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">&#34;Error: Not enough shares.&#34;</span>)
</span></span><span style="display:flex;"><span>                    transactions<span style="color:#f92672">.</span>pop()  <span style="color:#75715e"># Remove the last transaction</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                portfolio[ticker][<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">-=</span> shares
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Transaction recorded. You now have </span><span style="color:#e6db74">{</span>portfolio[ticker][<span style="color:#e6db74">&#39;shares&#39;</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74"> shares of </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;3&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;Portfolio is empty.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Current Portfolio:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Company&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Sector&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Shares&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Cost Basis&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Current&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;9</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Value&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Gain/Loss&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            total_value <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> ticker, data <span style="color:#f92672">in</span> portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>                shares <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>]
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> shares <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:  <span style="color:#75715e"># Only show stocks we still own</span>
</span></span><span style="display:flex;"><span>                    cost_basis <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;cost_basis&#34;</span>]
</span></span><span style="display:flex;"><span>                    current <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;current_price&#34;</span>]
</span></span><span style="display:flex;"><span>                    value <span style="color:#f92672">=</span> shares <span style="color:#f92672">*</span> current
</span></span><span style="display:flex;"><span>                    gain_loss <span style="color:#f92672">=</span> value <span style="color:#f92672">-</span> (shares <span style="color:#f92672">*</span> cost_basis)
</span></span><span style="display:flex;"><span>                    
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>data[<span style="color:#e6db74">&#39;company&#39;</span>][:<span style="color:#ae81ff">20</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>data[<span style="color:#e6db74">&#39;sector&#39;</span>][:<span style="color:#ae81ff">15</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;15</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>shares<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>cost_basis<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>current<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;7.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>gain_loss<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>                    total_value <span style="color:#f92672">+=</span> value
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total Portfolio Value: $</span><span style="color:#e6db74">{</span>total_value<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;4&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> transactions:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;No transactions recorded.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Transaction History:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Date&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Type&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Shares&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Price&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Total&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">55</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> date, ticker, trans_type, shares, price <span style="color:#f92672">in</span> transactions:
</span></span><span style="display:flex;"><span>                total <span style="color:#f92672">=</span> shares <span style="color:#f92672">*</span> price
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>date<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>trans_type<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>shares<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;8</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>price<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;5&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> portfolio:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;Portfolio is empty.&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Use a list to sort holdings by value</span>
</span></span><span style="display:flex;"><span>            holdings <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> ticker, data <span style="color:#f92672">in</span> portfolio<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    value <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#34;shares&#34;</span>] <span style="color:#f92672">*</span> data[<span style="color:#e6db74">&#34;current_price&#34;</span>]
</span></span><span style="display:flex;"><span>                    holdings<span style="color:#f92672">.</span>append((ticker, data[<span style="color:#e6db74">&#34;company&#34;</span>], value))
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Sort by value (descending)</span>
</span></span><span style="display:flex;"><span>            holdings<span style="color:#f92672">.</span>sort(key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">2</span>], reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Top Holdings:&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Rank&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;5</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Ticker&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Company&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#e6db74">&#39;Value&#39;</span><span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">45</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> i, (ticker, company, value) <span style="color:#f92672">in</span> enumerate(holdings[:<span style="color:#ae81ff">5</span>], <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;5</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>ticker<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;6</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>company[:<span style="color:#ae81ff">20</span>]<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;20</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">:</span><span style="color:#e6db74">&lt;10.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> choice <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;6&#34;</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Thank you for using Portfolio Tracker!&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Invalid choice. Please try again.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run the application</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    portfolio_tracker()
</span></span></code></pre></div><p>This example demonstrates:</p>
<ul>
<li>Dictionaries for storing portfolio data</li>
<li>Lists for transaction history</li>
<li>Tuples for individual transactions</li>
<li>Sorting and filtering data</li>
<li>Calculating values based on stored data</li>
</ul>
<hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we&rsquo;ve covered Python&rsquo;s core data structures, the next post will explore functions, modules, and file I/Oâ€”essential tools for organising your code and working with external data.</p>
<p>Stay tuned for Post 5: Functions, Modules &amp; File I/O!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please reach out.</em></p>
]]></content:encoded></item><item><title>KPIs That Actually Drive Performance</title><link>https://michaelbrunger.com/effective-kpis-drive-business-performance/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/effective-kpis-drive-business-performance/</guid><description>Implementing effective KPIs using David Parmenter&amp;#39;s methodology for meaningful performance measurement</description><content:encoded><![CDATA[<h2 id="the-kpi-crisis-in-modern-business">The KPI Crisis in Modern Business</h2>
<p>Most organisations are drowning in metrics while starving for insight. According to research by MIT Sloan Management Review, over 70% of executives believe their KPI systems don&rsquo;t provide the strategic guidance they need (Neely &amp; Bourne, 2020). This disconnect illustrates a fundamental problem: despite the prevalence of performance measurement systems, few organisations have metrics that genuinely drive improvement.</p>
<p>As David Parmenter explains in his seminal work &ldquo;Key Performance Indicators: Developing, Implementing, and Using Winning KPIs&rdquo; (2015), &ldquo;Most organisations have been measuring the wrong things in the wrong way.&rdquo; The result is what he calls &ldquo;measurement dysfunction&rdquo;â€”where metrics create perverse incentives, drive suboptimal behaviors, or simply fail to influence performance at all.</p>
<h2 id="parmenters-revolutionary-kpi-framework">Parmenter&rsquo;s Revolutionary KPI Framework</h2>
<p>What makes Parmenter&rsquo;s approach revolutionary is his fundamental reclassification of performance measures. Unlike traditional approaches that treat all metrics as &ldquo;KPIs,&rdquo; Parmenter establishes a clear taxonomy:</p>
<h3 id="the-four-types-of-performance-measures">The Four Types of Performance Measures</h3>
<ol>
<li><strong>Key Result Indicators (KRIs)</strong>: High-level measures that tell the board how management has performed in a critical success factor or perspective</li>
<li><strong>Result Indicators (RIs)</strong>: Tell you what you have done</li>
<li><strong>Performance Indicators (PIs)</strong>: Tell you what to do</li>
<li><strong>Key Performance Indicators (KPIs)</strong>: Tell you what to do to increase performance dramatically</li>
</ol>
<p>This distinction is critical. As Parmenter notes, &ldquo;The term KPI has been misused for years. Most measures that organisations proudly call KPIs are simply performance indicators at best, and many are simply result indicators masquerading as KPIs&rdquo; (Parmenter, 2015).</p>
<h3 id="the-108010-rule">The 10/80/10 Rule</h3>
<p>Based on this taxonomy, Parmenter advocates for what he calls the &ldquo;10/80/10 rule&rdquo; for organisational measures:</p>
<ul>
<li>10 Key Result Indicators (KRIs) for the board</li>
<li>Up to 80 Result Indicators (RIs) and Performance Indicators (PIs) for management</li>
<li>10 Key Performance Indicators (KPIs) for staff</li>
</ul>
<p>This structured approach helps organisations focus on what truly matters while avoiding metric overload.</p>
<h2 id="the-seven-characteristics-of-true-kpis">The Seven Characteristics of True KPIs</h2>
<p>According to Parmenter (2015), genuine KPIs share seven essential characteristics:</p>
<ol>
<li><strong>Nonfinancial measures</strong>: Not expressed in dollars, euros, yen, etc.</li>
<li><strong>Measured frequently</strong>: Daily or weekly (not monthly or quarterly)</li>
<li><strong>Acted upon by senior management</strong>: Leadership demonstrates their importance</li>
<li><strong>Clear understanding</strong>: All staff understand the measure and what corrective action is required</li>
<li><strong>Ties to responsibility</strong>: Can be tied to a specific individual or team</li>
<li><strong>Significant impact</strong>: Affects multiple critical success factors</li>
<li><strong>Positive impact</strong>: Encourages appropriate action with minimal unintended consequences</li>
</ol>
<p>When evaluating potential KPIs, these characteristics provide a valuable litmus test. If a measure fails on multiple criteria, it&rsquo;s likely not a true KPI.</p>
<h2 id="common-kpi-mistakes-and-how-to-avoid-them">Common KPI Mistakes and How to Avoid Them</h2>
<h3 id="mistake-1-focusing-almost-exclusively-on-financial-metrics">Mistake 1: Focusing Almost Exclusively on Financial Metrics</h3>
<p>As noted by Robert Kaplan and David Norton in their Balanced Scorecard work (1996), &ldquo;Financial metrics tell you the results of decisions you made 1-3 months ago.&rdquo; They are inherently backward-looking.</p>
<p><strong>Solution</strong>: Parmenter recommends that true KPIs be nonfinancial measures that lead to financial results rather than simply measuring them. For example, measure customer satisfaction (leading indicator) rather than just revenue (lagging indicator).</p>
<h3 id="mistake-2-measuring-too-infrequently">Mistake 2: Measuring Too Infrequently</h3>
<p>According to Parmenter (2015), &ldquo;A monthly measure can never be a KPI&hellip; it&rsquo;s simply too old to be relevant for daily or weekly decision making.&rdquo;</p>
<p><strong>Solution</strong>: Create systems that allow for more frequent measurement of critical metrics. With modern technology, many previously monthly metrics can now be tracked weekly or even daily.</p>
<h3 id="mistake-3-setting-arbitrary-targets">Mistake 3: Setting Arbitrary Targets</h3>
<p>Many organisations set targets without understanding the measure&rsquo;s natural performance range, resulting in what statistician W. Edwards Deming called &ldquo;management by arbitrary numerical goal.&rdquo;</p>
<p><strong>Solution</strong>: Use statistical process control principles to understand natural variation before setting targets. Parmenter suggests at least 15 data points to establish a baseline.</p>
<h3 id="mistake-4-measuring-too-many-things">Mistake 4: Measuring Too Many Things</h3>
<p>A study by Bain &amp; Company found that companies with effective KPI systems measured fewer thingsâ€”they were focused on what truly mattered (Marr, 2012).</p>
<p><strong>Solution</strong>: Apply Parmenter&rsquo;s 10/80/10 rule rigorously. For every new measure added, consider retiring an existing one.</p>
<h3 id="mistake-5-failing-to-distinguish-between-different-types-of-measures">Mistake 5: Failing to Distinguish Between Different Types of Measures</h3>
<p>As Parmenter says, &ldquo;When you call everything a KPI, you end up with a dysfunctional measurement system&rdquo; (Parmenter, 2015).</p>
<p><strong>Solution</strong>: Classify each measure using Parmenter&rsquo;s taxonomy and manage each type appropriately.</p>
<h2 id="implementing-parmenters-kpi-methodology">Implementing Parmenter&rsquo;s KPI Methodology</h2>
<h3 id="step-1-establish-critical-success-factors">Step 1: Establish Critical Success Factors</h3>
<p>Before defining KPIs, organisations must identify their critical success factors (CSFs)â€”the limited number of areas where satisfactory results will ensure successful performance.</p>
<p>Parmenter recommends a structured workshop approach to identify 5-8 organisational CSFs. These become the foundation for all performance measures.</p>
<h3 id="step-2-develop-balanced-set-of-performance-measures">Step 2: Develop Balanced Set of Performance Measures</h3>
<p>Building on Kaplan and Norton&rsquo;s Balanced Scorecard (1996) and Parmenter&rsquo;s refinements, measures should be balanced across six perspectives:</p>
<ol>
<li>Customer satisfaction</li>
<li>Financial performance</li>
<li>Learning and growth</li>
<li>Internal process efficiency</li>
<li>Employee satisfaction</li>
<li>Environment/community</li>
</ol>
<p>This balanced approach ensures no single aspect of performance is overemphasised at the expense of long-term sustainability.</p>
<h3 id="step-3-create-winning-kpis">Step 3: Create Winning KPIs</h3>
<p>Parmenter recommends a bottom-up approach to KPI development:</p>
<ol>
<li>Convene a cross-functional team to identify potential measures</li>
<li>Screen candidates against the seven KPI characteristics</li>
<li>Test selected measures for a pilot period</li>
<li>Refine based on feedback and observed impact</li>
<li>Formalise the final KPI set</li>
</ol>
<h3 id="step-4-develop-reporting-mechanisms">Step 4: Develop Reporting Mechanisms</h3>
<p>For KPIs to drive performance, they must be reported effectively. Parmenter advocates for:</p>
<ul>
<li>Daily or weekly dashboard updates</li>
<li>Exception-based reporting</li>
<li>Visual displays that highlight trends</li>
<li>Clear action thresholds</li>
</ul>
<p>As noted in his &ldquo;Winning CFO&rdquo; methodology (Parmenter, 2012), &ldquo;The reporting of performance measures should focus on exception reporting rather than a complete snapshot of all measures.&rdquo;</p>
<h3 id="step-5-facilitate-organisational-learning">Step 5: Facilitate Organisational Learning</h3>
<p>The final step is creating systems that encourage learning and improvement based on KPI results. This includes:</p>
<ul>
<li>Regular KPI review sessions</li>
<li>Root cause analysis of significant variations</li>
<li>Sharing of best practices across teams</li>
<li>Continuous refinement of metrics</li>
</ul>
<h2 id="examples-of-winning-kpis-vs-ineffective-measures">Examples of Winning KPIs vs. Ineffective Measures</h2>
<p>To illustrate the difference between true KPIs and less effective measures, consider these examples from Parmenter&rsquo;s work:</p>
<h3 id="traditional-metrics-vs-winning-kpis">Traditional Metrics vs. Winning KPIs</h3>
<p><strong>Financial Perspective:</strong></p>
<ul>
<li>Traditional: Monthly revenue (RI)</li>
<li>Winning KPI: Late shipments to key customers (measured daily)</li>
</ul>
<p><strong>Customer Perspective:</strong></p>
<ul>
<li>Traditional: Quarterly customer satisfaction score (RI)</li>
<li>Winning KPI: Number of customer complaints yesterday (KPI)</li>
</ul>
<p><strong>Internal Process Perspective:</strong></p>
<ul>
<li>Traditional: Monthly production efficiency (RI)</li>
<li>Winning KPI: Production line downtime in last 24 hours (KPI)</li>
</ul>
<p><strong>Employee Perspective:</strong></p>
<ul>
<li>Traditional: Annual employee satisfaction (KRI)</li>
<li>Winning KPI: Staff suggestions implemented in past week (KPI)</li>
</ul>
<p>Note how the winning KPIs are measured more frequently and are more actionable than their traditional counterparts.</p>
<h2 id="case-study-transforming-kpis-at-a-manufacturing-company">Case Study: Transforming KPIs at a Manufacturing Company</h2>
<p><em>(Note: This case study is adapted from examples in Parmenter&rsquo;s publications)</em></p>
<p>A mid-sized manufacturing company struggled with performance measurement despite having over 100 metrics tracked monthly. After implementing Parmenter&rsquo;s methodology:</p>
<ol>
<li>They identified six critical success factors through facilitated workshops</li>
<li>Reduced their measurement set to 10 KRIs, 30 RIs/PIs, and 8 true KPIs</li>
<li>Moved key measures from monthly to daily/weekly tracking</li>
<li>Implemented visual management boards in each department</li>
<li>Established regular performance dialogues around the KPIs</li>
</ol>
<p>Results after six months:</p>
<ul>
<li>On-time delivery improved from 82% to 96%</li>
<li>Customer complaints reduced by 45%</li>
<li>Production efficiency increased by 15%</li>
<li>Employee suggestions implemented rose from 5 to 35 per month</li>
</ul>
<p>The key insight: By measuring fewer things but measuring them correctly, the organisation gained far more insight and impact.</p>
<h2 id="creating-a-kpi-implementation-roadmap">Creating a KPI Implementation Roadmap</h2>
<p>Based on Parmenter&rsquo;s &ldquo;Four Foundation Stones&rdquo; methodology (2015), here&rsquo;s a practical roadmap for implementing effective KPIs:</p>
<h3 id="foundation-stone-1-partnership-with-staff-unions-and-third-parties">Foundation Stone 1: Partnership with Staff, Unions, and Third Parties</h3>
<ul>
<li>Form a cross-functional KPI team</li>
<li>Involve frontline staff in measure selection</li>
<li>Train managers in performance coaching</li>
<li>Address concerns about measurement openly</li>
</ul>
<h3 id="foundation-stone-2-transfer-of-power-to-the-front-line">Foundation Stone 2: Transfer of Power to the Front Line</h3>
<ul>
<li>Push decision rights to where information exists</li>
<li>Create visual management systems</li>
<li>Establish action thresholds and response protocols</li>
<li>Empower teams to adjust processes based on KPI signals</li>
</ul>
<h3 id="foundation-stone-3-measure-and-report-only-what-matters">Foundation Stone 3: Measure and Report Only What Matters</h3>
<ul>
<li>Apply the 10/80/10 rule rigorously</li>
<li>Report different measures to different audiences</li>
<li>Focus on exception reporting</li>
<li>Use technology to automate data collection</li>
</ul>
<h3 id="foundation-stone-4-source-kpis-from-critical-success-factors">Foundation Stone 4: Source KPIs from Critical Success Factors</h3>
<ul>
<li>Identify organisational CSFs</li>
<li>Derive department and team CSFs</li>
<li>Align KPIs to these critical factors</li>
<li>Review alignment quarterly</li>
</ul>
<h2 id="the-financial-controllers-role-in-kpi-implementation">The Financial Controller&rsquo;s Role in KPI Implementation</h2>
<p>As financial controller, you have a unique opportunity to lead KPI transformation:</p>
<ol>
<li><strong>Education</strong>: Help the organisation understand the difference between various types of measures</li>
<li><strong>Facilitation</strong>: Lead workshops to identify CSFs and potential KPIs</li>
<li><strong>Integration</strong>: Connect KPIs to planning and budgeting processes</li>
<li><strong>Analysis</strong>: Provide insight into relationships between lead and lag indicators</li>
<li><strong>Technology</strong>: Champion systems that enable more frequent measurement</li>
</ol>
<p>As Parmenter notes in &ldquo;The Leading-Edge Manager&rsquo;s Guide to Success&rdquo; (2011), &ldquo;The finance team is uniquely positioned to lead performance measurement initiatives given their analytical skills and organisation-wide perspective.&rdquo;</p>
<h2 id="self-assessment-how-effective-are-your-current-kpis">Self-Assessment: How Effective Are Your Current KPIs?</h2>
<p>Evaluate your current measurement system against these criteria:</p>
<ol>
<li>Do your &ldquo;KPIs&rdquo; meet Parmenter&rsquo;s seven characteristics?</li>
<li>How frequently are your most important measures updated?</li>
<li>Can frontline staff explain how they influence key measures?</li>
<li>Do your measures balance across all six perspectives?</li>
<li>How many levels of approval are required to act on a KPI signal?</li>
<li>Do you distinguish between different types of measures?</li>
</ol>
<p>The more &ldquo;no&rdquo; answers you have, the greater opportunity for improvement using Parmenter&rsquo;s methodology.</p>
<h2 id="next-steps-for-your-kpi-journey">Next Steps for Your KPI Journey</h2>
<ol>
<li><strong>Audit current measures</strong>: Classify existing metrics into KRIs, RIs, PIs, and KPIs</li>
<li><strong>Workshop CSFs</strong>: Identify 5-8 organisational critical success factors</li>
<li><strong>Pilot better frequency</strong>: Select 2-3 metrics to measure more frequently</li>
<li><strong>Visual management</strong>: Create simple dashboards for team performance dialogues</li>
<li><strong>Review and refine</strong>: Establish a quarterly KPI review process</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>Effective performance measurement isn&rsquo;t about more metricsâ€”it&rsquo;s about better metrics. As Parmenter emphasises, &ldquo;Let&rsquo;s put time, effort, and money into measuring those activities that, when done well, will deliver the results we need&rdquo; (Parmenter, 2015).</p>
<p>By applying his systematic approach to KPIs, financial controllers can lead a transformation from measurement as a bureaucratic exercise to measurement as a performance driver.</p>
<p>In our next post, we&rsquo;ll explore how to translate these KPI principles into lean financial reporting that executives actually read and use for decision-making.</p>
<h2 id="references">References</h2>
<p>Kaplan, R. S., &amp; Norton, D. P. (1996). <em>The Balanced Scorecard: Translating Strategy into Action</em>. Harvard Business School Press.</p>
<p>Marr, B. (2012). <em>Key Performance Indicators: The 75 Measures Every Manager Needs to Know</em>. Financial Times/Prentice Hall.</p>
<p>Neely, A., &amp; Bourne, M. (2020). <em>Why Measurement Initiatives Fail</em>. MIT Sloan Management Review.</p>
<p>Parmenter, D. (2011). <em>The Leading-Edge Manager&rsquo;s Guide to Success: Strategies and Better Practices</em>. John Wiley &amp; Sons.</p>
<p>Parmenter, D. (2012). <em>Winning CFOs: Implementing and Applying Better Practices</em>. John Wiley &amp; Sons.</p>
<p>Parmenter, D. (2015). <em>Key Performance Indicators: Developing, Implementing, and Using Winning KPIs (3rd ed.)</em>. John Wiley &amp; Sons.</p>
]]></content:encoded></item><item><title>Part 3: Python Syntax Fundamentals &amp; Language Features</title><link>https://michaelbrunger.com/python-syntax-fundamentals/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-syntax-fundamentals/</guid><description>Master Python&amp;#39;s core syntax including variables, data types, control flow, comprehensions, lambdas, iterators, generators, and basic error handling mechanisms.</description><content:encoded><![CDATA[<h1 id="post-3-python-syntax-fundamentals--language-features">Post 3: Python Syntax Fundamentals &amp; Language Features</h1>
<p>Welcome to the third post in my Python learning journey. In the first two posts, we installed Python and set up a proper development environment. Now it&rsquo;s time to dive into the language itself. This post covers the fundamental building blocks of Python code that I&rsquo;ve been learning.</p>
<p>We&rsquo;ll explore:</p>
<ol>
<li>Variables and basic data types</li>
<li>Operators and expressions</li>
<li>Control flow with conditionals and loops</li>
<li>List comprehensions and lambdas</li>
<li>Iterators and generators</li>
<li>Error handling with try/except</li>
</ol>
<p>This post is a bit longer than the previous ones, but these fundamentals form the foundation of everything else in Python, so it&rsquo;s worth taking the time to understand them.</p>
<hr>
<h2 id="1-variables-and-basic-data-types">1. Variables and Basic Data Types</h2>
<p>Python is dynamically typed, meaning you don&rsquo;t need to declare variable types explicitly. Coming from Excel formulas where everything just works, I found this quite intuitive.</p>
<h3 id="11-variables-and-assignment">1.1 Variables and Assignment</h3>
<p>Variables in Python are created when you first assign a value to them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Creating variables</span>
</span></span><span style="display:flex;"><span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Alex&#34;</span>
</span></span><span style="display:flex;"><span>age <span style="color:#f92672">=</span> <span style="color:#ae81ff">35</span>
</span></span><span style="display:flex;"><span>hourly_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">45.50</span>
</span></span><span style="display:flex;"><span>is_python_fun <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span></code></pre></div><p>Variable names:</p>
<ul>
<li>Can contain letters, numbers, and underscores</li>
<li>Cannot start with a number</li>
<li>Are case-sensitive (<code>rate</code> and <code>Rate</code> are different variables)</li>
<li>Should follow the <code>snake_case</code> convention (lowercase with underscores)</li>
</ul>
<h3 id="12-basic-data-types">1.2 Basic Data Types</h3>
<p>Python has several built-in data types:</p>
<h4 id="numbers">Numbers</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Integers (whole numbers)</span>
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>negative_number <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Floating-point (decimals)</span>
</span></span><span style="display:flex;"><span>pi <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.14159</span>
</span></span><span style="display:flex;"><span>discount_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.15</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Complex numbers</span>
</span></span><span style="display:flex;"><span>complex_number <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>j  <span style="color:#75715e"># Not often used in business applications</span>
</span></span></code></pre></div><h4 id="strings">Strings</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Text enclosed in quotes (single or double)</span>
</span></span><span style="display:flex;"><span>first_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>last_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Doe&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Multi-line strings use triple quotes</span>
</span></span><span style="display:flex;"><span>address <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;123 Main Street
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Anytown, CA 12345&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># String concatenation</span>
</span></span><span style="display:flex;"><span>full_name <span style="color:#f92672">=</span> first_name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">+</span> last_name  <span style="color:#75715e"># &#34;John Doe&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># f-strings (Python 3.6+) - my preferred way to format strings</span>
</span></span><span style="display:flex;"><span>greeting <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Hello, </span><span style="color:#e6db74">{</span>first_name<span style="color:#e6db74">}</span><span style="color:#e6db74">! You are </span><span style="color:#e6db74">{</span>age<span style="color:#e6db74">}</span><span style="color:#e6db74"> years old.&#34;</span>
</span></span></code></pre></div><h4 id="booleans">Booleans</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># True or False values</span>
</span></span><span style="display:flex;"><span>is_active <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>has_paid <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Boolean operations</span>
</span></span><span style="display:flex;"><span>is_valid_customer <span style="color:#f92672">=</span> is_active <span style="color:#f92672">and</span> has_paid  <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>can_contact <span style="color:#f92672">=</span> is_active <span style="color:#f92672">or</span> has_paid  <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>is_not_active <span style="color:#f92672">=</span> <span style="color:#f92672">not</span> is_active  <span style="color:#75715e"># False</span>
</span></span></code></pre></div><h4 id="none-type">None Type</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Represents absence of value (similar to NULL in databases)</span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span></code></pre></div><h3 id="13-type-conversion">1.3 Type Conversion</h3>
<p>Python can convert between types:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># String to number</span>
</span></span><span style="display:flex;"><span>age_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;35&#34;</span>
</span></span><span style="display:flex;"><span>age_num <span style="color:#f92672">=</span> int(age_str)  <span style="color:#75715e"># 35 as integer</span>
</span></span><span style="display:flex;"><span>price_float <span style="color:#f92672">=</span> float(<span style="color:#e6db74">&#34;45.50&#34;</span>)  <span style="color:#75715e"># 45.5 as float</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Number to string</span>
</span></span><span style="display:flex;"><span>count_str <span style="color:#f92672">=</span> str(<span style="color:#ae81ff">10</span>)  <span style="color:#75715e"># &#34;10&#34; as string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check type of a variable</span>
</span></span><span style="display:flex;"><span>print(type(age_num))  <span style="color:#75715e"># &lt;class &#39;int&#39;&gt;</span>
</span></span></code></pre></div><hr>
<h2 id="2-operators-and-expressions">2. Operators and Expressions</h2>
<p>Python supports various operators for calculations and comparisons.</p>
<h3 id="21-arithmetic-operators">2.1 Arithmetic Operators</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addition <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b        <span style="color:#75715e"># 13</span>
</span></span><span style="display:flex;"><span>subtraction <span style="color:#f92672">=</span> a <span style="color:#f92672">-</span> b     <span style="color:#75715e"># 7</span>
</span></span><span style="display:flex;"><span>multiplication <span style="color:#f92672">=</span> a <span style="color:#f92672">*</span> b  <span style="color:#75715e"># 30</span>
</span></span><span style="display:flex;"><span>division <span style="color:#f92672">=</span> a <span style="color:#f92672">/</span> b        <span style="color:#75715e"># 3.3333... (always returns float)</span>
</span></span><span style="display:flex;"><span>floor_division <span style="color:#f92672">=</span> a <span style="color:#f92672">//</span> b <span style="color:#75715e"># 3 (integer division, rounds down)</span>
</span></span><span style="display:flex;"><span>modulus <span style="color:#f92672">=</span> a <span style="color:#f92672">%</span> b         <span style="color:#75715e"># 1 (remainder of division)</span>
</span></span><span style="display:flex;"><span>exponent <span style="color:#f92672">=</span> a <span style="color:#f92672">**</span> b       <span style="color:#75715e"># 1000 (10 raised to power of 3)</span>
</span></span></code></pre></div><h3 id="22-comparison-operators">2.2 Comparison Operators</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>equal <span style="color:#f92672">=</span> a <span style="color:#f92672">==</span> b              <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>not_equal <span style="color:#f92672">=</span> a <span style="color:#f92672">!=</span> b          <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>greater_than <span style="color:#f92672">=</span> a <span style="color:#f92672">&gt;</span> b        <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>less_than <span style="color:#f92672">=</span> a <span style="color:#f92672">&lt;</span> b           <span style="color:#75715e"># False</span>
</span></span><span style="display:flex;"><span>greater_or_equal <span style="color:#f92672">=</span> a <span style="color:#f92672">&gt;=</span> b   <span style="color:#75715e"># True</span>
</span></span><span style="display:flex;"><span>less_or_equal <span style="color:#f92672">=</span> a <span style="color:#f92672">&lt;=</span> b      <span style="color:#75715e"># False</span>
</span></span></code></pre></div><h3 id="23-assignment-operators">2.3 Assignment Operators</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Simple assignment</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Combined operators</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">+=</span> <span style="color:#ae81ff">5</span>   <span style="color:#75715e"># Same as x = x + 5 (x becomes 15)</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">-=</span> <span style="color:#ae81ff">3</span>   <span style="color:#75715e"># Same as x = x - 3 (x becomes 12)</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">*=</span> <span style="color:#ae81ff">2</span>   <span style="color:#75715e"># Same as x = x * 2 (x becomes 24)</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">/=</span> <span style="color:#ae81ff">4</span>   <span style="color:#75715e"># Same as x = x / 4 (x becomes 6.0)</span>
</span></span></code></pre></div><hr>
<h2 id="3-control-flow">3. Control Flow</h2>
<p>Control flow determines the order in which code executes based on conditions and loops.</p>
<h3 id="31-conditional-statements-ifelifelse">3.1 Conditional Statements (if/elif/else)</h3>
<p>Python uses indentation (whitespace) to define code blocks:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>age <span style="color:#f92672">=</span> <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> age <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">18</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Minor&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> age <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">65</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Adult&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Senior&#34;</span>)
</span></span></code></pre></div><p>Multiple conditions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>income <span style="color:#f92672">=</span> <span style="color:#ae81ff">75000</span>
</span></span><span style="display:flex;"><span>years_employed <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> income <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">50000</span> <span style="color:#f92672">and</span> years_employed <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Loan approved&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> income <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">30000</span> <span style="color:#f92672">or</span> years_employed <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">5</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Further review needed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Loan denied&#34;</span>)
</span></span></code></pre></div><h3 id="32-loops">3.2 Loops</h3>
<h4 id="for-loops">For Loops</h4>
<p>For loops iterate over sequences (lists, strings, etc.):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Loop through a list</span>
</span></span><span style="display:flex;"><span>expenses <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1200</span>, <span style="color:#ae81ff">450</span>, <span style="color:#ae81ff">700</span>, <span style="color:#ae81ff">95</span>]
</span></span><span style="display:flex;"><span>total <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> expense <span style="color:#f92672">in</span> expenses:
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">+=</span> expense
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Total expenses: $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Total expenses: $2445</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop with a range</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):  <span style="color:#75715e"># 0, 1, 2, 3, 4</span>
</span></span><span style="display:flex;"><span>    print(i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop with index and value using enumerate</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> index, value <span style="color:#f92672">in</span> enumerate(expenses):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Expense </span><span style="color:#e6db74">{</span>index<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>value<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h4 id="while-loops">While Loops</h4>
<p>While loops execute as long as a condition is true:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> count <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>:
</span></span><span style="display:flex;"><span>    print(count)
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>  <span style="color:#75715e"># Don&#39;t forget this or you&#39;ll create an infinite loop!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Break and continue</span>
</span></span><span style="display:flex;"><span>number <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:  <span style="color:#75715e"># Infinite loop</span>
</span></span><span style="display:flex;"><span>    number <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> number <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>  <span style="color:#75715e"># Skip the rest of this iteration</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> number <span style="color:#f92672">==</span> <span style="color:#ae81ff">6</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>  <span style="color:#75715e"># Exit the loop entirely</span>
</span></span><span style="display:flex;"><span>    print(number)  <span style="color:#75715e"># Prints 1, 2, 4, 5</span>
</span></span></code></pre></div><hr>
<h2 id="4-list-comprehensions-and-lambdas">4. List Comprehensions and Lambdas</h2>
<p>These are more advanced features that make Python code concise and expressive.</p>
<h3 id="41-list-comprehensions">4.1 List Comprehensions</h3>
<p>List comprehensions provide a compact way to create lists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Traditional way</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>squares <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers:
</span></span><span style="display:flex;"><span>    squares<span style="color:#f92672">.</span>append(n <span style="color:#f92672">*</span> n)
</span></span><span style="display:flex;"><span>print(squares)  <span style="color:#75715e"># [1, 4, 9, 16, 25]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># With list comprehension</span>
</span></span><span style="display:flex;"><span>squares <span style="color:#f92672">=</span> [n <span style="color:#f92672">*</span> n <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers]
</span></span><span style="display:flex;"><span>print(squares)  <span style="color:#75715e"># [1, 4, 9, 16, 25]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># With conditional filtering</span>
</span></span><span style="display:flex;"><span>even_squares <span style="color:#f92672">=</span> [n <span style="color:#f92672">*</span> n <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers <span style="color:#66d9ef">if</span> n <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(even_squares)  <span style="color:#75715e"># [4, 16]</span>
</span></span></code></pre></div><h3 id="42-dictionary-and-set-comprehensions">4.2 Dictionary and Set Comprehensions</h3>
<p>Similar syntax works for dictionaries and sets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Dictionary comprehension</span>
</span></span><span style="display:flex;"><span>number_to_square <span style="color:#f92672">=</span> {n: n <span style="color:#f92672">*</span> n <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> numbers}
</span></span><span style="display:flex;"><span>print(number_to_square)  <span style="color:#75715e"># {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set comprehension (eliminates duplicates)</span>
</span></span><span style="display:flex;"><span>values <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>unique_values <span style="color:#f92672">=</span> {v <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> values}
</span></span><span style="display:flex;"><span>print(unique_values)  <span style="color:#75715e"># {1, 2, 3, 4, 5}</span>
</span></span></code></pre></div><h3 id="43-lambda-functions">4.3 Lambda Functions</h3>
<p>Lambdas are small anonymous functions defined with the <code>lambda</code> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Traditional function</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add</span>(a, b):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Equivalent lambda function</span>
</span></span><span style="display:flex;"><span>add_lambda <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> a, b: a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(add(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>))        <span style="color:#75715e"># 5</span>
</span></span><span style="display:flex;"><span>print(add_lambda(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)) <span style="color:#75715e"># 5</span>
</span></span></code></pre></div><p>Lambdas are often used with functions like <code>map()</code>, <code>filter()</code>, and <code>sorted()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Map applies a function to each item in an iterable</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>squared <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x <span style="color:#f92672">*</span> x, numbers))
</span></span><span style="display:flex;"><span>print(squared)  <span style="color:#75715e"># [1, 4, 9, 16, 25]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Filter creates a list of elements for which a function returns True</span>
</span></span><span style="display:flex;"><span>even_numbers <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x: x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>, numbers))
</span></span><span style="display:flex;"><span>print(even_numbers)  <span style="color:#75715e"># [2, 4]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sorted with a custom key function</span>
</span></span><span style="display:flex;"><span>employees <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">60000</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">50000</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;salary&#34;</span>: <span style="color:#ae81ff">75000</span>}
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>sorted_by_salary <span style="color:#f92672">=</span> sorted(employees, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> emp: emp[<span style="color:#e6db74">&#34;salary&#34;</span>])
</span></span><span style="display:flex;"><span>print(sorted_by_salary)  <span style="color:#75715e"># Sorts employees by salary</span>
</span></span></code></pre></div><hr>
<h2 id="5-iterators-and-generators">5. Iterators and Generators</h2>
<p>These features help process data efficiently, especially when working with large datasets.</p>
<h3 id="51-iterators">5.1 Iterators</h3>
<p>An iterator is an object that can be iterated (looped) over. Python&rsquo;s <code>for</code> loops work with iterators:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Lists, tuples, dictionaries, and sets are all iterable</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> num <span style="color:#f92672">in</span> numbers:  <span style="color:#75715e"># numbers.__iter__() is called implicitly</span>
</span></span><span style="display:flex;"><span>    print(num)
</span></span></code></pre></div><p>You can create your own iterator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Manual iteration with iter() and next()</span>
</span></span><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>iterator <span style="color:#f92672">=</span> iter(numbers)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(next(iterator))  <span style="color:#75715e"># 1</span>
</span></span><span style="display:flex;"><span>print(next(iterator))  <span style="color:#75715e"># 2</span>
</span></span><span style="display:flex;"><span>print(next(iterator))  <span style="color:#75715e"># 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(next(iterator))  # Would raise StopIteration exception</span>
</span></span></code></pre></div><h3 id="52-generators">5.2 Generators</h3>
<p>Generators are functions that return an iterator using the <code>yield</code> keyword:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_up_to</span>(max):
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> count <span style="color:#f92672">&lt;=</span> max:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">yield</span> count
</span></span><span style="display:flex;"><span>        count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Using the generator</span>
</span></span><span style="display:flex;"><span>counter <span style="color:#f92672">=</span> count_up_to(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>print(next(counter))  <span style="color:#75715e"># 1</span>
</span></span><span style="display:flex;"><span>print(next(counter))  <span style="color:#75715e"># 2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Or in a loop</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> number <span style="color:#f92672">in</span> count_up_to(<span style="color:#ae81ff">3</span>):
</span></span><span style="display:flex;"><span>    print(number)  <span style="color:#75715e"># Prints 1, 2, 3</span>
</span></span></code></pre></div><p>Generators are memory-efficient because they generate values on-demand rather than storing the entire sequence in memory. This is especially useful for large datasets.</p>
<hr>
<h2 id="6-error-handling-with-tryexcept">6. Error Handling with try/except</h2>
<p>Python uses exceptions to handle errors gracefully:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Basic try/except</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">0</span>  <span style="color:#75715e"># Division by zero raises an exception</span>
</span></span><span style="display:flex;"><span>    print(result)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ZeroDivisionError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Cannot divide by zero!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Handling multiple exception types</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    number <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Enter a number: &#34;</span>))
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> number
</span></span><span style="display:flex;"><span>    print(result)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;That&#39;s not a valid number!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ZeroDivisionError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Cannot divide by zero!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Try/except/else/finally</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    file <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;data.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
</span></span><span style="display:flex;"><span>    content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">FileNotFoundError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;File not found!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Runs if no exception occurred</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;File content: </span><span style="color:#e6db74">{</span>content<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Always runs, regardless of exception</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;file&#39;</span> <span style="color:#f92672">in</span> locals() <span style="color:#f92672">and</span> <span style="color:#f92672">not</span> file<span style="color:#f92672">.</span>closed:
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;File closed!&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="practice-exercise-financial-calculator">Practice Exercise: Financial Calculator</h2>
<p>Let&rsquo;s apply what we&rsquo;ve learned to build a simple financial calculator:</p>
<p>Create a program that:</p>
<ol>
<li>Asks the user for their monthly income and expenses</li>
<li>Calculates their monthly savings</li>
<li>Projects savings over time with compound interest</li>
<li>Handles invalid inputs gracefully with try/except</li>
</ol>
<p>Here&rsquo;s a starter template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_savings_projection</span>(monthly_savings, annual_interest_rate, years):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Convert annual interest rate to monthly and decimal</span>
</span></span><span style="display:flex;"><span>    monthly_rate <span style="color:#f92672">=</span> annual_interest_rate <span style="color:#f92672">/</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    months <span style="color:#f92672">=</span> years <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Project savings</span>
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, months <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> total <span style="color:#f92672">+</span> monthly_savings  <span style="color:#75715e"># Add monthly contribution</span>
</span></span><span style="display:flex;"><span>        interest <span style="color:#f92672">=</span> total <span style="color:#f92672">*</span> monthly_rate  <span style="color:#75715e"># Calculate interest</span>
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> total <span style="color:#f92672">+</span> interest         <span style="color:#75715e"># Add interest to total</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Print yearly totals</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> month <span style="color:#f92672">%</span> <span style="color:#ae81ff">12</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Year </span><span style="color:#e6db74">{</span>month <span style="color:#f92672">//</span> <span style="color:#ae81ff">12</span><span style="color:#e6db74">}</span><span style="color:#e6db74">: $</span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    income <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Enter your monthly income: $&#34;</span>))
</span></span><span style="display:flex;"><span>    expenses <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Enter your monthly expenses: $&#34;</span>))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    monthly_savings <span style="color:#f92672">=</span> income <span style="color:#f92672">-</span> expenses
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> monthly_savings <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Your expenses exceed your income. No savings to project.&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        interest_rate <span style="color:#f92672">=</span> float(input(<span style="color:#e6db74">&#34;Enter annual interest rate (%): &#34;</span>))
</span></span><span style="display:flex;"><span>        years <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Enter number of years to project: &#34;</span>))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Monthly savings: $</span><span style="color:#e6db74">{</span>monthly_savings<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Projecting growth over </span><span style="color:#e6db74">{</span>years<span style="color:#e6db74">}</span><span style="color:#e6db74"> years at </span><span style="color:#e6db74">{</span>interest_rate<span style="color:#e6db74">}</span><span style="color:#e6db74">% annual interest:&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        final_amount <span style="color:#f92672">=</span> calculate_savings_projection(monthly_savings, interest_rate, years)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Final savings after </span><span style="color:#e6db74">{</span>years<span style="color:#e6db74">}</span><span style="color:#e6db74"> years: $</span><span style="color:#e6db74">{</span>final_amount<span style="color:#e6db74">:</span><span style="color:#e6db74">.2f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Please enter valid numbers only.&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we&rsquo;ve covered the syntax fundamentals, the next post will dive into Python&rsquo;s core data structures in more detail. We&rsquo;ll explore lists, tuples, dictionaries, and setsâ€”and when to use each one.</p>
<p>Stay tuned for Post 4: Core Data Structures!</p>
<hr>
<p>*This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please reach out</p>
]]></content:encoded></item><item><title>From Bean Counter to Business Partner</title><link>https://michaelbrunger.com/finance-bean-counter-to-business-partner/</link><pubDate>Tue, 06 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/finance-bean-counter-to-business-partner/</guid><description>How to transform your role from traditional accounting to strategic business partnership</description><content:encoded><![CDATA[<h2 id="the-stereotype-vs-the-new-reality">The Stereotype vs. The New Reality</h2>
<p>For decades, finance professionalsâ€”particularly accountants and controllersâ€”have battled the &ldquo;bean counter&rdquo; stereotype: detail-oriented, historically focused, compliance-driven, and somewhat disconnected from the operational realities of the business. This perception, while increasingly outdated, persists in many organisations.</p>
<p>As David Parmenter notes in his book &ldquo;The Leading-Edge Manager&rsquo;s Guide to Success&rdquo; (2011), &ldquo;Yesterday&rsquo;s finance team was renowned for producing financial information that was too late, too detailed, and not focused on what matters to the management team.&rdquo; This observation captures the fundamental challenge that modern financial controllers must overcome.</p>
<p>The new reality demands something entirely different:</p>
<p><strong>Bean Counter (Traditional Model)</strong>:</p>
<ul>
<li>Focus on transactions and compliance</li>
<li>&ldquo;Scorekeeping&rdquo; mentality</li>
<li>Historical reporting</li>
<li>Technical accounting expertise</li>
<li>Risk aversion and control orientation</li>
<li>Process standardisation</li>
</ul>
<p><strong>Business Partner (Modern Model)</strong>:</p>
<ul>
<li>Focus on strategy and value creation</li>
<li>Forward-looking guidance</li>
<li>Predictive analysis and scenario planning</li>
<li>Broad business acumen</li>
<li>Balanced risk management perspective</li>
<li>Innovation and continuous improvement</li>
</ul>
<h2 id="parmenters-winning-finance-team-concept">Parmenter&rsquo;s &ldquo;Winning Finance Team&rdquo; Concept</h2>
<p>David Parmenter has been at the forefront of redefining the finance function&rsquo;s role. In his &ldquo;Winning CFO&rdquo; methodology (Parmenter, 2012), he emphasises that truly effective finance teams operate as partners to the business rather than merely as providers of financial information.</p>
<p>According to Parmenter, the winning finance team:</p>
<ol>
<li><strong>Sells the vision</strong>: Communicates the purpose behind finance initiatives</li>
<li><strong>Creates strategic alliances</strong>: Builds relationships across the organisation</li>
<li><strong>Maintains what&rsquo;s working</strong>: Preserves effective practices while innovating</li>
<li><strong>Understands the customers</strong>: Knows what internal customers genuinely need</li>
<li><strong>Delivers &ldquo;wow&rdquo; projects</strong>: Implements high-impact initiatives</li>
<li><strong>Uses leading-edge methodologies</strong>: Employs best practices in performance management</li>
</ol>
<p>This framework provides a valuable roadmap for controllers seeking to reposition themselves from technical specialists to strategic partners.</p>
<h2 id="the-four-faces-of-finance-leadership">The Four Faces of Finance Leadership</h2>
<p>Building on Parmenter&rsquo;s work, Deloitte&rsquo;s &ldquo;Four Faces of the CFO&rdquo; framework (Deloitte, 2021) offers another useful perspective on this evolution. While originally focused on CFO roles, it applies equally to controllers and finance managers:</p>
<ol>
<li><strong>Steward</strong>: Preserving assets, ensuring compliance</li>
<li><strong>Operator</strong>: Running efficient finance operations</li>
<li><strong>Strategist</strong>: Helping to shape overall strategy and direction</li>
<li><strong>Catalyst</strong>: Instilling a financial approach and mindset across the organisation</li>
</ol>
<p>Traditional controllers excel at the first two faces but must develop competencies in the latter two to truly function as business partners. As noted in Deloitte&rsquo;s research, high-performing finance teams spend approximately 60% of their time on strategist and catalyst activities, compared to just 30% for average teams.</p>
<h2 id="practical-steps-for-transformation">Practical Steps for Transformation</h2>
<h3 id="1-develop-business-acumen">1. Develop Business Acumen</h3>
<p>Business partnership requires understanding the business beyond its financial statements. As Parmenter emphasises in &ldquo;Winning CFO&rdquo; (2012), finance professionals need to &ldquo;walk in the shoes&rdquo; of operational colleagues:</p>
<ul>
<li><strong>Schedule regular operational visits</strong>: Spend time understanding how different departments function</li>
<li><strong>Learn the industry language</strong>: Master the terminology and metrics specific to your industry</li>
<li><strong>Study the value chain</strong>: Understand how your company creates and delivers value</li>
<li><strong>Know your customers</strong>: Gain insights into customer needs and behaviors</li>
</ul>
<h3 id="2-build-relationships-intentionally">2. Build Relationships Intentionally</h3>
<p>According to McKinsey&rsquo;s research on finance excellence (McKinsey &amp; Company, 2020), relationship-building is a critical yet often overlooked aspect of finance transformation:</p>
<ul>
<li><strong>Map your stakeholders</strong>: Identify key decision-makers and their priorities</li>
<li><strong>Establish regular touchpoints</strong>: Create structured opportunities for interaction</li>
<li><strong>Ask better questions</strong>: Focus on understanding business needs rather than just financial results</li>
<li><strong>Speak their language</strong>: Translate financial concepts into business terms</li>
</ul>
<h3 id="3-shift-from-reporting-to-analysis">3. Shift from Reporting to Analysis</h3>
<p>Parmenter advocates for a fundamental shift in how finance teams allocate their time. In &ldquo;Key Performance Indicators&rdquo; (Parmenter, 2015), he suggests:</p>
<ul>
<li>Reduce time spent on data compilation by 40-60%</li>
<li>Increase time spent on analysis by 30-50%</li>
<li>Focus reporting on exceptions and insights rather than comprehensive data</li>
</ul>
<p>This shift requires:</p>
<ul>
<li><strong>Automating routine processes</strong>: Implementing technology solutions for data collection and basic reporting</li>
<li><strong>Standardising analytics</strong>: Creating reusable frameworks for business analysis</li>
<li><strong>Developing forward-looking metrics</strong>: Building predictive models rather than just historical views</li>
</ul>
<h3 id="4-master-the-art-of-communication">4. Master the Art of Communication</h3>
<p>Business partners must communicate effectively. As Parmenter emphasises in his &ldquo;Winning KPIs&rdquo; methodology (2015), numbers without context rarely drive action:</p>
<ul>
<li><strong>Know your audience</strong>: Tailor information to the recipient&rsquo;s needs and preferences</li>
<li><strong>Focus on implications</strong>: Explain the &ldquo;so what&rdquo; behind the numbers</li>
<li><strong>Use visualisation effectively</strong>: Apply principles of data visualisation</li>
<li><strong>Tell stories with data</strong>: Frame information within relevant business narratives</li>
</ul>
<p>Research by the Corporate Executive Board (now Gartner) found that finance teams who effectively communicate insights are 24% more likely to be viewed as strategic partners.</p>
<h3 id="5-lead-change-initiatives">5. Lead Change Initiatives</h3>
<p>To be seen as a business partner, finance must actively drive improvement. In &ldquo;The Leading-Edge Manager&rsquo;s Guide to Success,&rdquo; Parmenter (2011) emphasises the importance of leading &ldquo;breakthrough projects&rdquo;:</p>
<ul>
<li><strong>Identify high-impact opportunities</strong>: Focus on initiatives with significant ROI</li>
<li><strong>Apply project management discipline</strong>: Demonstrate structured implementation capabilities</li>
<li><strong>Measure and communicate results</strong>: Quantify the value created</li>
<li><strong>Build on successes</strong>: Use completed projects as springboards for further initiatives</li>
</ul>
<h2 id="common-challenges-in-making-the-transition">Common Challenges in Making the Transition</h2>
<h3 id="challenge-1-the-technical-comfort-zone">Challenge 1: The Technical Comfort Zone</h3>
<p>Many finance professionals have built their careers on technical excellence. Stepping outside this comfort zone can be daunting.</p>
<p><strong>Solution</strong>: Start small by volunteering for cross-functional projects that allow you to apply financial expertise in a broader context while gradually developing new skills.</p>
<h3 id="challenge-2-credibility-gaps">Challenge 2: Credibility Gaps</h3>
<p>Operational colleagues may be skeptical of finance&rsquo;s ability to add value beyond compliance and control.</p>
<p><strong>Solution</strong>: As Parmenter suggests in &ldquo;Winning CFO&rdquo; (2012), begin with &ldquo;quick wins&rdquo; that demonstrate tangible value to build credibility for larger initiatives.</p>
<h3 id="challenge-3-time-constraints">Challenge 3: Time Constraints</h3>
<p>The daily pressures of financial operations can make it difficult to allocate time to strategic activities.</p>
<p><strong>Solution</strong>: Apply Parmenter&rsquo;s &ldquo;fast close&rdquo; methodology (2013) to streamline month-end processes, freeing up capacity for business partnering.</p>
<h3 id="challenge-4-skill-gaps">Challenge 4: Skill Gaps</h3>
<p>Business partnering requires capabilities that may not have been developed through traditional accounting training.</p>
<p><strong>Solution</strong>: Invest in targeted development in areas like strategic thinking, influence skills, and business acumen through both formal and experiential learning.</p>
<h2 id="measuring-your-progress">Measuring Your Progress</h2>
<p>How do you know if you&rsquo;re successfully making the transition from bean counter to business partner? Consider these metrics suggested by Parmenter and others:</p>
<ol>
<li><strong>Time allocation</strong>: % of finance team time spent on analysis vs. transaction processing</li>
<li><strong>Meeting invitations</strong>: Frequency of inclusion in strategic business discussions</li>
<li><strong>Decision impact</strong>: % of business decisions influenced by finance input</li>
<li><strong>Satisfaction surveys</strong>: Ratings from internal customers on finance&rsquo;s value contribution</li>
<li><strong>Initiative leadership</strong>: # of business improvement projects led by finance</li>
</ol>
<h2 id="case-study-finance-transformation-at-company-xyz">Case Study: Finance Transformation at Company XYZ</h2>
<p><em>(Note: This is an illustrative example based on Parmenter&rsquo;s work with clients as described in his publications)</em></p>
<p>A mid-sized manufacturing company found its finance team trapped in the traditional modelâ€”spending 80% of their time on transaction processing and reporting, with minimal time for analysis or business support.</p>
<p>Following Parmenter&rsquo;s methodology, they implemented several key changes:</p>
<ol>
<li>Automated standard reports using dashboard technology</li>
<li>Restructured the team to create dedicated business partner roles</li>
<li>Implemented a fast close process to complete month-end in 3 days</li>
<li>Established regular business review sessions with operational leaders</li>
</ol>
<p>The results were transformative:</p>
<ul>
<li>Time spent on reporting decreased from 60% to 30%</li>
<li>Analysis time increased from 15% to 45%</li>
<li>Internal customer satisfaction with finance increased by 40%</li>
<li>Finance-led initiatives delivered $1.2M in cost savings</li>
</ul>
<h2 id="self-assessment-where-are-you-on-the-journey">Self-Assessment: Where Are You on the Journey?</h2>
<p>To assess your current position on the bean counter to business partner spectrum, consider these questions:</p>
<ol>
<li>Do operational colleagues proactively seek your input on business decisions?</li>
<li>Can you clearly articulate your company&rsquo;s competitive strategy and market position?</li>
<li>Have you led or substantially contributed to a business improvement initiative in the past six months?</li>
<li>Do your reports focus more on insights and recommendations than data compilation?</li>
<li>How often do you spend time in operational areas of the business?</li>
<li>Can you explain complex financial concepts in non-technical language?</li>
</ol>
<p>The more &ldquo;yes&rdquo; answers you have, the further along you are in your transformation journey.</p>
<h2 id="action-items-for-your-first-90-days">Action Items for Your First 90 Days</h2>
<p>Based on Parmenter&rsquo;s &ldquo;first 100 days&rdquo; methodology for finance leaders (Parmenter, 2012), consider these priority actions:</p>
<ol>
<li><strong>Conduct a stakeholder analysis</strong>: Identify key business leaders and their priorities</li>
<li><strong>Schedule operational visits</strong>: Spend time understanding the business firsthand</li>
<li><strong>Review your reporting package</strong>: Identify opportunities for streamlining and insight enhancement</li>
<li><strong>Find a quick win</strong>: Identify and implement one high-visibility improvement</li>
<li><strong>Build your knowledge base</strong>: Dedicate time to understanding your industry and competitive landscape</li>
</ol>
<h2 id="conclusion-a-mindset-shift">Conclusion: A Mindset Shift</h2>
<p>The transformation from bean counter to business partner is fundamentally about mindset. As Parmenter emphasises throughout his work, it requires shifting from:</p>
<ul>
<li>Accuracy to relevance</li>
<li>Compliance to performance</li>
<li>Past to future</li>
<li>Data to insights</li>
<li>Control to enablement</li>
<li>Process to outcomes</li>
</ul>
<p>This journey won&rsquo;t happen overnight, but with deliberate focus and consistent action, you can reposition yourself and your team as valued strategic partners rather than mere financial technicians.</p>
<p>In our next post, we&rsquo;ll explore Parmenter&rsquo;s approach to Key Performance Indicators and how to develop metrics that actually drive performance rather than just measure it.</p>
<h2 id="references">References</h2>
<p>Deloitte. (2021). <em>Four Faces of the CFO</em>. Deloitte Development LLC.</p>
<p>McKinsey &amp; Company. (2020). <em>The CFO&rsquo;s Role in Helping Companies Navigate the Coronavirus Crisis</em>. McKinsey &amp; Company.</p>
<p>Parmenter, D. (2011). <em>The Leading-Edge Manager&rsquo;s Guide to Success: Strategies and Better Practices</em>. John Wiley &amp; Sons.</p>
<p>Parmenter, D. (2012). <em>Winning CFOs: Implementing and Applying Better Practices</em>. John Wiley &amp; Sons.</p>
<p>Parmenter, D. (2013). <em>Rapid Month-End Closing for Financial Managers</em>. Wiley-Global Finance.</p>
<p>Parmenter, D. (2015). <em>Key Performance Indicators: Developing, Implementing, and Using Winning KPIs</em>. John Wiley &amp; Sons.</p>
]]></content:encoded></item><item><title>Hugo &amp; PaperMod Theme</title><link>https://michaelbrunger.com/hugo-papermod-theme/</link><pubDate>Tue, 06 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/hugo-papermod-theme/</guid><description>&lt;h1 id="hugo--papermod-theme-a-complete-crash-course">Hugo + PaperMod Theme: A Complete Crash Course&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://gohugo.io/">Hugo&lt;/a> is a blazing fast static site generator written in Go. Combined with the elegant &lt;a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod theme&lt;/a>, it&amp;rsquo;s a powerful solution for creating modern websites, blogs, and documentation. This crash course will guide you through setting up, configuring, and customising your Hugo site with PaperMod. This is how I created my site.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;h3 id="install-hugo">Install Hugo&lt;/h3>
&lt;p>First, you need to install Hugo on your system:&lt;/p></description><content:encoded><![CDATA[<h1 id="hugo--papermod-theme-a-complete-crash-course">Hugo + PaperMod Theme: A Complete Crash Course</h1>
<h2 id="introduction">Introduction</h2>
<p><a href="https://gohugo.io/">Hugo</a> is a blazing fast static site generator written in Go. Combined with the elegant <a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod theme</a>, it&rsquo;s a powerful solution for creating modern websites, blogs, and documentation. This crash course will guide you through setting up, configuring, and customising your Hugo site with PaperMod. This is how I created my site.</p>
<h2 id="installation">Installation</h2>
<h3 id="install-hugo">Install Hugo</h3>
<p>First, you need to install Hugo on your system:</p>
<h4 id="on-macos-using-homebrew">On macOS (using Homebrew):</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install hugo
</span></span></code></pre></div><h4 id="on-windows-using-chocolatey">On Windows (using Chocolatey):</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>choco install hugo -confirm
</span></span></code></pre></div><h4 id="on-linux-debianubuntu">On Linux (Debian/Ubuntu):</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install hugo
</span></span></code></pre></div><p>Verify your installation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo version
</span></span></code></pre></div><p>Tip: you&rsquo;ll need to install Chocolatey as well if not done already.</p>
<h2 id="creating-a-new-site">Creating a New Site</h2>
<p>Create a new Hugo site:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo new site mysitename
</span></span><span style="display:flex;"><span>cd mysitename
</span></span></code></pre></div><p>This creates a new Hugo site in a folder named <code>mysitename</code>.</p>
<h2 id="installing-the-papermod-theme">Installing the PaperMod Theme</h2>
<p>You can install the PaperMod theme in two ways:</p>
<h3 id="method-1-using-git-submodules-recommended">Method 1: Using Git Submodules (Recommended)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span>git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</span></span></code></pre></div><h3 id="method-2-manual-download">Method 2: Manual Download</h3>
<ol>
<li>Download the theme from <a href="https://github.com/adityatelange/hugo-PaperMod">GitHub</a></li>
<li>Extract it to the <code>themes/PaperMod</code> directory</li>
</ol>
<h2 id="basic-configuration">Basic Configuration</h2>
<p>Create or modify the <code>config.yml</code> file in your site&rsquo;s root directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">baseURL</span>: <span style="color:#e6db74">&#34;https://yourwebsite.com/&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;Your Site Title&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">pagerSize</span>: <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">theme</span>: <span style="color:#ae81ff">PaperMod</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">enableRobotsTXT</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">buildDrafts</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">buildFuture</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">buildExpired</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">minifyOutput</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">env</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">title</span>: <span style="color:#ae81ff">Your Site Title</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#34;Your site description&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">keywords</span>: [<span style="color:#ae81ff">Blog, Portfolio, PaperMod]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">author</span>: <span style="color:#ae81ff">Your Name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">DateFormat</span>: <span style="color:#e6db74">&#34;January 2, 2006&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">defaultTheme</span>: <span style="color:#ae81ff">auto</span> <span style="color:#75715e"># dark, light, auto</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">disableThemeToggle</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ShowReadingTime</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ShowShareButtons</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ShowPostNavLinks</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ShowBreadCrumbs</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ShowCodeCopyButtons</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ShowWordCount</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ShowRssButtonInSectionTermList</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">UseHugoToc</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">disableSpecial1stPost</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">disableScrollToTop</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">comments</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hidemeta</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hideSummary</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">showtoc</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tocopen</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">assets</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># disableFingerprinting: true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">favicon</span>: <span style="color:#e6db74">&#34;/favicon.ico&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">favicon16x16</span>: <span style="color:#e6db74">&#34;/favicon-16x16.png&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">favicon32x32</span>: <span style="color:#e6db74">&#34;/favicon-32x32.png&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">apple_touch_icon</span>: <span style="color:#e6db74">&#34;/apple-touch-icon.png&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">profileMode</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">title</span>: <span style="color:#ae81ff">Your Name</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">subtitle</span>: <span style="color:#e6db74">&#34;Your short bio here&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">imageUrl</span>: <span style="color:#e6db74">&#34;/images/profile.jpg&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">imageWidth</span>: <span style="color:#ae81ff">120</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">imageHeight</span>: <span style="color:#ae81ff">120</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">buttons</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Archives</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">archives</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Tags</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">tags</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">socialIcons</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">twitter</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;https://twitter.com/&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">github</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;https://github.com/&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">linkedin</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;https://linkedin.com/in/&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cover</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hidden</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hiddenInList</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hiddenInSingle</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">menu</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">main</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">categories</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Categories</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/categories/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">tags</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Tags</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/tags/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">archives</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Archives</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/archives/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">search</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Search</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/search/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">40</span>
</span></span></code></pre></div><h2 id="content-management">Content Management</h2>
<h3 id="creating-posts">Creating Posts</h3>
<p>Create a new post:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo new posts/my-first-post.md
</span></span></code></pre></div><p>This creates a new file at <code>content/posts/my-first-post.md</code> with default front matter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: &#34;My First Post&#34;
</span></span><span style="display:flex;"><span>date: 2023-04-29T10:30:00+00:00
</span></span><span style="display:flex;"><span>draft: true
</span></span><span style="display:flex;"><span>tags: [&#34;first&#34;]
</span></span><span style="display:flex;"><span>categories: [&#34;example&#34;]
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Your content here...
</span></span></code></pre></div><p>Remember to set <code>draft: false</code> when you&rsquo;re ready to publish.</p>
<h3 id="front-matter-options">Front Matter Options</h3>
<p>PaperMod supports many front matter options:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;My Post Title&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">date</span>: <span style="color:#e6db74">2023-04-29</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">draft</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">description</span>: <span style="color:#e6db74">&#34;Description of the post&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">tags</span>: [<span style="color:#e6db74">&#34;hugo&#34;</span>, <span style="color:#e6db74">&#34;papermod&#34;</span>, <span style="color:#e6db74">&#34;tutorial&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">categories</span>: [<span style="color:#e6db74">&#34;web development&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">cover</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;/path/to/image.jpg&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alt</span>: <span style="color:#e6db74">&#34;Alternative text&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">caption</span>: <span style="color:#e6db74">&#34;Image caption&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">relative</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">showToc</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">TocOpen</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">hidemeta</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">comments</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><h3 id="content-structure">Content Structure</h3>
<pre tabindex="0"><code>content/
â”œâ”€â”€ posts/
â”‚   â”œâ”€â”€ post-1.md
â”‚   â””â”€â”€ post-2.md
â”œâ”€â”€ about.md
â””â”€â”€ projects/
    â”œâ”€â”€ project-1.md
    â””â”€â”€ project-2.md
</code></pre><h2 id="customising-papermod">Customising PaperMod</h2>
<h3 id="creating-homepage-layouts">Creating Homepage Layouts</h3>
<p>PaperMod offers three homepage layouts:</p>
<ol>
<li><strong>Default (List)</strong>: Shows a list of posts</li>
<li><strong>Profile Mode</strong>: Focused on personal info</li>
<li><strong>Cover Mode</strong>: Shows a full-page cover image</li>
</ol>
<p>To enable Profile Mode, update your <code>config.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">profileMode</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;Your Name&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">subtitle</span>: <span style="color:#e6db74">&#34;Your bio or tagline&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">imageUrl</span>: <span style="color:#e6db74">&#34;/images/profile.jpg&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">buttons</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Blog</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">posts</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Projects</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">projects</span>
</span></span></code></pre></div><h3 id="adding-search-functionality">Adding Search Functionality</h3>
<ol>
<li>Create a search page:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo new search.md
</span></span></code></pre></div><ol start="2">
<li>Add this content to <code>search.md</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: &#34;Search&#34;
</span></span><span style="display:flex;"><span>layout: &#34;search&#34;
</span></span><span style="display:flex;"><span>summary: &#34;search&#34;
</span></span><span style="display:flex;"><span>placeholder: &#34;Search posts...&#34;
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><ol start="3">
<li>Add search to your menu in <code>config.yml</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">menu</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">main</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">search</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Search</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/search/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">10</span>
</span></span></code></pre></div><h3 id="custom-css">Custom CSS</h3>
<p>Create a file at <code>assets/css/extended/custom.css</code> for your custom styles:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#75715e">/* Your custom styles here */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* Custom body styles */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">post-title</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* Custom post title styles */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="custom-shortcodes">Custom Shortcodes</h3>
<p>Create custom shortcodes in <code>layouts/shortcodes/</code>:</p>
<p>For example, create <code>layouts/shortcodes/notice.html</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;notice {{ .Get 0 }}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  {{ .Inner | markdownify }}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>Use it in your content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>{&lt; <span style="color:#f92672">notice</span> <span style="color:#a6e22e">info</span> &gt;}
</span></span><span style="display:flex;"><span>This is an info notice.
</span></span><span style="display:flex;"><span>{&lt; /<span style="color:#f92672">notice</span> &gt;}
</span></span></code></pre></div><h2 id="deployment">Deployment</h2>
<h3 id="local-preview">Local Preview</h3>
<p>Run a local server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo server -D
</span></span></code></pre></div><p>This starts a server at <code>http://localhost:1313/</code>. The <code>-D</code> flag includes draft posts.</p>
<h3 id="building-for-production">Building for Production</h3>
<p>Build your site:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo --minify
</span></span></code></pre></div><p>This generates your site in the <code>public/</code> directory, ready for deployment.</p>
<h3 id="deployment-options">Deployment Options</h3>
<h4 id="github-pages">GitHub Pages</h4>
<ol>
<li>Create a <code>.github/workflows/hugo.yml</code> file:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy Hugo site</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#39;latest&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">hugo --minify</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-gh-pages@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">publish_dir</span>: <span style="color:#ae81ff">./public</span>
</span></span></code></pre></div><ol start="2">
<li>Set your repository settings to deploy from the <code>gh-pages</code> branch.</li>
</ol>
<h4 id="netlify">Netlify</h4>
<ol>
<li>Push your Hugo site to a GitHub repository</li>
<li>Sign up for <a href="https://www.netlify.com/">Netlify</a></li>
<li>Import your repository</li>
<li>Set build command to <code>hugo --minify</code> and publish directory to <code>public</code></li>
</ol>
<h2 id="hugo-command-line-flags--environment-variables">Hugo Command Line Flags &amp; Environment Variables</h2>
<p>Hugo offers numerous command line flags and environment variables that can significantly impact your development workflow and site performance.</p>
<h3 id="important-command-line-flags">Important Command Line Flags</h3>
<p>When using <code>hugo server</code> for local development:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Basic development server</span>
</span></span><span style="display:flex;"><span>hugo server
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Include draft content</span>
</span></span><span style="display:flex;"><span>hugo server -D
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fast render mode (disable for accurate rendering)</span>
</span></span><span style="display:flex;"><span>hugo server --disableFastRender
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Force rebuilds on file changes</span>
</span></span><span style="display:flex;"><span>hugo server --disableLiveReload
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Bind to all network interfaces (access from other devices)</span>
</span></span><span style="display:flex;"><span>hugo server --bind<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.0.0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Specify port</span>
</span></span><span style="display:flex;"><span>hugo server --port<span style="color:#f92672">=</span><span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Watch for changes in theme folder too</span>
</span></span><span style="display:flex;"><span>hugo server --ignoreCache --themesDir<span style="color:#f92672">=</span>../..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Full rebuild on changes (slower but more accurate)</span>
</span></span><span style="display:flex;"><span>hugo server --disableFastRender --renderToDisk
</span></span></code></pre></div><p>When building your site for production:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Standard build</span>
</span></span><span style="display:flex;"><span>hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Minify output</span>
</span></span><span style="display:flex;"><span>hugo --minify
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Include expired content</span>
</span></span><span style="display:flex;"><span>hugo --buildExpired
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Include future-dated content</span>
</span></span><span style="display:flex;"><span>hugo --buildFuture
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Include draft content (generally not for production)</span>
</span></span><span style="display:flex;"><span>hugo --buildDrafts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Specify base URL</span>
</span></span><span style="display:flex;"><span>hugo --baseURL<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://example.com/&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Verbose output for debugging</span>
</span></span><span style="display:flex;"><span>hugo -v
</span></span></code></pre></div><h3 id="environment-variables">Environment Variables</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Set environment</span>
</span></span><span style="display:flex;"><span>HUGO_ENV<span style="color:#f92672">=</span>production hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change number of parallel workers</span>
</span></span><span style="display:flex;"><span>HUGO_NUMWORKERMULTIPLIER<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Cache settings</span>
</span></span><span style="display:flex;"><span>HUGO_CACHEDIR<span style="color:#f92672">=</span>/path/to/cache hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Resource cache</span>
</span></span><span style="display:flex;"><span>HUGO_RESOURCEDIR<span style="color:#f92672">=</span>/path/to/resources hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable symlinks in file detection</span>
</span></span><span style="display:flex;"><span>HUGO_DISABLEPATHTOFILEBYDISABLEDSYMPATHY<span style="color:#f92672">=</span>true hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable .git directory ignore</span>
</span></span><span style="display:flex;"><span>HUGO_IGNOREGIT<span style="color:#f92672">=</span>true hugo
</span></span></code></pre></div><h3 id="performance-optimisation-flags">Performance Optimisation Flags</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Enable HTTP/2 server push</span>
</span></span><span style="display:flex;"><span>hugo server --http2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable lazy loading of images</span>
</span></span><span style="display:flex;"><span>hugo --disableLazyLoading
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Control image processing concurrency</span>
</span></span><span style="display:flex;"><span>HUGO_IMAGES_PROCESSOR_COUNT<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span> hugo
</span></span></code></pre></div><h3 id="configuration-based-settings">Configuration-Based Settings</h3>
<p>You can also set many of these options in your <code>config.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Build options</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">buildDrafts</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">buildFuture</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">buildExpired</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">disableFastRender</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">enableGitInfo</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Performance settings</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">minify</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">disableHugoGeneratorInject</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><h2 id="troubleshooting">Troubleshooting</h2>
<h3 id="common-issues-and-solutions">Common Issues and Solutions</h3>
<ol>
<li>
<p><strong>Theme Not Showing</strong>: Check if the theme is properly installed and referenced in your <code>config.yml</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Check theme directory</span>
</span></span><span style="display:flex;"><span>ls -la themes/
</span></span></code></pre></div></li>
<li>
<p><strong>Taxonomy Pages Missing</strong>: Ensure you&rsquo;ve defined taxonomies in your config</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">taxonomies</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">category</span>: <span style="color:#ae81ff">categories</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tag</span>: <span style="color:#ae81ff">tags</span>
</span></span></code></pre></div></li>
<li>
<p><strong>Images Not Loading</strong>: Verify image paths and try using page bundles</p>
<p>Create a directory structure:</p>
<pre tabindex="0"><code>content/
â””â”€â”€ posts/
    â””â”€â”€ my-post/
        â”œâ”€â”€ index.md
        â””â”€â”€ images/
            â””â”€â”€ featured.jpg
</code></pre><p>Then reference with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>![<span style="color:#f92672">Alt text</span>](<span style="color:#a6e22e">images/featured.jpg</span>)
</span></span></code></pre></div></li>
<li>
<p><strong>Hugo Server Error</strong>: Clear cache and restart</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo mod clean
</span></span><span style="display:flex;"><span>hugo server
</span></span></code></pre></div></li>
</ol>
<h2 id="advanced-features">Advanced Features</h2>
<h3 id="adding-a-comment-system">Adding a Comment System</h3>
<p>To add Disqus comments:</p>
<ol>
<li>Update your <code>config.yml</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">disqusShortname</span>: <span style="color:#ae81ff">your-disqus-shortname</span>
</span></span></code></pre></div><ol start="2">
<li>Enable comments in front matter:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;My Post with Comments&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">comments</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><h3 id="multilingual-support">Multilingual Support</h3>
<p>Update your <code>config.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">languageCode</span>: <span style="color:#e6db74">&#34;en-us&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">defaultContentLanguage</span>: <span style="color:#e6db74">&#34;en&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">languages</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">en</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">languageName</span>: <span style="color:#e6db74">&#34;English&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">taxonomies</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">category</span>: <span style="color:#ae81ff">categories</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">tag</span>: <span style="color:#ae81ff">tags</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">fr</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">languageName</span>: <span style="color:#e6db74">&#34;FranÃ§ais&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">taxonomies</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">category</span>: <span style="color:#ae81ff">categories</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">tag</span>: <span style="color:#ae81ff">tags</span>
</span></span></code></pre></div><p>Create language-specific content:</p>
<pre tabindex="0"><code>content/
â”œâ”€â”€ posts/
â”‚   â””â”€â”€ hello-world.md  # English
â””â”€â”€ fr/
    â””â”€â”€ posts/
        â””â”€â”€ bonjour-monde.md  # French
</code></pre><h3 id="content-organisation-with-page-bundles">Content Organisation with Page Bundles</h3>
<p>Page bundles keep content and its resources together:</p>
<pre tabindex="0"><code>content/
â””â”€â”€ posts/
    â””â”€â”€ my-bundled-post/
        â”œâ”€â”€ index.md
        â”œâ”€â”€ image1.jpg
        â””â”€â”€ data.json
</code></pre><p>Reference bundled resources in your content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>![<span style="color:#f92672">Featured Image</span>](<span style="color:#a6e22e">image1.jpg</span>)
</span></span></code></pre></div><h2 id="useful-resources">Useful Resources</h2>
<ul>
<li><a href="https://gohugo.io/documentation/">Hugo Documentation</a></li>
<li><a href="https://github.com/adityatelange/hugo-PaperMod/wiki">PaperMod Wiki</a></li>
<li><a href="https://discourse.gohugo.io/">Hugo Forum</a></li>
<li><a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod GitHub Repository</a></li>
<li><a href="https://www.markdownguide.org/">Markdown Guide</a></li>
<li><a href="https://youtu.be/hjD9jTi_DQ4">Learn Hugo in Under 2 Hours</a></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>This crash course has provided you with the essential knowledge to get started with Hugo and the PaperMod theme. As you become more comfortable, explore Hugo&rsquo;s documentation and the PaperMod wiki for advanced features and customisation options.</p>
<p>Hugo&rsquo;s strength lies in its flexibility and speed, while PaperMod offers a clean, modern design with excellent performance. Together, they provide an excellent foundation for your website.</p>
<p>Happy building!</p>
]]></content:encoded></item><item><title>The Modern Financial Controller: Series Introduction</title><link>https://michaelbrunger.com/modern-financial-controller-series-introduction/</link><pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/modern-financial-controller-series-introduction/</guid><description>Introduction to the evolving role of financial controllers from technical accounting to strategic business partnership</description><content:encoded><![CDATA[<h2 id="the-evolution-of-finance-leadership">The Evolution of Finance Leadership</h2>
<p>When I earned my chartered accountant qualification, I envisioned a career focused primarily on technical accounting principles, financial reporting, and compliance. Fast forward to today, and the role of a finance manager has evolved into something far more dynamic and strategic than I could have anticipated. This transformation mirrors a broader shift in the finance professionâ€”particularly for those in controller and finance manager positions.</p>
<p>The days of the financial controller as a mere &ldquo;bean counter&rdquo; are long behind us. Today&rsquo;s financial controllers are expected to be strategic partners, data analysts, risk managers, technology implementers, and forward-looking advisors. We&rsquo;re tasked not just with reporting what happened financially, but with providing insights that shape what <em>will</em> happen next.</p>
<h2 id="why-this-blog-series">Why This Blog Series?</h2>
<p>This blog series represents my commitment to &ldquo;learning in public&rdquo; as I navigate this evolving landscape. As a finance manager with a strong accounting foundation, I&rsquo;m documenting my journey of growth and discoveryâ€”synthesizing insights from thought leaders in the field, particularly David Parmenter, whose practical approaches to finance leadership have been revolutionary.</p>
<p>Through these posts, I aim to:</p>
<ol>
<li><strong>Distill key concepts</strong> from leading finance thinkers into practical, actionable advice</li>
<li><strong>Share implementation strategies</strong> that work in real-world scenarios</li>
<li><strong>Build a community</strong> of forward-thinking finance professionals</li>
<li><strong>Document my own transformation</strong> from technical accountant to strategic finance partner</li>
</ol>
<h2 id="who-is-david-parmenter">Who is David Parmenter?</h2>
<p>For those unfamiliar with his work, David Parmenter is a globally recognised expert in financial leadership, performance measures, and management reporting. His methodologies have transformed finance departments around the world, particularly through concepts like:</p>
<ul>
<li>Distinguishing between Key Result Indicators (KRIs) and genuine Key Performance Indicators (KPIs)</li>
<li>Implementing &ldquo;winning KPIs&rdquo; that actually drive organisational performance</li>
<li>Creating lean, focused reporting that executives actually use for decision-making</li>
<li>Transitioning from traditional budgeting to rolling forecasts</li>
<li>Developing &ldquo;fast close&rdquo; procedures that dramatically reduce month-end processing time</li>
<li>Building finance teams that function as true business partners</li>
</ul>
<p>Throughout this series, I&rsquo;ll be drawing extensively on Parmenter&rsquo;s frameworks while also incorporating insights from other thought leaders such as Jeremy Hope, Robin Fraser, Robert Kaplan, and Jack Stack.</p>
<h2 id="the-transformation-of-the-financial-controller-role">The Transformation of the Financial Controller Role</h2>
<p>The evolving expectations of financial controllers reflect broader changes in business:</p>
<p><strong>Traditional Controller Focus:</strong></p>
<ul>
<li>Historical reporting</li>
<li>Transaction processing</li>
<li>Compliance and control</li>
<li>Budget variances</li>
<li>Cost accounting</li>
</ul>
<p><strong>Modern Controller Focus:</strong></p>
<ul>
<li>Strategic decision support</li>
<li>Business partnership</li>
<li>Performance optimisation</li>
<li>Predictive analytics</li>
<li>Technology enablement</li>
<li>Creating sustainable value</li>
</ul>
<p>According to a recent survey by McKinsey, companies with strong finance-business partnerships are 20% more likely to achieve breakthrough performance. Yet many finance departments struggle to make this transition effectively.</p>
<h2 id="what-to-expect-in-this-series">What to Expect in This Series</h2>
<p>Over the coming weeks, I&rsquo;ll be exploring:</p>
<ol>
<li><strong>The strategic partner mindset</strong> and how to develop it</li>
<li><strong>Performance measurement systems</strong> that drive meaningful action</li>
<li><strong>Reporting transformation</strong> to deliver insights, not just information</li>
<li><strong>Beyond budgeting methodologies</strong> that increase agility</li>
<li><strong>Process improvements</strong> that free up time for value-added work</li>
<li><strong>Building high-performance finance teams</strong></li>
<li><strong>Leading business transformation</strong> from the finance office</li>
<li><strong>Technology enablement</strong> for modern finance functions</li>
</ol>
<p>Each post will combine theoretical frameworks with practical implementation steps, challenges you might face, and metrics to track your progress.</p>
<h2 id="my-learning-approach">My Learning Approach</h2>
<p>As I mentioned, this series is part of my &ldquo;learn in public&rdquo; journey. I&rsquo;m not presenting myself as the ultimate authorityâ€”rather, I&rsquo;m sharing what I&rsquo;m discovering as I implement these concepts in my own role.</p>
<p>I invite you to join me in this learning journey:</p>
<ul>
<li>Share your experiences in the comments</li>
<li>Suggest additional resources or experts I should explore</li>
<li>Challenge assumptions and offer alternative perspectives</li>
<li>Propose topics for deeper exploration</li>
</ul>
<h2 id="getting-started-self-assessment">Getting Started: Self-Assessment</h2>
<p>Before diving into the specific methodologies in future posts, I encourage you to consider where your finance function currently stands:</p>
<ol>
<li>What percentage of your finance team&rsquo;s time is spent on transaction processing versus business partnering?</li>
<li>Do your financial reports drive action, or do they simply communicate what happened?</li>
<li>How quickly can you close your books at month-end?</li>
<li>Does your budgeting process add value proportionate to the time invested?</li>
<li>Are your finance team members viewed as strategic advisors by operational colleagues?</li>
</ol>
<p>Your answers to these questions will help you identify which upcoming posts in this series might be most valuable for your situation.</p>
<h2 id="coming-up-next">Coming Up Next</h2>
<p>In our next post, we&rsquo;ll explore the specific mindset and skill shifts required to transition &ldquo;From Bean Counter to Business Partner&rdquo;â€”examining how traditional accounting expertise can be leveraged to provide strategic insights that drive business success.</p>
<p>I look forward to embarking on this journey with you as we transform our finance functions into the strategic powerhouses they have the potential to become.</p>
]]></content:encoded></item><item><title>VS Code Mastery</title><link>https://michaelbrunger.com/vscode-mastery/</link><pubDate>Fri, 02 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/vscode-mastery/</guid><description>&lt;h1 id="vs-code-mastery-a-beginners-guide-to-being-productive">VS Code Mastery: A Beginner&amp;rsquo;s Guide to Being Productive&lt;/h1>
&lt;p>So you&amp;rsquo;ve downloaded VS Code and opened it up. Now what? In this guide, I&amp;rsquo;ll walk you through everything I&amp;rsquo;ve learned about making VS Code work for you, especially if you&amp;rsquo;re just getting started.&lt;/p>
&lt;h2 id="why-i-chose-vs-code">Why I Chose VS Code&lt;/h2>
&lt;p>Before getting into the details, let me share why I chose VS Code:&lt;/p>
&lt;ul>
&lt;li>Lightweight enough to open quickly&lt;/li>
&lt;li>Powerful enough for serious development&lt;/li>
&lt;li>Enormous extension ecosystem&lt;/li>
&lt;li>Regular updates with new features&lt;/li>
&lt;li>Works consistently across Windows, Mac, and Linux&lt;/li>
&lt;/ul>
&lt;h2 id="getting-started-the-vs-code-interface">Getting Started: The VS Code Interface&lt;/h2>
&lt;p>When you first open VS Code, here&amp;rsquo;s what you&amp;rsquo;re looking at:&lt;/p></description><content:encoded><![CDATA[<h1 id="vs-code-mastery-a-beginners-guide-to-being-productive">VS Code Mastery: A Beginner&rsquo;s Guide to Being Productive</h1>
<p>So you&rsquo;ve downloaded VS Code and opened it up. Now what?  In this guide, I&rsquo;ll walk you through everything I&rsquo;ve learned about making VS Code work for you, especially if you&rsquo;re just getting started.</p>
<h2 id="why-i-chose-vs-code">Why I Chose VS Code</h2>
<p>Before getting into the details, let me share why I chose VS Code:</p>
<ul>
<li>Lightweight enough to open quickly</li>
<li>Powerful enough for serious development</li>
<li>Enormous extension ecosystem</li>
<li>Regular updates with new features</li>
<li>Works consistently across Windows, Mac, and Linux</li>
</ul>
<h2 id="getting-started-the-vs-code-interface">Getting Started: The VS Code Interface</h2>
<p>When you first open VS Code, here&rsquo;s what you&rsquo;re looking at:</p>
<ul>
<li><strong>Activity Bar</strong>: The vertical bar on the far left with icons for different views</li>
<li><strong>Side Bar</strong>: Shows different panels like Explorer, Search, and Extensions</li>
<li><strong>Editor Area</strong>: Where you edit your files (can be split!)</li>
<li><strong>Status Bar</strong>: At the bottom, showing helpful information</li>
<li><strong>Panel</strong>: Terminal, problems, output (toggle with <code>Ctrl+J</code> or <code>Cmd+J</code> on Mac)</li>
</ul>
<p>![VS Code Interface Areas]</p>
<p>Don&rsquo;t worry if it feels like a lotâ€”we&rsquo;ll break it down piece by piece.</p>
<h2 id="essential-keyboard-shortcuts-i-use-daily">Essential Keyboard Shortcuts I Use Daily</h2>
<p>Learning keyboard shortcuts dramatically improved my productivity. Here are the ones I use constantly:</p>
<table>
  <thead>
      <tr>
          <th>Shortcut (Windows/Linux)</th>
          <th>Shortcut (Mac)</th>
          <th>Action</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>Ctrl+P</code></td>
          <td><code>Cmd+P</code></td>
          <td>Quick Open file</td>
      </tr>
      <tr>
          <td><code>Ctrl+Shift+P</code></td>
          <td><code>Cmd+Shift+P</code></td>
          <td>Command Palette</td>
      </tr>
      <tr>
          <td><code>Ctrl+,</code></td>
          <td><code>Cmd+,</code></td>
          <td>User Settings</td>
      </tr>
      <tr>
          <td><code>Ctrl+B</code></td>
          <td><code>Cmd+B</code></td>
          <td>Toggle sidebar</td>
      </tr>
      <tr>
          <td><code>Ctrl+J</code></td>
          <td><code>Cmd+J</code></td>
          <td>Toggle panel (terminal)</td>
      </tr>
      <tr>
          <td><code>Ctrl+\</code></td>
          <td><code>Cmd+\</code></td>
          <td>Split editor</td>
      </tr>
      <tr>
          <td><code>Ctrl+Tab</code></td>
          <td><code>Cmd+Tab</code></td>
          <td>Switch between open files</td>
      </tr>
      <tr>
          <td><code>Alt+Up/Down</code></td>
          <td><code>Option+Up/Down</code></td>
          <td>Move line up/down</td>
      </tr>
      <tr>
          <td><code>Ctrl+D</code></td>
          <td><code>Cmd+D</code></td>
          <td>Add selection to next find match</td>
      </tr>
      <tr>
          <td><code>Ctrl+Space</code></td>
          <td><code>Cmd+Space</code></td>
          <td>Trigger suggestion</td>
      </tr>
      <tr>
          <td><code>F12</code></td>
          <td><code>F12</code></td>
          <td>Go to definition</td>
      </tr>
      <tr>
          <td><code>Alt+F12</code></td>
          <td><code>Option+F12</code></td>
          <td>Peek definition</td>
      </tr>
      <tr>
          <td><code>Ctrl+Shift+F</code></td>
          <td><code>Cmd+Shift+F</code></td>
          <td>Search across files</td>
      </tr>
      <tr>
          <td><code>Ctrl+~</code></td>
          <td><code>Cmd+~</code></td>
          <td>Open integrated terminal</td>
      </tr>
  </tbody>
</table>
<p>I found that learning just 3-4 shortcuts a week was manageable and made a huge difference over time.</p>
<h2 id="the-command-palette-your-best-friend">The Command Palette: Your Best Friend</h2>
<p>If I could highlight just one feature, it would be the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code> on Mac). It gives you access to virtually every command in VS Code.</p>
<p>Try this right now:</p>
<ol>
<li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac)</li>
<li>Type &ldquo;theme&rdquo;</li>
<li>Select &ldquo;Color Theme&rdquo;</li>
<li>Browse through available themes</li>
</ol>
<p>I use the Command Palette to:</p>
<ul>
<li>Run specific commands</li>
<li>Change settings</li>
<li>Open user/workspace settings</li>
<li>Toggle features on/off</li>
<li>Format documents</li>
<li>And so much more!</li>
</ul>
<p>Pro tip: Commands prefixed with <code>&gt;</code> are VS Code commands, while others are for navigating files or settings.</p>
<h2 id="file-navigation-that-saved-me-hours">File Navigation That Saved Me Hours</h2>
<p>Finding files quickly is essential for productivity. Here&rsquo;s how I navigate efficiently:</p>
<h3 id="quick-open-ctrlp--cmdp">Quick Open (<code>Ctrl+P</code> / <code>Cmd+P</code>)</h3>
<p>Just start typing the filenameâ€”it uses fuzzy matching so you don&rsquo;t need the exact name.</p>
<h3 id="navigating-inside-files">Navigating Inside Files</h3>
<ul>
<li><code>Ctrl+G</code> (<code>Cmd+G</code> on Mac): Go to specific line number</li>
<li><code>Ctrl+Shift+O</code> (<code>Cmd+Shift+O</code>): Navigate to symbols in the current file</li>
<li><code>F12</code>: Jump to definition</li>
<li><code>Alt+F12</code>: Peek definition (shows definition in a popup)</li>
<li><code>Ctrl+Shift+\</code>: Jump to matching bracket</li>
</ul>
<h3 id="go-backforward">Go Back/Forward</h3>
<ul>
<li><code>Alt+Left/Right</code> (<code>Ctrl+- / Ctrl+Shift+-</code> on Mac): Navigate back and forth through your position history</li>
</ul>
<h2 id="supercharging-your-editing">Supercharging Your Editing</h2>
<p>These editing features have transformed how I write code:</p>
<h3 id="multi-cursor-editing">Multi-Cursor Editing</h3>
<p>This was a game-changer for me:</p>
<ul>
<li><code>Alt+Click</code> (<code>Option+Click</code> on Mac): Add cursor at mouse position</li>
<li><code>Ctrl+Alt+Up/Down</code> (<code>Cmd+Option+Up/Down</code>): Add cursor above/below</li>
<li><code>Ctrl+D</code> (<code>Cmd+D</code>): Select next occurrence of current selection</li>
<li><code>Ctrl+Shift+L</code> (<code>Cmd+Shift+L</code>): Select all occurrences of current selection</li>
</ul>
<h3 id="text-manipulation">Text Manipulation</h3>
<ul>
<li><code>Alt+Up/Down</code> (<code>Option+Up/Down</code>): Move current line up/down</li>
<li><code>Shift+Alt+Up/Down</code> (<code>Shift+Option+Up/Down</code>): Copy line up/down</li>
<li><code>Ctrl+Shift+K</code> (<code>Cmd+Shift+K</code>): Delete line</li>
<li><code>Ctrl+/</code> (<code>Cmd+/</code>): Toggle line comment</li>
<li><code>Shift+Alt+A</code> (<code>Shift+Option+A</code>): Toggle block comment</li>
<li><code>Ctrl+Space</code> (<code>Cmd+Space</code>): Trigger suggestions</li>
</ul>
<p>I use multi-cursor editing for bulk edits that would otherwise take forever.</p>
<h2 id="vs-code-extensions-that-changed-my-workflow">VS Code Extensions That Changed My Workflow</h2>
<p>Extensions are what make VS Code truly shine. Here are the ones I can&rsquo;t live without:</p>
<h3 id="productivity-boosters">Productivity Boosters</h3>
<ul>
<li><strong>Prettier</strong>: Automatic code formatting</li>
<li><strong>ESLint</strong>: JavaScript linting</li>
<li><strong>GitLens</strong>: Enhanced Git capabilities</li>
<li><strong>Error Lens</strong>: Inline error display</li>
<li><strong>Auto Rename Tag</strong>: Automatically rename paired HTML/XML tags</li>
<li><strong>Path Intellisense</strong>: Autocompletes filenames</li>
</ul>
<h3 id="theme-and-appearance">Theme and Appearance</h3>
<ul>
<li><strong>Material Icon Theme</strong>: Better file icons</li>
<li><strong>One Dark Pro</strong>: My preferred theme</li>
<li><strong>Bracket Pair Colorizer 2</strong>: Color-codes matching brackets</li>
</ul>
<h3 id="language-specific-extensions">Language-Specific Extensions</h3>
<ul>
<li><strong>Python</strong>: Enhanced Python development</li>
<li><strong>Jupyter</strong>: Jupyter notebook support</li>
<li><strong>C/C++</strong>: For C language support</li>
<li><strong>markdownlint</strong>: Linting for markdown files</li>
</ul>
<p>Installing extensions is easy:</p>
<ol>
<li>Click the Extensions icon in the Activity Bar (or <code>Ctrl+Shift+X</code>)</li>
<li>Search for the extension</li>
<li>Click Install</li>
</ol>
<p>I recommend reviewing your extensions periodically and removing ones you don&rsquo;t use to keep VS Code running smoothly.</p>
<h2 id="integrated-terminal-no-more-window-switching">Integrated Terminal: No More Window Switching</h2>
<p>The integrated terminal (<code>Ctrl+`` or </code>Cmd+`` on Mac) has saved me from constantly switching between windows:</p>
<ul>
<li>Create multiple terminals by clicking the <code>+</code> button</li>
<li>Split terminal views with the split button</li>
<li>Switch between terminals with the dropdown</li>
<li>Rename terminals for better organisation</li>
</ul>
<p>You can configure your default shell in settings:</p>
<ol>
<li>Open Command Palette (<code>Ctrl+Shift+P</code>)</li>
<li>Type &ldquo;settings&rdquo;</li>
<li>Select &ldquo;Preferences: Open Settings (JSON)&rdquo;</li>
<li>Add your preferred terminal settings:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;terminal.integrated.defaultProfile.windows&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;PowerShell&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;terminal.integrated.defaultProfile.linux&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;terminal.integrated.defaultProfile.osx&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;zsh&#34;</span>
</span></span></code></pre></div><h2 id="debugging-made-simple">Debugging Made Simple</h2>
<p>VS Code&rsquo;s debugging capabilities eliminate the need for <code>print</code> statements everywhere:</p>
<ol>
<li>Click the Run and Debug icon in the Activity Bar</li>
<li>Click &ldquo;create a launch.json file&rdquo;</li>
<li>Select your environment</li>
</ol>
<p>Key debugging actions:</p>
<ul>
<li><code>F5</code>: Start/Continue</li>
<li><code>F9</code>: Toggle breakpoint</li>
<li><code>F10</code>: Step over</li>
<li><code>F11</code>: Step into</li>
<li><code>Shift+F11</code>: Step out</li>
<li><code>Ctrl+F5</code>: Run without debugging</li>
</ul>
<p>The debug console lets you evaluate expressions and inspect variables in real-time, which was a revelation for me coming from print-based debugging.</p>
<h2 id="customising-vs-code-to-your-preferences">Customising VS Code to Your Preferences</h2>
<p>VS Code&rsquo;s customisation options are nearly endless. Here&rsquo;s how I personalised mine:</p>
<h3 id="settingsjson">Settings.json</h3>
<p>My essential customisations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.fontSize&#34;</span>: <span style="color:#ae81ff">14</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.fontFamily&#34;</span>: <span style="color:#e6db74">&#34;&#39;Fira Code&#39;, Consolas, &#39;Courier New&#39;, monospace&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.fontLigatures&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.formatOnSave&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.defaultFormatter&#34;</span>: <span style="color:#e6db74">&#34;esbenp.prettier-vscode&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.minimap.enabled&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.rulers&#34;</span>: [<span style="color:#ae81ff">80</span>, <span style="color:#ae81ff">120</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.wordWrap&#34;</span>: <span style="color:#e6db74">&#34;on&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;workbench.colorTheme&#34;</span>: <span style="color:#e6db74">&#34;One Dark Pro&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;workbench.iconTheme&#34;</span>: <span style="color:#e6db74">&#34;material-icon-theme&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;terminal.integrated.fontSize&#34;</span>: <span style="color:#ae81ff">14</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;files.autoSave&#34;</span>: <span style="color:#e6db74">&#34;onFocusChange&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;explorer.confirmDelete&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;editor.bracketPairColorization.enabled&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can access settings via:</p>
<ul>
<li><code>Ctrl+,</code> (<code>Cmd+,</code> on Mac) for the Settings UI</li>
<li>Command Palette &gt; &ldquo;Preferences: Open Settings (JSON)&rdquo; for JSON editing</li>
</ul>
<h3 id="workspace-settings">Workspace Settings</h3>
<p>For project-specific settings, create a <code>.vscode</code> folder in your project with:</p>
<ul>
<li><code>settings.json</code>: Project-specific settings</li>
<li><code>launch.json</code>: Debugging configurations</li>
<li><code>tasks.json</code>: Task configurations</li>
<li><code>extensions.json</code>: Recommended extensions</li>
</ul>
<p>This allows you to have different settings for different projects.</p>
<h2 id="working-with-git-integration">Working with Git Integration</h2>
<p>VS Code&rsquo;s built-in Git support eliminates the need for separate Git clients:</p>
<ul>
<li>The Source Control panel shows changes clearly</li>
<li>Inline change markers show what&rsquo;s changed in each file</li>
<li>Commit, push, pull, and branch directly from VS Code</li>
<li>Resolve merge conflicts with a visual interface</li>
</ul>
<p>To get started with Git:</p>
<ol>
<li>Open a folder that&rsquo;s a Git repository</li>
<li>Make some changes</li>
<li>Click the Source Control icon in the Activity Bar</li>
<li>Stage changes by clicking the <code>+</code> icon</li>
<li>Enter a commit message and press <code>Ctrl+Enter</code> to commit</li>
</ol>
<p>Adding GitLens extends these capabilities even further with blame annotations, history browsing, and more.</p>
<h2 id="snippets-stop-typing-the-same-code-over-and-over">Snippets: Stop Typing the Same Code Over and Over</h2>
<p>Custom snippets have saved me countless hours of typing repetitive code:</p>
<ol>
<li>Open Command Palette &gt; &ldquo;Snippets: Configure User Snippets&rdquo;</li>
<li>Select a language or create a global snippet file</li>
<li>Add your snippets:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;Print to console&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;prefix&#34;</span>: <span style="color:#e6db74">&#34;log&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;body&#34;</span>: [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;console.log(&#39;$1&#39;);&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;$2&#34;</span>
</span></span><span style="display:flex;"><span>  ],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Log output to console&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now typing &ldquo;log&rdquo; and pressing Tab will insert <code>console.log('');</code> with the cursor positioned between the quotes.</p>
<p>I&rsquo;ve created snippets for common patterns in each language I use.</p>
<h2 id="remote-development-life-changing-feature">Remote Development: Life-Changing Feature</h2>
<p>Working on remote machines and containers transformed my development workflow:</p>
<ol>
<li>Install the &ldquo;Remote Development&rdquo; extension pack</li>
<li>Click the remote indicator in the bottom-left corner</li>
<li>Select your remote connection type:
<ul>
<li>SSH: Connect to remote servers</li>
<li>WSL: Work in Windows Subsystem for Linux</li>
<li>Containers: Work inside Docker containers</li>
</ul>
</li>
</ol>
<p>This lets you use VS Code&rsquo;s full power while code executes in a different environmentâ€”perfect for consistent development environments or working with remote servers.</p>
<h2 id="workspace-organisation-for-large-projects">Workspace Organisation for Large Projects</h2>
<p>For complex projects, I use these organisation features:</p>
<ul>
<li><strong>Multi-root workspaces</strong>: Add multiple folders to a single workspace</li>
<li><strong>File explorer groups</strong>: Organise folders logically</li>
<li><strong>Workspace settings</strong>: Override settings for specific projects</li>
</ul>
<p>To create a multi-root workspace:</p>
<ol>
<li>Open a folder</li>
<li>Go to File &gt; &ldquo;Add Folder to Workspace&rdquo;</li>
<li>Save the workspace file (File &gt; &ldquo;Save Workspace As&hellip;&rdquo;)</li>
</ol>
<p>This approach is perfect for microservice architectures or when working with frontend and backend code simultaneously.</p>
<h2 id="lesser-known-features">Lesser-Known Features</h2>
<p>Some features I discovered after using VS Code for a while:</p>
<ul>
<li><strong>Zen Mode</strong>: <code>Ctrl+K Z</code> (<code>Cmd+K Z</code> on Mac) for distraction-free coding</li>
<li><strong>Breadcrumbs</strong>: Navigate file structure at the top of editors</li>
<li><strong>Linked Editing</strong>: Edit HTML opening and closing tags simultaneously</li>
<li><strong>Emmet</strong>: Built-in HTML/CSS abbreviations (try typing <code>div&gt;ul&gt;li*5</code> and pressing Tab)</li>
<li><strong>IntelliSense</strong>: Smart autocomplete that learns from your codebase</li>
<li><strong>Code Folding</strong>: Collapse sections with the arrows in the gutter</li>
<li><strong>Split Editor</strong>: <code>Ctrl+\</code> to edit files side by side</li>
</ul>
<h2 id="synchronising-settings-across-machines">Synchronising Settings Across Machines</h2>
<p>VS Code Settings Sync keeps my environment consistent across computers:</p>
<ol>
<li>Click the account icon in the bottom of the Activity Bar</li>
<li>Turn on Settings Sync</li>
<li>Select what to sync (settings, extensions, keybindings, etc.)</li>
</ol>
<p>Now your customisations follow you to any machine with VS Code installed.</p>
<h2 id="problems-ive-encountered-and-how-i-fixed-them">Problems I&rsquo;ve Encountered (and How I Fixed Them)</h2>
<h3 id="high-memory-usage">High Memory Usage</h3>
<ul>
<li>Disable unused extensions</li>
<li>Set <code>&quot;files.exclude&quot;</code> for large folders you don&rsquo;t need indexed</li>
<li>Use <code>&quot;search.exclude&quot;</code> to skip folders during searches</li>
</ul>
<h3 id="slow-performance">Slow Performance</h3>
<ul>
<li>Update VS Code to the latest version</li>
<li>Try disabling extensions one by one to find the culprit</li>
<li>Check for large files that might be slowing things down</li>
</ul>
<h3 id="language-server-issues">Language Server Issues</h3>
<ul>
<li>Reinstall the language extension</li>
<li>Check output panel for error messages</li>
<li>Configure language server settings explicitly</li>
</ul>
<h2 id="my-weekly-vs-code-learning-habit">My Weekly VS Code Learning Habit</h2>
<p>I made the most progress with VS Code by adopting a simple habit: learn one new feature per week.</p>
<p>On a weekly basis:</p>
<ol>
<li>Open the Command Palette</li>
<li>Type &ldquo;help&rdquo; and select &ldquo;Interactive Playground&rdquo;</li>
<li>Try one new feature or shortcut</li>
<li>Practice it throughout the week</li>
</ol>
<p>This incremental approach helped me build confidence without feeling overwhelmed.</p>
<h2 id="conclusion-vs-code-changed-how-i-code">Conclusion: VS Code Changed How I Code</h2>
<p>When I first started using VS Code, I was just using it as a basic text editor. Now, it&rsquo;s become an extension of my thinking process when coding. The features I&rsquo;ve covered in this post have genuinely made me more productive and helped me write better code.</p>
<p>Don&rsquo;t feel like you need to learn everything at once! Start with the Command Palette and a few shortcuts, then gradually expand your knowledge. Before long, you&rsquo;ll be navigating and editing code with an efficiency.</p>
<h2 id="resources-for-going-further">Resources for Going Further</h2>
<ul>
<li><a href="https://code.visualstudio.com/docs">Official VS Code Documentation</a></li>
<li><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks">VS Code Tips and Tricks</a></li>
<li><a href="https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-shortcuts-reference">Keyboard Shortcut Reference</a></li>
</ul>
<p>Happy coding!</p>
]]></content:encoded></item><item><title>Part 2: Text Editors vs. IDEs for Python Development</title><link>https://michaelbrunger.com/python-foundations-editors-ides/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-foundations-editors-ides/</guid><description>Compare lightweight text editors to full-featured IDEs for Python development. Learn how to set up VS Code with essential Python extensions and discover effective debugging techniques.</description><content:encoded><![CDATA[<h1 id="post-2-text-editors-vs-ides-for-python-development">Post 2: Text Editors vs. IDEs for Python Development</h1>
<p>Welcome to the second post in my Python learning series. Last time, we got Python installed and ran our first code. Now it&rsquo;s time to set up a proper coding environment. Working directly with <code>.py</code> files in Notepad gets tedious quickly, so let&rsquo;s explore better options for writing Python code.</p>
<p>In this post, we&rsquo;ll cover:</p>
<ol>
<li>The difference between text editors and IDEs</li>
<li>Popular options for Python development</li>
<li>Setting up VS Code for Python (my personal choice)</li>
<li>Key productivity features that will save you time</li>
<li>Running and debugging Python code from your editor</li>
</ol>
<hr>
<h2 id="1-text-editors-vs-ides-whats-the-difference">1. Text Editors vs. IDEs: What&rsquo;s the Difference?</h2>
<p>When I started learning Python, I was confused about whether to use a &ldquo;text editor&rdquo; or an &ldquo;IDE&rdquo;. Here&rsquo;s the simple breakdown:</p>
<p><strong>Text Editors</strong>:</p>
<ul>
<li>Lightweight applications primarily designed for editing text</li>
<li>Minimal features out of the box, but often extensible with plugins</li>
<li>Faster startup times and lower system resource usage</li>
<li>Examples: Notepad++, Sublime Text, Atom</li>
</ul>
<p><strong>Integrated Development Environments (IDEs)</strong>:</p>
<ul>
<li>Comprehensive software packages with built-in tools for development</li>
<li>Include code completion, debugging, testing, and version control features</li>
<li>More resource-intensive but offer productivity benefits</li>
<li>Examples: PyCharm, Visual Studio, Eclipse</li>
</ul>
<p>Modern text editors with plugins can blur the line between these categories. For instance, VS Code is technically a text editor but can function like an IDE with the right extensions.</p>
<hr>
<h2 id="2-popular-options-for-python-development">2. Popular Options for Python Development</h2>
<p>Here are some commonly used tools for Python programming:</p>
<h3 id="text-editors">Text Editors</h3>
<p><strong>Notepad++</strong> (Windows only)</p>
<ul>
<li>Free and lightweight</li>
<li>Basic syntax highlighting for Python</li>
<li>Minimal Python-specific features</li>
<li>Good for quick edits but limited for larger projects</li>
</ul>
<p><strong>Sublime Text</strong></p>
<ul>
<li>Cross-platform (Windows, macOS, Linux)</li>
<li>Fast and responsive with large files</li>
<li>Package manager for extensions</li>
<li>Free to evaluate, $99 license for continued use</li>
</ul>
<p><strong>Atom</strong></p>
<ul>
<li>Open-source and free</li>
<li>Highly customisable</li>
<li>Good Git integration</li>
<li>Can be slower with large projects</li>
</ul>
<h3 id="ides">IDEs</h3>
<p><strong>Visual Studio Code (VS Code)</strong></p>
<ul>
<li>Free, open-source, cross-platform</li>
<li>Extensive extension library</li>
<li>Lightweight but powerful</li>
<li>Strong Python support through extensions</li>
<li>My personal choice and what we&rsquo;ll focus on in this post</li>
</ul>
<p><strong>PyCharm</strong></p>
<ul>
<li>Python-specific IDE by JetBrains</li>
<li>Community (free) and Professional (paid) editions</li>
<li>Comprehensive tools designed specifically for Python</li>
<li>Steeper learning curve but powerful features</li>
</ul>
<p><strong>Jupyter Notebooks</strong></p>
<ul>
<li>Interactive coding environment</li>
<li>Great for data analysis and visualisation</li>
<li>Documents that combine code, output, and markdown text</li>
<li>We&rsquo;ll cover this in detail in a later post</li>
</ul>
<p>After trying several options, I settled on VS Code for its balance of performance and features. It&rsquo;s lightweight enough to run smoothly on my machine but offers robust Python support.</p>
<hr>
<h2 id="3-setting-up-vs-code-for-python-development">3. Setting Up VS Code for Python Development</h2>
<p>If you&rsquo;re following along with me, let&rsquo;s set up VS Code:</p>
<h3 id="31-download-and-install-vs-code">3.1 Download and Install VS Code</h3>
<ol>
<li>Go to <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>Download the installer for your operating system</li>
<li>Run the installer with default options</li>
</ol>
<h3 id="32-install-essential-python-extensions">3.2 Install Essential Python Extensions</h3>
<ol>
<li>Launch VS Code</li>
<li>Click the Extensions icon in the left sidebar (or press Ctrl+Shift+X)</li>
<li>Search for and install these extensions:
<ul>
<li><strong>Python</strong> by Microsoft (essential)</li>
<li><strong>Pylance</strong> for improved language support</li>
<li><strong>Python Indent</strong> for automatic indentation</li>
</ul>
</li>
</ol>
<h3 id="33-configure-python-interpreter">3.3 Configure Python Interpreter</h3>
<ol>
<li>Open a Python file or create a new one (File &gt; New File, then save with <code>.py</code> extension)</li>
<li>Click on &ldquo;Select Python Interpreter&rdquo; in the bottom status bar</li>
<li>Choose the Python installation you installed in Post 1</li>
</ol>
<h3 id="34-set-up-code-formatting-and-linting">3.4 Set Up Code Formatting and Linting</h3>
<p>These tools help maintain code quality and consistent style:</p>
<ol>
<li>
<p>Install the <strong>autopep8</strong> formatter:</p>
<ul>
<li>Open a terminal in VS Code (Terminal &gt; New Terminal)</li>
<li>Run: <code>pip install autopep8</code></li>
</ul>
</li>
<li>
<p>Configure formatter settings:</p>
<ul>
<li>Press Ctrl+Shift+P to open the command palette</li>
<li>Type &ldquo;Preferences: Open Settings (JSON)&rdquo;</li>
<li>Add these settings:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.formatting.provider&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;autopep8&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;editor.formatOnSave&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.linting.enabled&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;python.linting.pylintEnabled&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div></li>
<li>
<p>Install Pylint for code quality checking:</p>
<ul>
<li>In the terminal, run: <code>pip install pylint</code></li>
</ul>
</li>
</ol>
<hr>
<h2 id="4-key-productivity-features">4. Key Productivity Features</h2>
<p>Here are some features that have saved me hours of time while learning Python:</p>
<h3 id="41-code-highlighting-and-intellisense">4.1 Code Highlighting and IntelliSense</h3>
<p>VS Code automatically highlights Python syntax and provides IntelliSense (code completion):</p>
<ul>
<li>Start typing a Python keyword or function name</li>
<li>VS Code shows suggestions as you type</li>
<li>Press Tab to complete the suggestion</li>
</ul>
<p>Try it by typing <code>pri</code> and watching it suggest <code>print()</code>.</p>
<h3 id="42-code-snippets">4.2 Code Snippets</h3>
<p>Snippets let you insert commonly used code patterns quickly:</p>
<ol>
<li>Type <code>if</code> and press Tab</li>
<li>VS Code inserts the <code>if</code> statement structure</li>
<li>Fill in the condition and press Tab to move to the body</li>
</ol>
<p>Other useful snippets: <code>for</code>, <code>def</code>, <code>class</code>, <code>try</code></p>
<h3 id="43-file-explorer-and-multiple-files">4.3 File Explorer and Multiple Files</h3>
<p>Having a file explorer helps manage projects with multiple files:</p>
<ol>
<li>Use File &gt; Open Folder to open your project directory</li>
<li>The left sidebar shows all files in that folder</li>
<li>Create new files or folders directly in VS Code</li>
</ol>
<h3 id="44-integrated-terminal">4.4 Integrated Terminal</h3>
<p>No need to switch between VS Code and Command Prompt:</p>
<ol>
<li>Press Ctrl+` (backtick) or use Terminal &gt; New Terminal</li>
<li>Run Python code, install packages, or use Git commands</li>
</ol>
<hr>
<h2 id="5-running-and-debugging-python-code">5. Running and Debugging Python Code</h2>
<h3 id="51-running-python-files">5.1 Running Python Files</h3>
<p>Method 1: Using the Play Button</p>
<ol>
<li>Open a Python file</li>
<li>Click the Play icon in the top-right corner</li>
</ol>
<p>Method 2: Using the Terminal</p>
<ol>
<li>Open the integrated terminal (Ctrl+`)</li>
<li>Run: <code>python your_file.py</code></li>
</ol>
<h3 id="52-introduction-to-debugging">5.2 Introduction to Debugging</h3>
<p>Debugging helps you find and fix errors in your code:</p>
<ol>
<li>Set a breakpoint by clicking in the margin to the left of a line number (a red dot appears)</li>
<li>Press F5 or click the Debug icon in the sidebar, then &ldquo;Start Debugging&rdquo;</li>
<li>Your code runs until it hits the breakpoint, then pauses</li>
<li>Examine variables in the &ldquo;Variables&rdquo; panel</li>
<li>Use the debug toolbar to step through code line by line</li>
</ol>
<h3 id="53-print-driven-debugging-vs-using-a-debugger">5.3 Print-Driven Debugging vs. Using a Debugger</h3>
<p>When I first started coding, I relied heavily on <code>print()</code> statements to understand what was happening in my code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_total</span>(items):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Items received: </span><span style="color:#e6db74">{</span>items<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Debug print</span>
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">=</span> sum(items)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Calculated total: </span><span style="color:#e6db74">{</span>total<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># Debug print</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> total
</span></span></code></pre></div><p>While this works, using the debugger is more powerful:</p>
<ul>
<li>You can inspect all variables without modifying code</li>
<li>You can pause execution and examine the program state</li>
<li>You don&rsquo;t need to remove debug code when you&rsquo;re done</li>
</ul>
<hr>
<h2 id="practice-exercise">Practice Exercise</h2>
<p>Let&rsquo;s put your new environment to use:</p>
<ol>
<li>Create a new file called <code>calculator.py</code> in VS Code</li>
<li>Write a simple function that takes two numbers and an operation (add, subtract, multiply, divide) and returns the result</li>
<li>Add proper error handling (e.g., division by zero)</li>
<li>Use print statements to test your function with various inputs</li>
</ol>
<p><strong>Example solution</strong> (try it yourself first!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate</span>(a, b, operation):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;add&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;subtract&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">-</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;multiply&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">*</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> operation <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;divide&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Division by zero&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> a <span style="color:#f92672">/</span> b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Unknown operation&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Test the function</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;add&#34;</span>))       <span style="color:#75715e"># Should print 15</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;subtract&#34;</span>))  <span style="color:#75715e"># Should print 5</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;multiply&#34;</span>))  <span style="color:#75715e"># Should print 50</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#34;divide&#34;</span>))    <span style="color:#75715e"># Should print 2.0</span>
</span></span><span style="display:flex;"><span>print(calculate(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;divide&#34;</span>))    <span style="color:#75715e"># Should print error message</span>
</span></span></code></pre></div><p>Try using the debugger to step through this code and watch how the variables change.</p>
<hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that we have our Python development environment set up, we&rsquo;re ready to dive deeper into Python syntax and language features. In the next post, we&rsquo;ll explore variables, data types, control flow, and more fundamental Python concepts.</p>
<p>Stay tuned for Post 3: Python Syntax Fundamentals &amp; Language Features!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.</em></p>
]]></content:encoded></item><item><title>Powershell Essentials</title><link>https://michaelbrunger.com/powershell-essentials/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/powershell-essentials/</guid><description>&lt;h1 id="powershell-essentials-a-comprehensive-guide">PowerShell Essentials: A Comprehensive Guide&lt;/h1>
&lt;h2 id="introduction-to-command-line-interfaces">Introduction to Command Line Interfaces&lt;/h2>
&lt;p>Before diving into PowerShell specifically, it&amp;rsquo;s important to understand what command-line interfaces are and why they remain essential tools for modern computing.&lt;/p>
&lt;h3 id="what-is-command-prompt">What is Command Prompt?&lt;/h3>
&lt;p>Command Prompt (cmd.exe) is the traditional command-line interpreter for Windows operating systems. Dating back to MS-DOS, it allows users to interact with their computer by typing text commands rather than using a graphical user interface (GUI). While functional, Command Prompt has significant limitations:&lt;/p></description><content:encoded><![CDATA[<h1 id="powershell-essentials-a-comprehensive-guide">PowerShell Essentials: A Comprehensive Guide</h1>
<h2 id="introduction-to-command-line-interfaces">Introduction to Command Line Interfaces</h2>
<p>Before diving into PowerShell specifically, it&rsquo;s important to understand what command-line interfaces are and why they remain essential tools for modern computing.</p>
<h3 id="what-is-command-prompt">What is Command Prompt?</h3>
<p>Command Prompt (cmd.exe) is the traditional command-line interpreter for Windows operating systems. Dating back to MS-DOS, it allows users to interact with their computer by typing text commands rather than using a graphical user interface (GUI). While functional, Command Prompt has significant limitations:</p>
<ul>
<li>Limited scripting capabilities</li>
<li>Inconsistent command syntax</li>
<li>Text-only output format</li>
<li>Limited access to Windows system components</li>
</ul>
<h3 id="why-use-a-terminal">Why Use a Terminal?</h3>
<p>You might wonder why, in an age of sophisticated graphical interfaces, command-line terminals remain relevant. Here&rsquo;s why terminals continue to be indispensable tools:</p>
<ol>
<li><strong>Efficiency</strong>: Experienced users can execute complex operations faster than using GUI equivalents</li>
<li><strong>Automation</strong>: Commands can be scripted to automate repetitive tasks</li>
<li><strong>Remote administration</strong>: Servers and remote systems are often managed via command line</li>
<li><strong>Resource efficiency</strong>: Terminal operations typically use fewer system resources</li>
<li><strong>Precision</strong>: Commands provide explicit control over system operations</li>
<li><strong>Reproducibility</strong>: Command sequences can be saved, shared, and executed consistently</li>
</ol>
<h2 id="enter-powershell-the-modern-command-line">Enter PowerShell: The Modern Command Line</h2>
<p>PowerShell represents Microsoft&rsquo;s evolution of the command-line interface, designed to address the limitations of Command Prompt while providing a powerful environment for both casual users and system administrators.</p>
<h3 id="why-powershell-is-superior-to-command-prompt">Why PowerShell is Superior to Command Prompt</h3>
<p>PowerShell offers a number of advantages over traditional Command Prompt:</p>
<ul>
<li><strong>Object-based pipeline</strong>: Commands pass entire objects rather than just text</li>
<li><strong>Consistent syntax</strong>: Commands follow a Verb-Noun pattern for intuitive learning</li>
<li><strong>Extensive .NET integration</strong>: Direct access to .NET framework capabilities</li>
<li><strong>Rich scripting language</strong>: Includes variables, functions, loops, conditions, and error handling</li>
<li><strong>Robust module system</strong>: Functionality can be extended through modules</li>
<li><strong>Remote management</strong>: Built-in remoting capabilities for managing distant systems</li>
<li><strong>Backward compatibility</strong>: Can still run most traditional cmd commands</li>
</ul>
<p>PowerShell has become Microsoft&rsquo;s preferred command-line shell and scripting language, making it an essential skill for Windows administration and automation.</p>
<h2 id="getting-started-with-powershell">Getting Started with PowerShell</h2>
<h3 id="opening-powershell">Opening PowerShell</h3>
<p>You can access PowerShell in several ways:</p>
<ul>
<li>Search for &ldquo;PowerShell&rdquo; in the Windows start menu</li>
<li>Right-click the Start button and select &ldquo;Windows PowerShell&rdquo;</li>
<li>Press Win+X and select &ldquo;Windows PowerShell&rdquo;</li>
<li>For the latest version, install &ldquo;PowerShell 7&rdquo; from the Microsoft Store or GitHub</li>
</ul>
<h3 id="understanding-the-powershell-interface">Understanding the PowerShell Interface</h3>
<p>When you open PowerShell, you&rsquo;ll see a blue console window with a prompt that looks something like:</p>
<pre tabindex="0"><code>PS C:\Users\YourUsername&gt;
</code></pre><p>The &ldquo;PS&rdquo; prefix indicates you&rsquo;re in PowerShell, followed by your current directory location.</p>
<h2 id="essential-powershell-concepts">Essential PowerShell Concepts</h2>
<h3 id="cmdlets-powershell-commands">Cmdlets: PowerShell Commands</h3>
<p>PowerShell commands are called &ldquo;cmdlets&rdquo; (pronounced &ldquo;command-lets&rdquo;) and follow a consistent Verb-Noun naming convention:</p>
<ul>
<li><code>Get-Process</code>: Lists running processes</li>
<li><code>Stop-Service</code>: Stops a Windows service</li>
<li><code>New-Item</code>: Creates a new file or directory</li>
</ul>
<p>This standardised naming makes discovering and learning commands more intuitive.</p>
<h3 id="pipeline-chaining-commands">Pipeline: Chaining Commands</h3>
<p>One of PowerShell&rsquo;s most powerful features is the pipeline operator <code>|</code>, which passes the output of one command as input to another:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First <span style="color:#ae81ff">5</span>
</span></span></code></pre></div><p>This command gets all processes, sorts them by CPU usage, and displays only the top 5.</p>
<h3 id="variables">Variables</h3>
<p>Variables in PowerShell start with <code>$</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$name = <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>$age = <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>Write-Output <span style="color:#e6db74">&#34;Hello, </span>$name<span style="color:#e6db74">! You are </span>$age<span style="color:#e6db74"> years old.&#34;</span>
</span></span></code></pre></div><h2 id="essential-powershell-commands">Essential PowerShell Commands</h2>
<h3 id="navigation-and-file-system">Navigation and File System</h3>
<h4 id="getting-and-changing-location">Getting and Changing Location</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Display current directory</span>
</span></span><span style="display:flex;"><span>Get-Location
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alias: pwd</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change directory</span>
</span></span><span style="display:flex;"><span>Set-Location C:\Windows
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Aliases: cd, chdir</span>
</span></span></code></pre></div><h4 id="listing-directory-contents">Listing Directory Contents</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># List items in current directory</span>
</span></span><span style="display:flex;"><span>Get-ChildItem
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Aliases: ls, dir</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List with details</span>
</span></span><span style="display:flex;"><span>Get-ChildItem -Force
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Filter by extension</span>
</span></span><span style="display:flex;"><span>Get-ChildItem -Filter *.txt
</span></span></code></pre></div><h4 id="working-with-files-and-directories">Working with Files and Directories</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Create a new directory</span>
</span></span><span style="display:flex;"><span>New-Item -Path <span style="color:#e6db74">&#34;C:\temp\NewFolder&#34;</span> -ItemType Directory
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a new file</span>
</span></span><span style="display:flex;"><span>New-Item -Path <span style="color:#e6db74">&#34;C:\temp\test.txt&#34;</span> -ItemType File
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy a file</span>
</span></span><span style="display:flex;"><span>Copy-Item <span style="color:#e6db74">&#34;C:\temp\test.txt&#34;</span> -Destination <span style="color:#e6db74">&#34;C:\temp\test_backup.txt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Move a file</span>
</span></span><span style="display:flex;"><span>Move-Item <span style="color:#e6db74">&#34;C:\temp\test.txt&#34;</span> -Destination <span style="color:#e6db74">&#34;C:\temp\NewFolder\test.txt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete a file</span>
</span></span><span style="display:flex;"><span>Remove-Item <span style="color:#e6db74">&#34;C:\temp\test_backup.txt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Read file content</span>
</span></span><span style="display:flex;"><span>Get-Content <span style="color:#e6db74">&#34;C:\temp\NewFolder\test.txt&#34;</span>
</span></span></code></pre></div><h4 id="navigating-the-file-system-useful-aliases">Navigating the File System (Useful Aliases)</h4>
<p>Below are a few useful aliases that I use to navigate the file system</p>
<table>
  <thead>
      <tr>
          <th>Command/Alias</th>
          <th>Full Command</th>
          <th>Description</th>
          <th>Example</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>ls</code></td>
          <td><code>Get-ChildItem</code></td>
          <td>Lists files and directories</td>
          <td><code>ls</code> or <code>ls -Force</code> (to show hidden items)</td>
      </tr>
      <tr>
          <td><code>cd</code></td>
          <td><code>Set-Location</code></td>
          <td>Changes directory</td>
          <td><code>cd C:\Users</code> or <code>cd ~</code> (home directory)</td>
      </tr>
      <tr>
          <td><code>pwd</code></td>
          <td><code>Get-Location</code></td>
          <td>Shows current directory path</td>
          <td><code>pwd</code></td>
      </tr>
      <tr>
          <td><code>mkdir</code></td>
          <td><code>New-Item -ItemType Directory</code></td>
          <td>Creates a new directory</td>
          <td><code>mkdir NewFolder</code></td>
      </tr>
      <tr>
          <td><code>pushd</code></td>
          <td><code>Push-Location</code></td>
          <td>Saves current location and moves to new location</td>
          <td><code>pushd C:\Temp</code></td>
      </tr>
      <tr>
          <td><code>popd</code></td>
          <td><code>Pop-Location</code></td>
          <td>Returns to previously saved location</td>
          <td><code>popd</code></td>
      </tr>
      <tr>
          <td><code>cat</code></td>
          <td><code>Get-Content</code></td>
          <td>Displays file contents</td>
          <td><code>cat file.txt</code></td>
      </tr>
      <tr>
          <td><code>touch</code></td>
          <td><code>New-Item</code></td>
          <td>Creates a new file</td>
          <td><code>touch newfile.txt</code></td>
      </tr>
      <tr>
          <td><code>rm</code></td>
          <td><code>Remove-Item</code></td>
          <td>Deletes files or directories</td>
          <td><code>rm file.txt</code> or <code>rm -Recurse folder</code></td>
      </tr>
      <tr>
          <td><code>cp</code></td>
          <td><code>Copy-Item</code></td>
          <td>Copies files</td>
          <td><code>cp file.txt destination</code></td>
      </tr>
      <tr>
          <td><code>mv</code></td>
          <td><code>Move-Item</code></td>
          <td>Moves or renames files</td>
          <td><code>mv file.txt newname.txt</code></td>
      </tr>
  </tbody>
</table>
<h3 id="system-information-and-management">System Information and Management</h3>
<h4 id="process-management">Process Management</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># List all running processes</span>
</span></span><span style="display:flex;"><span>Get-Process
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find specific processes</span>
</span></span><span style="display:flex;"><span>Get-Process -Name <span style="color:#e6db74">&#34;chrome&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Stop a process</span>
</span></span><span style="display:flex;"><span>Stop-Process -Name <span style="color:#e6db74">&#34;notepad&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Or by ID</span>
</span></span><span style="display:flex;"><span>Stop-Process -Id <span style="color:#ae81ff">1234</span>
</span></span></code></pre></div><h4 id="service-management">Service Management</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># List all services</span>
</span></span><span style="display:flex;"><span>Get-Service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get specific service</span>
</span></span><span style="display:flex;"><span>Get-Service -Name <span style="color:#e6db74">&#34;wuauserv&#34;</span>  <span style="color:#75715e"># Windows Update service</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start a service</span>
</span></span><span style="display:flex;"><span>Start-Service -Name <span style="color:#e6db74">&#34;wuauserv&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Stop a service</span>
</span></span><span style="display:flex;"><span>Stop-Service -Name <span style="color:#e6db74">&#34;wuauserv&#34;</span>
</span></span></code></pre></div><h4 id="system-information">System Information</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Basic system info</span>
</span></span><span style="display:flex;"><span>Get-ComputerInfo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Operating system details</span>
</span></span><span style="display:flex;"><span>Get-CimInstance Win32_OperatingSystem
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Hardware information</span>
</span></span><span style="display:flex;"><span>Get-CimInstance Win32_ComputerSystem
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disk information</span>
</span></span><span style="display:flex;"><span>Get-PSDrive
</span></span></code></pre></div><h3 id="networking-commands">Networking Commands</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Test network connection</span>
</span></span><span style="display:flex;"><span>Test-NetConnection google.com
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Ping a host</span>
</span></span><span style="display:flex;"><span>Test-Connection google.com
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get IP configuration</span>
</span></span><span style="display:flex;"><span>Get-NetIPConfiguration
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get DNS client server addresses</span>
</span></span><span style="display:flex;"><span>Get-DnsClientServerAddress
</span></span></code></pre></div><h3 id="user-and-security">User and Security</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Get current user</span>
</span></span><span style="display:flex;"><span>$env:USERNAME
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get all local users</span>
</span></span><span style="display:flex;"><span>Get-LocalUser
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a new local user</span>
</span></span><span style="display:flex;"><span>New-LocalUser -Name <span style="color:#e6db74">&#34;NewUser&#34;</span> -Description <span style="color:#e6db74">&#34;New user account&#34;</span> -NoPassword
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get user groups</span>
</span></span><span style="display:flex;"><span>Get-LocalGroup
</span></span></code></pre></div><h2 id="working-with-powershell-help">Working with PowerShell Help</h2>
<p>PowerShell includes a comprehensive help system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Get help on a cmdlet</span>
</span></span><span style="display:flex;"><span>Get-Help Get-Process
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get detailed help with examples</span>
</span></span><span style="display:flex;"><span>Get-Help Get-Process -Detailed
</span></span><span style="display:flex;"><span>Get-Help Get-Process -Examples
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Update help files</span>
</span></span><span style="display:flex;"><span>Update-Help
</span></span></code></pre></div><h2 id="powershell-scripting-basics">PowerShell Scripting Basics</h2>
<h3 id="script-execution-policy">Script Execution Policy</h3>
<p>By default, PowerShell restricts running scripts. To check your current policy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Get-ExecutionPolicy
</span></span></code></pre></div><p>To change it (requires admin rights):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Set-ExecutionPolicy RemoteSigned
</span></span></code></pre></div><p>Common policies:</p>
<ul>
<li><code>Restricted</code>: No scripts can run</li>
<li><code>RemoteSigned</code>: Local scripts can run; downloaded scripts need signing</li>
<li><code>Unrestricted</code>: All scripts can run (not recommended)</li>
</ul>
<h3 id="creating-a-basic-script">Creating a Basic Script</h3>
<p>PowerShell scripts use the <code>.ps1</code> extension. Create a file named <code>hello.ps1</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># hello.ps1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">param</span>(
</span></span><span style="display:flex;"><span>    [<span style="color:#66d9ef">string</span>]$name = <span style="color:#e6db74">&#34;World&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Write-Output <span style="color:#e6db74">&#34;Hello, </span>$name<span style="color:#e6db74">!&#34;</span>
</span></span></code></pre></div><p>Run it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>.\hello.ps1
</span></span><span style="display:flex;"><span>.\hello.ps1 -name <span style="color:#e6db74">&#34;John&#34;</span>
</span></span></code></pre></div><h3 id="basic-flow-control">Basic Flow Control</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># If statement</span>
</span></span><span style="display:flex;"><span>$age = <span style="color:#ae81ff">18</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ($age <span style="color:#f92672">-ge</span> <span style="color:#ae81ff">18</span>) {
</span></span><span style="display:flex;"><span>    Write-Output <span style="color:#e6db74">&#34;Adult&#34;</span>
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    Write-Output <span style="color:#e6db74">&#34;Minor&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Foreach loop</span>
</span></span><span style="display:flex;"><span>$fruits = @(<span style="color:#e6db74">&#34;Apple&#34;</span>, <span style="color:#e6db74">&#34;Banana&#34;</span>, <span style="color:#e6db74">&#34;Cherry&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">foreach</span> ($fruit <span style="color:#66d9ef">in</span> $fruits) {
</span></span><span style="display:flex;"><span>    Write-Output <span style="color:#e6db74">&#34;I like </span>$fruit<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># While loop</span>
</span></span><span style="display:flex;"><span>$i = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ($i <span style="color:#f92672">-le</span> <span style="color:#ae81ff">5</span>) {
</span></span><span style="display:flex;"><span>    Write-Output <span style="color:#e6db74">&#34;Count: </span>$i<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    $i++
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="advanced-powershell-features">Advanced PowerShell Features</h2>
<h3 id="working-with-objects">Working with Objects</h3>
<p>PowerShell&rsquo;s object pipeline is powerful. For example, get specific properties:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Get-Process | Select-Object -Property Name, CPU, ID | Sort-Object -Property CPU -Descending
</span></span></code></pre></div><h3 id="filtering-objects">Filtering Objects</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Filter processes using CPU more than 10</span>
</span></span><span style="display:flex;"><span>Get-Process | Where-Object { $_.CPU <span style="color:#f92672">-gt</span> <span style="color:#ae81ff">10</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find large files</span>
</span></span><span style="display:flex;"><span>Get-ChildItem -Path C:\ -Recurse -ErrorAction SilentlyContinue | 
</span></span><span style="display:flex;"><span>    Where-Object { $_.Length <span style="color:#f92672">-gt</span> <span style="color:#ae81ff">1</span>GB }
</span></span></code></pre></div><h3 id="powershell-modules">PowerShell Modules</h3>
<p>Modules extend PowerShell&rsquo;s functionality:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># List available modules</span>
</span></span><span style="display:flex;"><span>Get-Module -ListAvailable
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Import a module</span>
</span></span><span style="display:flex;"><span>Import-Module ActiveDirectory
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find commands in a module</span>
</span></span><span style="display:flex;"><span>Get-Command -Module ActiveDirectory
</span></span></code></pre></div><h3 id="remote-management">Remote Management</h3>
<p>PowerShell can manage remote computers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># Create a remote session</span>
</span></span><span style="display:flex;"><span>$session = New-PSSession -ComputerName Server01
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run command on remote computer</span>
</span></span><span style="display:flex;"><span>Invoke-Command -ComputerName Server01 -ScriptBlock { Get-Process }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enter interactive session</span>
</span></span><span style="display:flex;"><span>Enter-PSSession -ComputerName Server01
</span></span></code></pre></div><h2 id="powershell-in-modern-windows-environments">PowerShell in Modern Windows Environments</h2>
<h3 id="powershell-and-windows-management">PowerShell and Windows Management</h3>
<p>PowerShell is essential for managing:</p>
<ul>
<li>Windows Server environments</li>
<li>Active Directory</li>
<li>Azure resources</li>
<li>Microsoft 365 services</li>
<li>Windows Subsystem for Linux (WSL)</li>
</ul>
<h3 id="powershell-7">PowerShell 7</h3>
<p>PowerShell 7 is the latest major version, offering:</p>
<ul>
<li>Cross-platform support (Windows, macOS, Linux)</li>
<li>New operators and language features</li>
<li>Improved performance</li>
<li>Parallel processing with ForEach-Object -Parallel</li>
<li>Ternary operator: condition ? true-result : false-result</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>PowerShell has evolved from a simple shell into a comprehensive management framework and scripting language. Learning PowerShell fundamentals will dramatically increase your productivity when working with Windows systems and Microsoft services.</p>
<p>By understanding these essential commands and concepts, you&rsquo;re now equipped to:</p>
<ul>
<li>Navigate the file system efficiently</li>
<li>Manage system processes and services</li>
<li>Automate repetitive tasks</li>
<li>Gather detailed system information</li>
<li>Perform remote administration</li>
</ul>
<p>As you continue your PowerShell journey, remember that the built-in help system is your best friend. Use <code>Get-Help</code> liberally, and explore the vast ecosystem of PowerShell modules that can extend your capabilities even further.</p>
<h2 id="additional-resources">Additional Resources</h2>
<ul>
<li><a href="https://docs.microsoft.com/en-us/powershell/">Microsoft PowerShell Documentation</a></li>
<li><a href="https://github.com/PowerShell/PowerShell">PowerShell GitHub Repository</a></li>
<li><a href="https://powershell.org/">PowerShell.org</a> - Community resources and forums</li>
<li><a href="https://www.manning.com/books/learn-powershell-in-a-month-of-lunches">PowerShell in a Month of Lunches</a> - Excellent beginner book</li>
</ul>
]]></content:encoded></item><item><title>Introduction to Git</title><link>https://michaelbrunger.com/introduction-to-git/</link><pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/introduction-to-git/</guid><description>&lt;h1 id="git-crash-course-for-beginners-commands-workflow--terminology">Git Crash Course for Beginners: Commands, Workflow &amp;amp; Terminology&lt;/h1>
&lt;p>If you&amp;rsquo;re new to Git, you&amp;rsquo;re about to discover one of the most powerful tools in a developer&amp;rsquo;s toolkit. Git allows you to track changes, collaborate with others, and maintain different versions of your project. This comprehensive guide will take you through everything you need to know to get started with Git on Windows.&lt;/p>
&lt;h2 id="setting-up-git">Setting Up Git&lt;/h2>
&lt;p>Download Git and configure your identity:&lt;/p></description><content:encoded><![CDATA[<h1 id="git-crash-course-for-beginners-commands-workflow--terminology">Git Crash Course for Beginners: Commands, Workflow &amp; Terminology</h1>
<p>If you&rsquo;re new to Git, you&rsquo;re about to discover one of the most powerful tools in a developer&rsquo;s toolkit. Git allows you to track changes, collaborate with others, and maintain different versions of your project. This comprehensive guide will take you through everything you need to know to get started with Git on Windows.</p>
<h2 id="setting-up-git">Setting Up Git</h2>
<p>Download Git and configure your identity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git config --global user.name <span style="color:#e6db74">&#34;Your Name&#34;</span>
</span></span><span style="display:flex;"><span>git config --global user.email <span style="color:#e6db74">&#34;your.email@example.com&#34;</span>
</span></span></code></pre></div><p>Run these commands once when you first install Git. They&rsquo;ll associate your name and email with every commit you make.</p>
<h2 id="starting-a-project">Starting a Project</h2>
<p>You have two options when starting with Git:</p>
<h3 id="create-a-new-repository">Create a New Repository</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>mkdir my-project
</span></span><span style="display:flex;"><span>cd my-project
</span></span><span style="display:flex;"><span>git init
</span></span></code></pre></div><p>This creates a new folder and initialises it as a Git repository.</p>
<h3 id="clone-an-existing-repository">Clone an Existing Repository</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git clone https<span style="color:#960050;background-color:#1e0010">:</span>//github.com/username/repository-name.git
</span></span><span style="display:flex;"><span>cd repository-name
</span></span></code></pre></div><p>This downloads an existing project and its entire version history.</p>
<h2 id="the-daily-git-workflow">The Daily Git Workflow</h2>
<p>Here&rsquo;s what a typical Git workflow looks like:</p>
<h3 id="1-check-status-run-this-frequently">1. Check Status (Run This Frequently)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git status
</span></span></code></pre></div><p>This shows what files have changed, what&rsquo;s staged, and what&rsquo;s not. Consider this your dashboardâ€”check it often to understand what&rsquo;s happening in your repository.</p>
<h3 id="2-working-with-changes">2. Working with Changes</h3>
<p><strong>Adding Files to the Staging Area</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git add filename.txt       <span style="color:#75715e"># Add a specific file</span>
</span></span><span style="display:flex;"><span>git add folder/            <span style="color:#75715e"># Add an entire folder</span>
</span></span><span style="display:flex;"><span>git add .                  <span style="color:#75715e"># Add all changes</span>
</span></span></code></pre></div><p><strong>Committing Your Changes</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Clear description of your changes&#34;</span>
</span></span></code></pre></div><p><strong>Quick Commit for Already Tracked Files</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git commit -am <span style="color:#e6db74">&#34;Description of changes&#34;</span>
</span></span></code></pre></div><h3 id="3-working-with-remote-repositories">3. Working with Remote Repositories</h3>
<p><strong>Push Your Changes to GitHub/GitLab/etc.</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git push origin main
</span></span></code></pre></div><p><strong>Get the Latest Changes</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git pull origin main
</span></span></code></pre></div><p><strong>See Remote Repository Information</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git remote -v
</span></span></code></pre></div><p><strong>Add a Remote Repository</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git remote add origin https<span style="color:#960050;background-color:#1e0010">:</span>//github.com/username/repository-name.git
</span></span></code></pre></div><h2 id="branch-management">Branch Management</h2>
<p>Branches let you work on different features or fixes simultaneously.</p>
<p><strong>Create and Switch to a New Branch</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git checkout -b feature-name
</span></span></code></pre></div><p><strong>List All Branches</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git branch            <span style="color:#75715e"># Local branches</span>
</span></span><span style="display:flex;"><span>git branch -a         <span style="color:#75715e"># All branches including remote</span>
</span></span></code></pre></div><p><strong>Merge a Branch</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git checkout main     <span style="color:#75715e"># Switch to the target branch</span>
</span></span><span style="display:flex;"><span>git merge feature-name
</span></span></code></pre></div><p><strong>Delete a Branch</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git branch -d feature-name    <span style="color:#75715e"># Safe delete</span>
</span></span><span style="display:flex;"><span>git branch -D feature-name    <span style="color:#75715e"># Force delete</span>
</span></span></code></pre></div><h2 id="file-operations">File Operations</h2>
<p><strong>Discard Changes to a File</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git checkout -- filename.txt
</span></span></code></pre></div><p><strong>Unstage a File</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git restore --staged filename.txt
</span></span></code></pre></div><p><strong>Delete a File and Stage the Removal</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git rm filename.txt
</span></span></code></pre></div><p><strong>Rename a File</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git mv oldname.txt newname.txt
</span></span></code></pre></div><h2 id="viewing-history">Viewing History</h2>
<p><strong>View Commit History</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git log                       <span style="color:#75715e"># Full history</span>
</span></span><span style="display:flex;"><span>git log --oneline             <span style="color:#75715e"># Compact history</span>
</span></span><span style="display:flex;"><span>git log --graph --oneline     <span style="color:#75715e"># Visual history</span>
</span></span></code></pre></div><p><strong>View Changes in a Specific Commit</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git show commit-hash
</span></span></code></pre></div><p><strong>See Changes Between Working Directory and Staging</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git diff
</span></span></code></pre></div><p><strong>See Staged Changes</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git diff --staged
</span></span></code></pre></div><h2 id="fixing-mistakes">Fixing Mistakes</h2>
<p><strong>Amend the Last Commit</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git commit --amend -m <span style="color:#e6db74">&#34;New commit message&#34;</span>
</span></span></code></pre></div><p><strong>Undo the Last Commit but Keep Changes</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git reset HEAD~<span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p><strong>Completely Undo Last Commit and Changes</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git reset --hard HEAD~<span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p><strong>Stash Changes Temporarily</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git stash                     <span style="color:#75715e"># Stash changes</span>
</span></span><span style="display:flex;"><span>git stash pop                 <span style="color:#75715e"># Retrieve stashed changes</span>
</span></span><span style="display:flex;"><span>git stash list                <span style="color:#75715e"># List stashes</span>
</span></span></code></pre></div><h2 id="working-with-vs-code">Working with VS Code</h2>
<p>VS Code has excellent Git integration through its Source Control panel (Ctrl+Shift+G). You can:</p>
<ul>
<li>See modified files</li>
<li>Stage changes with a click</li>
<li>Commit with a message</li>
<li>Push/pull with buttons</li>
<li>View diffs visually</li>
<li>Resolve merge conflicts</li>
</ul>
<h2 id="real-world-workflows">Real-World Workflows</h2>
<h3 id="adding-new-code">Adding New Code</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git status                    <span style="color:#75715e"># See what&#39;s changed</span>
</span></span><span style="display:flex;"><span>git add .                     <span style="color:#75715e"># Stage all changes</span>
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Add login feature&#34;</span>  <span style="color:#75715e"># Commit changes</span>
</span></span><span style="display:flex;"><span>git push origin main          <span style="color:#75715e"># Push to remote</span>
</span></span></code></pre></div><h3 id="fixing-a-bug">Fixing a Bug</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git checkout -b bugfix        <span style="color:#75715e"># Create a branch for your bugfix</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make your changes</span>
</span></span><span style="display:flex;"><span>git add .                     <span style="color:#75715e"># Stage changes</span>
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Fix login validation bug&#34;</span>  <span style="color:#75715e"># Commit</span>
</span></span><span style="display:flex;"><span>git checkout main             <span style="color:#75715e"># Switch back to main</span>
</span></span><span style="display:flex;"><span>git pull origin main          <span style="color:#75715e"># Get latest changes</span>
</span></span><span style="display:flex;"><span>git merge bugfix              <span style="color:#75715e"># Merge your bugfix</span>
</span></span><span style="display:flex;"><span>git push origin main          <span style="color:#75715e"># Push to remote</span>
</span></span><span style="display:flex;"><span>git branch -d bugfix          <span style="color:#75715e"># Delete the branch</span>
</span></span></code></pre></div><h3 id="deleting-files">Deleting Files</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git rm obsolete-file.txt      <span style="color:#75715e"># Remove and stage deletion</span>
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Remove obsolete file&#34;</span>  <span style="color:#75715e"># Commit deletion</span>
</span></span><span style="display:flex;"><span>git push origin main          <span style="color:#75715e"># Push to remote</span>
</span></span></code></pre></div><h3 id="handling-merge-conflicts">Handling Merge Conflicts</h3>
<p>If a merge creates conflicts:</p>
<ol>
<li>Open conflicted files in VS Code</li>
<li>Look for conflict markers (<code>&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>)</li>
<li>Edit to resolve conflicts</li>
<li>Save files</li>
<li>Run:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git add .                     <span style="color:#75715e"># Stage resolved files</span>
</span></span><span style="display:flex;"><span>git commit                    <span style="color:#75715e"># Commit the merge</span>
</span></span></code></pre></div><h2 id="git-terminology-glossary">Git Terminology Glossary</h2>
<p>Understanding Git&rsquo;s terminology is crucial for mastering the tool. Here&rsquo;s a comprehensive glossary:</p>
<h3 id="core-concepts">Core Concepts</h3>
<p><strong>Repository (Repo)</strong> - A storage location for your project that contains all files, folders, and the complete history of changes.</p>
<p><strong>Working Directory</strong> - The files that you&rsquo;re currently working with on your local machine.</p>
<p><strong>Staging Area (Index)</strong> - A middle ground between your working directory and repository where changes are prepared before committing.</p>
<p><strong>Commit</strong> - A snapshot of your repository at a specific point in time, including all tracked changes since the last commit.</p>
<p><strong>Branch</strong> - An independent line of development that allows you to work on features or fixes without affecting the main codebase.</p>
<p><strong>Main/Master</strong> - The default primary branch in your repository (traditionally called &ldquo;master&rdquo;, but &ldquo;main&rdquo; is now more common).</p>
<p><strong>HEAD</strong> - A pointer to the latest commit in your current branch; essentially &ldquo;where you are now&rdquo; in the repository&rsquo;s history.</p>
<p><strong>Clone</strong> - A complete copy of a repository, including all files and history.</p>
<p><strong>Fork</strong> - A personal copy of someone else&rsquo;s repository stored on your GitHub account.</p>
<h3 id="actions--operations">Actions &amp; Operations</h3>
<p><strong>Stage</strong> - The act of preparing files for a commit by adding them to the staging area.</p>
<p><strong>Commit</strong> - The action of saving staged changes to the repository history.</p>
<p><strong>Push</strong> - Uploading commits from your local repository to a remote repository.</p>
<p><strong>Pull</strong> - Downloading commits from a remote repository to your local repository and merging them.</p>
<p><strong>Fetch</strong> - Downloading commits from a remote repository without automatically merging them.</p>
<p><strong>Merge</strong> - Combining changes from one branch into another.</p>
<p><strong>Rebase</strong> - An alternative to merging that rewrites commit history by moving a branch to a new base commit.</p>
<p><strong>Checkout</strong> - Switching between branches or versions of files.</p>
<p><strong>Stash</strong> - Temporarily storing uncommitted changes so you can work on something else.</p>
<h3 id="storage-locations">Storage Locations</h3>
<p><strong>Local Repository</strong> - The Git repository stored on your computer.</p>
<p><strong>Remote Repository</strong> - A Git repository stored on a server or service (like GitHub, GitLab, Bitbucket).</p>
<p><strong>Origin</strong> - The default name Git gives to the remote repository from which you cloned.</p>
<p><strong>Upstream</strong> - The original repository that you forked from (commonly used in open-source projects).</p>
<h3 id="connection--synchronisation">Connection &amp; Synchronisation</h3>
<p><strong>Remote</strong> - A connection to another repository, usually on a server.</p>
<p><strong>Tracking Branch</strong> - A local branch that has a direct relationship to a remote branch.</p>
<p><strong>Upstream Branch</strong> - The remote branch that your local branch is tracking.</p>
<h3 id="changes--differences">Changes &amp; Differences</h3>
<p><strong>Modified</strong> - Files that have been changed but not yet staged.</p>
<p><strong>Staged</strong> - Files that have been added to the staging area and are ready to be committed.</p>
<p><strong>Untracked</strong> - Files in your working directory that Git isn&rsquo;t monitoring.</p>
<p><strong>Diff</strong> - The difference between two versions of a file or sets of files.</p>
<p><strong>Patch</strong> - A file containing changes between versions that can be applied to another codebase.</p>
<h3 id="conflict-resolution">Conflict Resolution</h3>
<p><strong>Merge Conflict</strong> - Occurs when Git cannot automatically resolve differences between two sets of changes.</p>
<p><strong>Conflict Markers</strong> - Special notation (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>) inserted by Git to show conflicting sections in files.</p>
<p><strong>Resolution</strong> - The process of manually editing files to resolve conflicts between different versions.</p>
<h3 id="version-references">Version References</h3>
<p><strong>Hash/SHA</strong> - A unique identifier (e.g., <code>a1b2c3d4...</code>) for each commit in Git.</p>
<p><strong>Tag</strong> - A named pointer to a specific commit, typically used for release versions.</p>
<p><strong>HEAD~n</strong> - A relative reference to the nth commit before HEAD.</p>
<h3 id="advanced-concepts">Advanced Concepts</h3>
<p><strong>Detached HEAD</strong> - A state where you&rsquo;re viewing a specific commit rather than a branch.</p>
<p><strong>Cherry-pick</strong> - Applying a specific commit from one branch to another.</p>
<p><strong>Submodule</strong> - A repository embedded within another repository.</p>
<p><strong>Gitignore</strong> - A file that tells Git which files or folders to ignore in a project.</p>
<p><strong>Hook</strong> - Scripts that run automatically at certain points in Git&rsquo;s execution.</p>
<p><strong>Reflog</strong> - A log of where your HEAD and branches have been.</p>
<p><strong>Fast-forward</strong> - A simplified merge that occurs when the target branch hasn&rsquo;t changed since the feature branch was created.</p>
<h3 id="practical-terminology">Practical Terminology</h3>
<p><strong>Pull Request (PR)</strong> - On platforms like GitHub, a request to merge changes from one branch to another, usually with code review.</p>
<p><strong>Code Review</strong> - The process of examining code changes before they&rsquo;re merged.</p>
<p><strong>Branch Protection</strong> - Rules that prevent certain actions on important branches without proper authorisation.</p>
<p><strong>Continuous Integration (CI)</strong> - Automated testing that runs whenever code is pushed to a repository.</p>
<p><strong>Continuous Deployment (CD)</strong> - Automated deployment of code that passes CI tests.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Git can seem intimidating at first, but with practice, these commands and concepts will become second nature. The key is to use Git regularly, starting with simple operations and gradually incorporating more advanced features into your workflow.</p>
<p>Git is designed to be a safety net for your code. Don&rsquo;t be afraid to experiment; you can always recover your work if something goes wrong.</p>
]]></content:encoded></item><item><title>Part 1: Getting Started with Python on Windows</title><link>https://michaelbrunger.com/python-foundations-getting-started/</link><pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-foundations-getting-started/</guid><description>Learn what Python is, install it on Windows, and write your first Python program in this introductory guide to the Python programming language.</description><content:encoded><![CDATA[<h1 id="post-1-getting-started-with-python-on-windows">Post 1: Getting Started with Python on Windows</h1>
<p>Welcome to the first post in my Python learning series. As I learn Python myself, I&rsquo;ll be documenting my journey here. This first post covers the essentials to get you up and running with Python on Windows:</p>
<ol>
<li>What Python is and why it&rsquo;s worth learning</li>
<li>Installing Python on Windows (with step-by-step instructions)</li>
<li>Quick install notes for macOS &amp; Linux users</li>
<li>Writing your first &ldquo;Hello, World!&rdquo; program</li>
<li>Using the Python interactive shell</li>
</ol>
<hr>
<h2 id="1-what-is-python-and-why-learn-it">1. What Is Python (and Why Learn It)?</h2>
<p>Python is a high-level, interpreted programming language that&rsquo;s gained enormous popularity for good reason. After looking into various languages, I chose to learn Python because:</p>
<ul>
<li><strong>Readability</strong>: Its clean syntax uses indentation and fewer symbols than languages like C++ or Java, making code easier to understand</li>
<li><strong>Versatility</strong>: It&rsquo;s used across multiple domains from web development (Django, Flask) to data analysis (NumPy, pandas) and automation</li>
<li><strong>Package ecosystem</strong>: PyPI (Python Package Index) hosts over 400,000 third-party packages that extend Python&rsquo;s capabilities</li>
<li><strong>Community support</strong>: Extensive documentation, forums, and tutorials make finding help straightforward</li>
</ul>
<p>For me as a finance professional, Python&rsquo;s data analysis capabilities are particularly valuable, but its applications stretch across many fields.</p>
<hr>
<h2 id="2-installing-python-on-windows">2. Installing Python on Windows</h2>
<p>Here&rsquo;s how to get Python installed on Windows 10/11:</p>
<h3 id="21-download-the-installer">2.1 Download the Installer</h3>
<ol>
<li>Visit the official Python download page: <a href="https://www.python.org/downloads/windows">https://www.python.org/downloads/windows</a></li>
<li>Click the button for the latest stable release (currently Python 3.11.x)</li>
</ol>
<h3 id="22-run-the-installer">2.2 Run the Installer</h3>
<ol>
<li>Locate and double-click the downloaded file (typically named python-3.x.x-amd64.exe)</li>
<li><strong>IMPORTANT</strong>: Check the box that says &ldquo;Add Python 3.x to PATH&rdquo; at the bottom of the installer
<ul>
<li>This allows you to run Python from any directory in Command Prompt</li>
</ul>
</li>
<li>Click &ldquo;Install Now&rdquo; for the standard installation, or &ldquo;Customise installation&rdquo; if you want to change specific options</li>
</ol>
<h3 id="23-verify-the-installation">2.3 Verify the Installation</h3>
<ol>
<li>Open Command Prompt (press Win + R, type <code>cmd</code>, and hit Enter)</li>
<li>Type the following command and press Enter:
<pre tabindex="0"><code>python --version
</code></pre></li>
<li>You should see output like:
<pre tabindex="0"><code>Python 3.11.4
</code></pre>(Your version number might differ)</li>
</ol>
<hr>
<h2 id="3-quick-notes-for-macos--linux">3. Quick Notes for macOS &amp; Linux</h2>
<ul>
<li>
<p><strong>macOS</strong>:</p>
<ul>
<li>Many Macs come with Python 2.7 preinstalled, but you&rsquo;ll want Python 3</li>
<li>The simplest approach is using Homebrew:
<pre tabindex="0"><code>brew install python
</code></pre></li>
<li>Alternatively, download the installer from python.org</li>
</ul>
</li>
<li>
<p><strong>Linux</strong>:</p>
<ul>
<li>Most Linux distributions include Python</li>
<li>For Ubuntu/Debian:
<pre tabindex="0"><code>sudo apt update
sudo apt install python3 python3-pip
</code></pre></li>
</ul>
</li>
</ul>
<p>For complete instructions, see the official Python documentation:</p>
<ul>
<li>macOS: <a href="https://docs.python.org/3/using/mac.html">https://docs.python.org/3/using/mac.html</a></li>
<li>Linux: <a href="https://docs.python.org/3/using/unix.html">https://docs.python.org/3/using/unix.html</a></li>
</ul>
<hr>
<h2 id="4-your-first-hello-world-script">4. Your First &ldquo;Hello, World!&rdquo; Script</h2>
<p>Time to write your first Python program:</p>
<ol>
<li>
<p>In Command Prompt, navigate to a folder where you want to create your script:</p>
<pre tabindex="0"><code>cd C:\Users\YourUsername\Documents
</code></pre></li>
<li>
<p>Create a new file named <code>hello.py</code> using any text editor (Notepad, VS Code, etc.)</p>
</li>
<li>
<p>Type this line in the file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Hello, World!&#34;</span>)
</span></span></code></pre></div></li>
<li>
<p>Save the file, then run it by typing in Command Prompt:</p>
<pre tabindex="0"><code>python hello.py
</code></pre></li>
<li>
<p>You should see:</p>
<pre tabindex="0"><code>Hello, World!
</code></pre></li>
</ol>
<p>Congratulationsâ€”you&rsquo;ve written and executed your first Python program!</p>
<hr>
<h2 id="5-exploring-the-python-interactive-shell">5. Exploring the Python Interactive Shell</h2>
<p>Python comes with an interactive shell (also called a REPLâ€”Read-Evaluate-Print Loop) that lets you test code snippets immediately:</p>
<ol>
<li>
<p>In Command Prompt, simply type:</p>
<pre tabindex="0"><code>python
</code></pre></li>
<li>
<p>You&rsquo;ll see the Python prompt (<code>&gt;&gt;&gt;</code>) where you can type code directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Python&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;I&#39;m learning </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>)
</span></span><span style="display:flex;"><span>I<span style="color:#e6db74">&#39;m learning Python!</span>
</span></span></code></pre></div></li>
<li>
<p>Try some basic math:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">35</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5.0</span>
</span></span></code></pre></div></li>
<li>
<p>To exit, type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> exit()
</span></span></code></pre></div><p>Or press Ctrl+Z followed by Enter on Windows.</p>
</li>
</ol>
<p>The interactive shell is excellent for quick experiments and calculations without creating a file.</p>
<hr>
<h2 id="practice-exercise">Practice Exercise</h2>
<p>Before moving on, try this quick exercise:</p>
<ol>
<li>Create a new Python file named <code>greeting.py</code></li>
<li>Write code that:
<ul>
<li>Assigns your name to a variable</li>
<li>Prints a greeting that includes your name</li>
</ul>
</li>
<li>Run the script to see the output</li>
</ol>
<p><strong>Example solution</strong> (don&rsquo;t peek until you&rsquo;ve tried!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Alex&#34;</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Nice to meet you, </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>)
</span></span></code></pre></div><hr>
<h2 id="whats-next">What&rsquo;s Next?</h2>
<p>Now that you have Python installed and have run your first code, you&rsquo;re ready to:</p>
<ul>
<li>Explore text editors and IDEs that will make coding more efficient (coming in Post 2)</li>
<li>Learn Python syntax fundamentals to build more complex programs</li>
<li>Begin solving real problems with your new skills</li>
</ul>
<p>Stay tuned for Post 2: Text Editors vs. IDEs for Python Development!</p>
<hr>
<p><em>This post is part of my journey learning Python. I&rsquo;m a chartered accountant exploring programming to enhance my analytical toolkit. If you have questions or spot any errors, please leave a comment below.</em></p>
]]></content:encoded></item><item><title>Python Learning Path: From Fundamentals to Intermediate Applications</title><link>https://michaelbrunger.com/python-learning-path/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://michaelbrunger.com/python-learning-path/</guid><description>A comprehensive 17-post curriculum taking you from Python installation to building real-world applications. Covers core language features, professional practices, data analysis tools, and practical project development.</description><content:encoded><![CDATA[<h2 id="my-python-learning-journey">My Python Learning Journey</h2>
<p>Welcome to my Python learning series! As a finance professional exploring programming, I&rsquo;m documenting my entire journey through 17 posts that take you from absolute beginner to building practical applications.</p>
<h2 id="what-to-expect-from-this-series">What to Expect from This Series</h2>
<p>This series is designed for fellow finance professionals and beginners who want to learn Python in a practical, step-by-step manner. Each post builds on previous concepts while introducing new skills.</p>
<h2 id="series-overview">Series Overview</h2>
<p>Here&rsquo;s what we&rsquo;ll cover throughout the 17 posts:</p>
<h2 id="foundations-posts-16">Foundations (Posts 1â€“6)</h2>
<h3 id="1-getting-started-with-python-on-windows">1. Getting Started with Python on Windows</h3>
<ul>
<li>What is Python, why learn it, and where it&rsquo;s used</li>
<li>Installing Python (stepâ€‘byâ€‘step Windows installer with screenshots)</li>
<li>Quick pointers for macOS/Linux installs</li>
<li>Your first &ldquo;Hello, World!&rdquo; script</li>
<li>Exploring the interactive REPL (shell)</li>
</ul>
<h3 id="2-text-editors-vs-ides-for-python-development">2. Text Editors vs. IDEs for Python Development</h3>
<ul>
<li>Lightweight editors (Notepad++, Sublime) vs. full IDEs (VS Code, PyCharm)</li>
<li>Setting up VS Code for Python (extensions, linting, autoâ€‘format)</li>
<li>Code highlighting, IntelliSense/autocomplete, and snippets</li>
<li>Running and debugging code from your editor</li>
<li>Quick intro to IDEâ€‘based breakpoints vs. printâ€‘driven debugging</li>
</ul>
<h3 id="3-python-syntax-fundamentals--language-features">3. Python Syntax Fundamentals &amp; Language Features</h3>
<ul>
<li>Variables, data types (numbers, strings, booleans) and operators</li>
<li>Indentation and control flow (if/elif/else, loops)</li>
<li>Comprehensions &amp; lambdas: list/dict/set comprehensions, map/filter, anonymous functions</li>
<li>Iterators &amp; generators: the iterator protocol, writing your own with yield</li>
<li>Basic error handling: try/except, else/finally</li>
</ul>
<h3 id="4-core-data-structures">4. Core Data Structures</h3>
<ul>
<li>Lists: creation, indexing, slicing, methods</li>
<li>Tuples: immutability, packing/unpacking</li>
<li>Dictionaries: keyâ€“value access, common methods</li>
<li>Sets: uniqueness, union/intersection/difference</li>
<li>Choosing the right structure for the task</li>
</ul>
<h3 id="5-functions-modules--file-io">5. Functions, Modules &amp; File I/O</h3>
<ul>
<li>Defining and calling functions (def, return, positional vs. keyword args)</li>
<li>Variable scope and namespaces</li>
<li>Organising code into modules and packages</li>
<li>Exploring the Standard Library (math, random, datetime, os, sys)</li>
<li>Reading from/writing to text files with open() and the with statement</li>
</ul>
<h3 id="6-virtual-environments--packaging">6. Virtual Environments &amp; Packaging</h3>
<ul>
<li>Why virtual environments matter (avoiding dependency conflicts)</li>
<li>Creating/activating/deactivating venv on Windows (and notes for macOS/Linux)</li>
<li>Managing packages with pip: install, freeze, requirements.txt</li>
<li>Basic packaging: project structure, setup.py/pyproject.toml essentials</li>
<li>Publishing to PyPI with twine and versioning best practices</li>
</ul>
<hr>
<h2 id="professional-best-practices-posts-79">Professional Best Practices (Posts 7â€“9)</h2>
<h3 id="7-code-quality--collaboration">7. Code Quality &amp; Collaboration</h3>
<ul>
<li>Version control fundamentals with Git &amp; GitHub (clone, commit, push, pull requests)</li>
<li>Writing clean, PEP 8â€‘compliant code; linting with flake8</li>
<li>Autoâ€‘formatting with black and organising imports with isort</li>
<li>Writing docstrings (Google vs. NumPy style) and autoâ€‘generating docs (Sphinx overview)</li>
</ul>
<h3 id="8-testing--debugging">8. Testing &amp; Debugging</h3>
<ul>
<li>Unit testing basics with unittest and pytest (assertions, test discovery)</li>
<li>Fixtures in pytest and intro to TDD workflows</li>
<li>Raising and defining custom exceptions (raise, subclassing Exception)</li>
<li>Using the debugger: pdb commands and IDEâ€‘based breakpoints</li>
<li>Structured logging with the logging module (levels, handlers, formatting)</li>
</ul>
<h3 id="9-commandline-tools--automation">9. Commandâ€‘Line Tools &amp; Automation</h3>
<ul>
<li>Building CLI scripts with argparse: positional args, flags, help text</li>
<li>Packaging entry points (console_scripts) for installable commands</li>
<li>Automating file/folder tasks (os, shutil): renaming, organising, backups</li>
<li>Automating GUI interactions with PyAutoGUI (keyboard/mouse control)</li>
<li>Putting it all together in a sample automation project</li>
</ul>
<hr>
<h2 id="core-tools--data-posts-1013">Core Tools &amp; Data (Posts 10â€“13)</h2>
<h3 id="10-the-python-ecosystem--interactive-data-workflows">10. The Python Ecosystem &amp; Interactive Data Workflows</h3>
<ul>
<li>Clarify package vs. environment managers: pip vs. conda vs. Anaconda</li>
<li>When and why to choose each (lightweight vs. dataâ€‘science bundles)</li>
<li>Installing and exploring Anaconda Navigator</li>
<li>Jupyter Notebooks: installing via pip/Anaconda, notebook anatomy (code vs. Markdown), basic plots inline</li>
</ul>
<h3 id="11-numpy-fundamentals-for-numerical-data">11. NumPy Fundamentals for Numerical Data</h3>
<ul>
<li>Installing NumPy</li>
<li>The ndarray: creation, indexing, slicing</li>
<li>Vectorized operations and broadcasting rules</li>
<li>Performance comparison vs. pure Python lists</li>
</ul>
<h3 id="12-data-analysis-with-pandas">12. Data Analysis with pandas</h3>
<ul>
<li>Installing pandas</li>
<li>Understanding Series and DataFrame objects</li>
<li>Reading data (CSV, Excel), inspecting and summarising</li>
<li>Selection, filtering, grouping, transformation</li>
<li>Handling missing data</li>
</ul>
<h3 id="13-data-visualisation-basics">13. Data Visualisation Basics</h3>
<ul>
<li>Matplotlib core: line, scatter, bar, histogram plots</li>
<li>Customising labels, titles, legends</li>
<li>Seaborn intro: statistical plot types (boxplot, heatmap)</li>
<li>Saving figures to files for reports</li>
</ul>
<hr>
<h2 id="intermediate-applications-posts-1417">Intermediate Applications (Posts 14â€“17)</h2>
<h3 id="14-introduction-to-objectoriented-programming-oop">14. Introduction to Objectâ€‘Oriented Programming (OOP)</h3>
<ul>
<li>Classes vs. objects, attributes vs. methods</li>
<li>The init constructor and self</li>
<li>Encapsulation, inheritance and polymorphism (simple examples)</li>
<li>Why OOP matters: organising and reusing code</li>
</ul>
<h3 id="15-web-development-foundations">15. Web Development Foundations</h3>
<ul>
<li>Option A: Flask (lightweight): setting up, routes, templates, serving static files</li>
<li>Option B: Django (fullâ€‘featured): project/app structure, admin interface, ORM intro</li>
<li>Option C: Web Scraping: requests + BeautifulSoup for HTML parsing</li>
<li>Deploying your first minimal web app on a free hosting platform (e.g., Heroku)</li>
</ul>
<h3 id="16-building-simple-gui-applications-with-tkinter">16. Building Simple GUI Applications with Tkinter</h3>
<ul>
<li>Installing/importing Tkinter (builtâ€‘in)</li>
<li>Creating windows, labels, buttons, entry widgets</li>
<li>Layout managers (pack, grid)</li>
<li>A handsâ€‘on miniâ€‘project: e.g., basic calculator or temperature converter</li>
</ul>
<h3 id="17-next-steps--advanced-topics">17. Next Steps &amp; Advanced Topics</h3>
<ul>
<li>Concurrency &amp; async: when to use threads vs. processes (threading, multiprocessing), intro to asyncio</li>
<li>Endâ€‘toâ€‘end miniâ€‘project ideas (combine web, data, GUI, testing)</li>
<li>Recommended books, courses, blogs, and community resources</li>
<li>Tips for staying sharp: code challenges, openâ€‘source contribution, local meetups</li>
</ul>
]]></content:encoded></item></channel></rss>